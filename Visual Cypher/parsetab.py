
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'PROGRAM ID VAR_INT VAR_FLOAT VAR_STRING VAR_BOOLEAN FLOAT INT STRING BOOLEAN CARET POINT COMA OP_PLUS OP_MINUS OP_TIMES OP_DIVISION OP_EQUALS_TWO OP_NOT_EQUALS OP_LPAREN OP_RPAREN OP_EQUALS OP_LESS_THAN OP_LESS_EQUALS_THAN OP_GREATER_THAN OP_GREATER_EQUALS_THAN AND OR PRINT QUOT_MARK SEMICOLON LCURLY_BRACKET RCURLY_BRACKET VAR IF ELSE OP_PLUS_EQUALS OP_MINUS_EQUALS RETURN FUNCTION MAIN FOR VOID\n\tprogram\t\t:\tPROGRAM  ID  LCURLY_BRACKET  vars   function \tmain_function\t RCURLY_BRACKET\t\n\n\t\n\tvars\t:\ttype\t ID\t vars_prime2\tSEMICOLON vars\n\t\t\t|\tepsilon\n\t\n\tvars_prime\t:\tCOMA \tID\t\tvars_prime2\t\tvars_prime\t\n\t\t\t\t|\tepsilon\n\t\n\tvars_prime2\t\t:\t\tOP_EQUALS\tVAR_INT vars_prime\n\t\t\t\t\t|\tvars_prime\n\t\t\t\t\t|\tepsilon\n\t\n\tvars2\t:\t\tINT\t \t ID\t\tOP_EQUALS\tVAR_INT\t \tSEMICOLON\tvars2\n\t\t\t|\t\tFLOAT\t ID\t\tOP_EQUALS\tVAR_FLOAT \tSEMICOLON\tvars2\n\t\t\t|\t\tSTRING\t ID\t\tOP_EQUALS\tVAR_STRING\tSEMICOLON\tvars2\n\t\t\t|\t\tBOOLEAN\t ID\t\tOP_EQUALS\tVAR_BOOLEAN\tSEMICOLON\tvars2\n\t\t\t|\t\tepsilon\n\t\n\tfunction\t:\tFUNCTION\ttype\tID\t\tOP_LPAREN\tparameters OP_RPAREN\tbloque\tfunction\n\t\t\t\t|\tFUNCTION\tVOID\tID\t\tOP_LPAREN\tparameters OP_RPAREN\tbloque\tfunction\n\t\t\t\t|\tepsilon\n\t\n\tmain_function\t:\tMAIN\tOP_LPAREN\tOP_RPAREN\tbloque\t\n\t\n\ttype\t:\tINT\n\t\t\t|\tFLOAT\n\t\t\t|\tSTRING\n\t\t\t|\tBOOLEAN\n\t\t\t\n\t\n\tparameters\t:\ttype\t\tID\t\t\tparameters\n\t\t\t\t|\tCOMA\t\ttype\t\tID\t\t\t\tparameters\n\t\t\t\t|\tepsilon\n\t\n\tbloque\t:\tLCURLY_BRACKET\tbloque_primo\tRCURLY_BRACKET\t\n\t\n\t\n\tbloque_primo\t:\tbloque_primo\tstatement \n\t\t\t\t\t|\tepsilon\n\t\t\t\n\t\n\tstatement\t:\tassigment\n\t\t\t\t|\tif\n\t\t\t\t|\tprinter\n\t\t\t\t|\tincrement\n\t\t\t\t|\tfor\n\t\t\t\t|\treturn\n\t\t\t\t|\tfunction_call\n\t\t\t\t\n\t\n\tassigment\t:\tID\tOP_EQUALS\tsingle_expression\tSEMICOLON\n\n\t\n\tif\t:\tIF\tOP_LPAREN\tcondition_mega_expression\tOP_RPAREN\tbloque\n\t\t|\tIF\tOP_LPAREN\tcondition_mega_expression\tOP_RPAREN\tbloque\t\tELSE\tbloque\t\n\t\t\t\n\t\n\tprinter\t:\tPRINT\tOP_LPAREN\timpression\tOP_RPAREN\t SEMICOLON\n\n\t\n\timpression\t:\tmega_expression\n\t\t\t\t|\tmega_expression\t\tOP_PLUS\t\timpression\n\t\n\t\n\tincrement\t:\tID\tOP_PLUS_EQUALS \t\tsingle_expression\t\tSEMICOLON\n\t\t\t\t|\tID\tOP_MINUS_EQUALS\t \tsingle_expression\t\tSEMICOLON\n\t\t\t\t|\tID\tOP_PLUS\t\t\t\tOP_PLUS\t\t\t\tSEMICOLON\n\t\t\t\t|\tID\tOP_MINUS\t\t\tOP_MINUS\t\t\tSEMICOLON\n\t\n\tfor\t:\tFOR\t\tOP_LPAREN\tassigment\tcondition_super_expression\tSEMICOLON\tincrement\tOP_RPAREN\tbloque\t\n\t\n\treturn\t:\tRETURN \tsingle_expression \tSEMICOLON\n\t\n\tfunction_call :\tID\tOP_LPAREN\tfunction_call_prime\t\tOP_RPAREN\tSEMICOLON\n\t\n\tfunction_call_prime\t:\tID\t\tfunction_call_prime\n\t\t\t\t\t\t|\tCOMA\tID\t\t\t\t\t\tfunction_call_prime\n\t\t\t\t\t\t|\tepsilon\n\t\n\tcondition_mega_expression\t:\tcondition_super_expression\n\t\t\t\t\t\t\t\t|\tcondition_super_expression\tAND\t\tcondition_super_expression\n\t\t\t\t\t\t\t\t|\tcondition_super_expression\tOR\t\tcondition_super_expression\n\t\n\tcondition_super_expression\t:\texpression\tOP_GREATER_THAN\t\t\t expression\n\t\t\t\t\t\t\t\t|\texpression\tOP_LESS_THAN\t\t\t expression\n\t\t\t\t\t\t\t\t|\texpression\tOP_GREATER_EQUALS_THAN\t expression\n\t\t\t\t\t\t\t\t|\texpression\tOP_LESS_EQUALS_THAN\t\t expression\n\t\t\t\t\t\t\t\t|\texpression\tOP_EQUALS_TWO\t\t\t expression\n\t\t\t\t\t\t\t\t|\texpression\tOP_NOT_EQUALS\t\t\t expression\n\t\n\tsingle_expression \t:\tsingle_term\n\t\t\t\t\t\t|\tsingle_term\t\tOP_PLUS\t\tsingle_expression\t\n\t\t\t\t\t\t|\tsingle_term\t\tOP_MINUS\tsingle_expression\t\t\t\t\n\t\n\tsingle_term\t:\tsingle_fact\n\t\t\t\t|\tsingle_fact\tOP_DIVISION\t\tsingle_term\t\n\t\t\t\t|\tsingle_fact\tOP_TIMES\t\tsingle_term\t\n\n\t\n\tsingle_fact\t:\tvar_cte\n\t\t\t\t|\tOP_LPAREN\t\tsingle_expression\t\tOP_RPAREN\t\n\t\n\tmega_expression\t:\tsuper_expression\n\t\t\t\t\t|\tsuper_expression\tAND\t\tsuper_expression\n\t\t\t\t\t|\tsuper_expression\tOR\t\tsuper_expression\n\t\n\tsuper_expression\t:\texpression\n\t\t\t\t\t\t|\texpression\tOP_GREATER_THAN\t\t\t expression\n\t\t\t\t\t\t|\texpression\tOP_LESS_THAN\t\t\t expression\n\t\t\t\t\t\t|\texpression\tOP_GREATER_EQUALS_THAN\t expression\n\t\t\t\t\t\t|\texpression\tOP_LESS_EQUALS_THAN\t\t expression\n\t\t\t\t\t\t|\texpression\tOP_EQUALS_TWO\t\t\t expression\n\t\t\t\t\t\t|\texpression\tOP_NOT_EQUALS\t\t\t expression\n\n\t\n\texpression :\tterm\n\t\t\t\t|\tterm\tOP_PLUS\t\texpression\t\n\t\t\t\t|\tterm\tOP_MINUS\texpression\t\n\t\t\t\t\n\t\n\tterm\t:\tfact\n\t\t\t|\tfact\tOP_DIVISION\t\tterm\t\n\t\t\t|\tfact\tOP_TIMES\t\tterm\t\n\n\t\n\tfact\t:\tvar_cte\n\t\t\t|\tOP_LPAREN\t\tmega_expression\t\tOP_RPAREN\t\n\t\n\tvar_cte : \tID\n\t\t\t| \tVAR_INT\n\t\t\t|\tVAR_FLOAT\n\t\t\t|\tVAR_STRING\n\tepsilon : '
    
_lr_action_items = {'OP_LESS_EQUALS_THAN':([72,73,75,77,101,102,104,105,119,161,162,163,171,172,],[-87,-88,-89,-86,-84,-78,132,-81,152,-85,-80,-79,-82,-83,]),'RETURN':([39,47,48,54,55,57,58,59,60,61,65,66,92,141,142,143,144,148,158,174,176,189,190,],[-90,-27,53,-34,-31,-29,-32,-26,-30,-33,-28,-25,-46,-44,-35,-42,-43,-41,-38,-47,-36,-37,-45,]),'OP_LESS_THAN':([72,73,75,77,101,102,104,105,119,161,162,163,171,172,],[-87,-88,-89,-86,-84,-78,134,-81,154,-85,-80,-79,-82,-83,]),'OP_MINUS':([63,72,73,74,75,77,78,79,82,101,102,105,122,123,124,161,171,172,186,],[82,-87,-88,93,-89,-86,-66,-63,108,-84,129,-81,-67,-64,-65,-85,-82,-83,82,]),'VOID':([13,],[18,]),'OP_PLUS':([63,72,73,74,75,77,78,79,85,99,101,102,103,104,105,122,123,124,159,160,161,162,163,165,166,167,168,169,170,171,172,186,],[85,-87,-88,94,-89,-86,-66,-63,111,-68,-84,130,131,-71,-81,-67,-64,-65,-69,-70,-85,-80,-79,-75,-72,-73,-77,-74,-76,-82,-83,85,]),'OP_NOT_EQUALS':([72,73,75,77,101,102,104,105,119,161,162,163,171,172,],[-87,-88,-89,-86,-84,-78,135,-81,155,-85,-80,-79,-82,-83,]),'OP_RPAREN':([26,33,34,41,42,45,51,68,69,72,73,74,75,77,78,79,86,90,95,98,99,101,102,103,104,105,112,113,115,117,118,120,121,122,123,124,128,141,143,144,146,147,148,159,160,161,162,163,164,165,166,167,168,169,170,171,172,175,177,178,179,180,181,182,183,184,185,],[32,-90,-90,49,-24,52,-90,-90,-22,-87,-88,-60,-89,-86,-66,-63,-90,-23,122,125,-68,-84,-78,-39,-71,-81,-50,145,-90,149,-51,-62,-61,-67,-64,-65,161,-44,-42,-43,-90,-48,-41,-69,-70,-85,-80,-79,-40,-75,-72,-73,-77,-74,-76,-82,-83,-49,-52,-53,-57,-54,-55,-59,-56,-58,188,]),'LCURLY_BRACKET':([3,32,49,52,149,187,188,],[4,39,39,39,39,39,39,]),'PRINT':([39,47,48,54,55,57,58,59,60,61,65,66,92,141,142,143,144,148,158,174,176,189,190,],[-90,-27,56,-34,-31,-29,-32,-26,-30,-33,-28,-25,-46,-44,-35,-42,-43,-41,-38,-47,-36,-37,-45,]),'OP_GREATER_EQUALS_THAN':([72,73,75,77,101,102,104,105,119,161,162,163,171,172,],[-87,-88,-89,-86,-84,-78,136,-81,156,-85,-80,-79,-82,-83,]),'OP_GREATER_THAN':([72,73,75,77,101,102,104,105,119,161,162,163,171,172,],[-87,-88,-89,-86,-84,-78,133,-81,153,-85,-80,-79,-82,-83,]),'SEMICOLON':([15,20,21,24,29,30,35,36,37,46,71,72,73,74,75,77,78,79,101,102,105,108,109,110,111,116,120,121,122,123,124,125,140,145,161,162,163,171,172,179,180,181,182,183,184,],[-90,-7,-5,31,-90,-90,-6,-5,-90,-4,92,-87,-88,-60,-89,-86,-66,-63,-84,-78,-81,141,142,143,144,148,-62,-61,-67,-64,-65,158,173,174,-85,-80,-79,-82,-83,-57,-54,-55,-59,-56,-58,]),'OP_EQUALS':([15,30,63,107,],[22,22,83,83,]),'OP_EQUALS_TWO':([72,73,75,77,101,102,104,105,119,161,162,163,171,172,],[-87,-88,-89,-86,-84,-78,137,-81,157,-85,-80,-79,-82,-83,]),'OP_PLUS_EQUALS':([63,186,],[87,87,]),'BOOLEAN':([4,13,31,33,34,43,51,68,],[10,10,10,10,10,10,10,10,]),'$end':([1,25,],[0,-1,]),'FUNCTION':([4,5,7,31,38,66,67,70,],[-90,13,-3,-90,-2,-25,13,13,]),'OP_MINUS_EQUALS':([63,186,],[84,84,]),'STRING':([4,13,31,33,34,43,51,68,],[9,9,9,9,9,9,9,9,]),'FOR':([39,47,48,54,55,57,58,59,60,61,65,66,92,141,142,143,144,148,158,174,176,189,190,],[-90,-27,62,-34,-31,-29,-32,-26,-30,-33,-28,-25,-46,-44,-35,-42,-43,-41,-38,-47,-36,-37,-45,]),'VAR_STRING':([53,76,80,83,84,87,88,93,94,96,97,100,106,126,127,129,130,131,132,133,134,135,136,137,138,139,142,150,151,152,153,154,155,156,157,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-35,75,75,75,75,75,75,75,75,]),'ELSE':([66,176,],[-25,187,]),'OP_LPAREN':([17,27,28,53,56,62,63,64,76,80,83,84,87,88,93,94,96,97,100,106,126,127,129,130,131,132,133,134,135,136,137,138,139,142,150,151,152,153,154,155,156,157,],[26,33,34,76,80,81,86,88,76,100,76,76,76,100,76,76,76,76,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,-35,100,100,100,100,100,100,100,100,]),'COMA':([15,20,21,29,30,33,34,35,36,37,46,51,68,86,115,146,],[23,-7,-5,23,23,43,43,-6,-5,23,-4,43,43,114,114,114,]),'ID':([2,6,8,9,10,11,18,19,23,39,44,47,48,50,53,54,55,57,58,59,60,61,65,66,76,80,81,83,84,86,87,88,92,93,94,96,97,100,106,114,115,126,127,129,130,131,132,133,134,135,136,137,138,139,141,142,143,144,146,148,150,151,152,153,154,155,156,157,158,173,174,176,189,190,],[3,-18,-19,-20,-21,15,27,28,30,-90,51,-27,63,68,77,-34,-31,-29,-32,-26,-30,-33,-28,-25,77,77,107,77,77,115,77,77,-46,77,77,77,77,77,77,146,115,77,77,77,77,77,77,77,77,77,77,77,77,77,-44,-35,-42,-43,115,-41,77,77,77,77,77,77,77,77,-38,186,-47,-36,-37,-45,]),'IF':([39,47,48,54,55,57,58,59,60,61,65,66,92,141,142,143,144,148,158,174,176,189,190,],[-90,-27,64,-34,-31,-29,-32,-26,-30,-33,-28,-25,-46,-44,-35,-42,-43,-41,-38,-47,-36,-37,-45,]),'AND':([72,73,75,77,99,101,102,104,105,118,161,162,163,165,166,167,168,169,170,171,172,179,180,181,182,183,184,],[-87,-88,-89,-86,126,-84,-78,-71,-81,150,-85,-80,-79,-75,-72,-73,-77,-74,-76,-82,-83,-57,-54,-55,-59,-56,-58,]),'RCURLY_BRACKET':([16,39,40,47,48,54,55,57,58,59,60,61,65,66,92,141,142,143,144,148,158,174,176,189,190,],[25,-90,-17,-27,66,-34,-31,-29,-32,-26,-30,-33,-28,-25,-46,-44,-35,-42,-43,-41,-38,-47,-36,-37,-45,]),'VAR_INT':([22,53,76,80,83,84,87,88,93,94,96,97,100,106,126,127,129,130,131,132,133,134,135,136,137,138,139,142,150,151,152,153,154,155,156,157,],[29,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-35,72,72,72,72,72,72,72,72,]),'VAR_FLOAT':([53,76,80,83,84,87,88,93,94,96,97,100,106,126,127,129,130,131,132,133,134,135,136,137,138,139,142,150,151,152,153,154,155,156,157,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-35,73,73,73,73,73,73,73,73,]),'INT':([4,13,31,33,34,43,51,68,],[6,6,6,6,6,6,6,6,]),'OP_DIVISION':([72,73,75,77,78,79,101,105,122,161,],[-87,-88,-89,-86,-66,96,-84,138,-67,-85,]),'FLOAT':([4,13,31,33,34,43,51,68,],[8,8,8,8,8,8,8,8,]),'OR':([72,73,75,77,99,101,102,104,105,118,161,162,163,165,166,167,168,169,170,171,172,179,180,181,182,183,184,],[-87,-88,-89,-86,127,-84,-78,-71,-81,151,-85,-80,-79,-75,-72,-73,-77,-74,-76,-82,-83,-57,-54,-55,-59,-56,-58,]),'PROGRAM':([0,],[2,]),'MAIN':([4,5,7,12,14,31,38,66,67,70,89,91,],[-90,-90,-3,17,-16,-90,-2,-25,-90,-90,-15,-14,]),'OP_TIMES':([72,73,75,77,78,79,101,105,122,161,],[-87,-88,-89,-86,-66,97,-84,139,-67,-85,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'impression':([80,131,],[98,164,]),'main_function':([12,],[16,]),'vars':([4,31,],[5,38,]),'vars_prime':([15,29,30,37,],[20,35,20,46,]),'single_term':([53,76,83,84,87,93,94,96,97,],[74,74,74,74,74,74,74,123,124,]),'function_call':([48,],[54,]),'var_cte':([53,76,80,83,84,87,88,93,94,96,97,100,106,126,127,129,130,131,132,133,134,135,136,137,138,139,150,151,152,153,154,155,156,157,],[78,78,101,78,78,78,101,78,78,78,78,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'condition_mega_expression':([88,],[117,]),'increment':([48,173,],[55,185,]),'bloque':([32,49,52,149,187,188,],[40,67,70,176,189,190,]),'bloque_primo':([39,],[48,]),'if':([48,],[57,]),'parameters':([33,34,51,68,],[41,45,69,90,]),'super_expression':([80,100,126,127,131,],[99,99,159,160,99,]),'for':([48,],[58,]),'program':([0,],[1,]),'statement':([48,],[59,]),'type':([4,13,31,33,34,43,51,68,],[11,19,11,44,44,50,44,44,]),'vars_prime2':([15,30,],[24,37,]),'function':([5,67,70,],[12,89,91,]),'printer':([48,],[60,]),'return':([48,],[61,]),'epsilon':([4,5,15,29,30,31,33,34,37,39,51,67,68,70,86,115,146,],[7,14,21,36,21,7,42,42,36,47,42,14,42,14,112,112,112,]),'function_call_prime':([86,115,146,],[113,147,175,]),'term':([80,88,100,106,126,127,129,130,131,132,133,134,135,136,137,138,139,150,151,152,153,154,155,156,157,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,171,172,102,102,102,102,102,102,102,102,]),'single_expression':([53,76,83,84,87,93,94,],[71,95,109,110,116,120,121,]),'assigment':([48,81,],[65,106,]),'single_fact':([53,76,83,84,87,93,94,96,97,],[79,79,79,79,79,79,79,79,79,]),'condition_super_expression':([88,106,150,151,],[118,140,177,178,]),'mega_expression':([80,100,131,],[103,128,103,]),'expression':([80,88,100,106,126,127,129,130,131,132,133,134,135,136,137,150,151,152,153,154,155,156,157,],[104,119,104,119,104,104,162,163,104,165,166,167,168,169,170,119,119,179,180,181,182,183,184,]),'fact':([80,88,100,106,126,127,129,130,131,132,133,134,135,136,137,138,139,150,151,152,153,154,155,156,157,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID LCURLY_BRACKET vars function main_function RCURLY_BRACKET','program',7,'p_program','vcparser.py',9),
  ('vars -> type ID vars_prime2 SEMICOLON vars','vars',5,'p_vars','vcparser.py',16),
  ('vars -> epsilon','vars',1,'p_vars','vcparser.py',17),
  ('vars_prime -> COMA ID vars_prime2 vars_prime','vars_prime',4,'p_vars_prime','vcparser.py',21),
  ('vars_prime -> epsilon','vars_prime',1,'p_vars_prime','vcparser.py',22),
  ('vars_prime2 -> OP_EQUALS VAR_INT vars_prime','vars_prime2',3,'p_vars_prime2','vcparser.py',26),
  ('vars_prime2 -> vars_prime','vars_prime2',1,'p_vars_prime2','vcparser.py',27),
  ('vars_prime2 -> epsilon','vars_prime2',1,'p_vars_prime2','vcparser.py',28),
  ('vars2 -> INT ID OP_EQUALS VAR_INT SEMICOLON vars2','vars2',6,'p_vars2','vcparser.py',33),
  ('vars2 -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars2','vars2',6,'p_vars2','vcparser.py',34),
  ('vars2 -> STRING ID OP_EQUALS VAR_STRING SEMICOLON vars2','vars2',6,'p_vars2','vcparser.py',35),
  ('vars2 -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars2','vars2',6,'p_vars2','vcparser.py',36),
  ('vars2 -> epsilon','vars2',1,'p_vars2','vcparser.py',37),
  ('function -> FUNCTION type ID OP_LPAREN parameters OP_RPAREN bloque function','function',8,'p_function','vcparser.py',41),
  ('function -> FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN bloque function','function',8,'p_function','vcparser.py',42),
  ('function -> epsilon','function',1,'p_function','vcparser.py',43),
  ('main_function -> MAIN OP_LPAREN OP_RPAREN bloque','main_function',4,'p_main_function','vcparser.py',47),
  ('type -> INT','type',1,'p_type','vcparser.py',51),
  ('type -> FLOAT','type',1,'p_type','vcparser.py',52),
  ('type -> STRING','type',1,'p_type','vcparser.py',53),
  ('type -> BOOLEAN','type',1,'p_type','vcparser.py',54),
  ('parameters -> type ID parameters','parameters',3,'p_parameters','vcparser.py',59),
  ('parameters -> COMA type ID parameters','parameters',4,'p_parameters','vcparser.py',60),
  ('parameters -> epsilon','parameters',1,'p_parameters','vcparser.py',61),
  ('bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET','bloque',3,'p_bloque','vcparser.py',67),
  ('bloque_primo -> bloque_primo statement','bloque_primo',2,'p_bloque_primo','vcparser.py',73),
  ('bloque_primo -> epsilon','bloque_primo',1,'p_bloque_primo','vcparser.py',74),
  ('statement -> assigment','statement',1,'p_statement','vcparser.py',79),
  ('statement -> if','statement',1,'p_statement','vcparser.py',80),
  ('statement -> printer','statement',1,'p_statement','vcparser.py',81),
  ('statement -> increment','statement',1,'p_statement','vcparser.py',82),
  ('statement -> for','statement',1,'p_statement','vcparser.py',83),
  ('statement -> return','statement',1,'p_statement','vcparser.py',84),
  ('statement -> function_call','statement',1,'p_statement','vcparser.py',85),
  ('assigment -> ID OP_EQUALS single_expression SEMICOLON','assigment',4,'p_assigment','vcparser.py',91),
  ('if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque','if',5,'p_if','vcparser.py',96),
  ('if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque','if',7,'p_if','vcparser.py',97),
  ('printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON','printer',5,'p_printer','vcparser.py',104),
  ('impression -> mega_expression','impression',1,'p_impression','vcparser.py',109),
  ('impression -> mega_expression OP_PLUS impression','impression',3,'p_impression','vcparser.py',110),
  ('increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON','increment',4,'p_increment','vcparser.py',115),
  ('increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON','increment',4,'p_increment','vcparser.py',116),
  ('increment -> ID OP_PLUS OP_PLUS SEMICOLON','increment',4,'p_increment','vcparser.py',117),
  ('increment -> ID OP_MINUS OP_MINUS SEMICOLON','increment',4,'p_increment','vcparser.py',118),
  ('for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque','for',8,'p_for','vcparser.py',123),
  ('return -> RETURN single_expression SEMICOLON','return',3,'p_return','vcparser.py',128),
  ('function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON','function_call',5,'p_function_call','vcparser.py',132),
  ('function_call_prime -> ID function_call_prime','function_call_prime',2,'p_function_call_prime','vcparser.py',136),
  ('function_call_prime -> COMA ID function_call_prime','function_call_prime',3,'p_function_call_prime','vcparser.py',137),
  ('function_call_prime -> epsilon','function_call_prime',1,'p_function_call_prime','vcparser.py',138),
  ('condition_mega_expression -> condition_super_expression','condition_mega_expression',1,'p_condition_mega_expression','vcparser.py',142),
  ('condition_mega_expression -> condition_super_expression AND condition_super_expression','condition_mega_expression',3,'p_condition_mega_expression','vcparser.py',143),
  ('condition_mega_expression -> condition_super_expression OR condition_super_expression','condition_mega_expression',3,'p_condition_mega_expression','vcparser.py',144),
  ('condition_super_expression -> expression OP_GREATER_THAN expression','condition_super_expression',3,'p_condition_super_expression','vcparser.py',148),
  ('condition_super_expression -> expression OP_LESS_THAN expression','condition_super_expression',3,'p_condition_super_expression','vcparser.py',149),
  ('condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression','condition_super_expression',3,'p_condition_super_expression','vcparser.py',150),
  ('condition_super_expression -> expression OP_LESS_EQUALS_THAN expression','condition_super_expression',3,'p_condition_super_expression','vcparser.py',151),
  ('condition_super_expression -> expression OP_EQUALS_TWO expression','condition_super_expression',3,'p_condition_super_expression','vcparser.py',152),
  ('condition_super_expression -> expression OP_NOT_EQUALS expression','condition_super_expression',3,'p_condition_super_expression','vcparser.py',153),
  ('single_expression -> single_term','single_expression',1,'p_single_expression','vcparser.py',158),
  ('single_expression -> single_term OP_PLUS single_expression','single_expression',3,'p_single_expression','vcparser.py',159),
  ('single_expression -> single_term OP_MINUS single_expression','single_expression',3,'p_single_expression','vcparser.py',160),
  ('single_term -> single_fact','single_term',1,'p_single_term','vcparser.py',164),
  ('single_term -> single_fact OP_DIVISION single_term','single_term',3,'p_single_term','vcparser.py',165),
  ('single_term -> single_fact OP_TIMES single_term','single_term',3,'p_single_term','vcparser.py',166),
  ('single_fact -> var_cte','single_fact',1,'p_single_fact','vcparser.py',171),
  ('single_fact -> OP_LPAREN single_expression OP_RPAREN','single_fact',3,'p_single_fact','vcparser.py',172),
  ('mega_expression -> super_expression','mega_expression',1,'p_mega_expression','vcparser.py',176),
  ('mega_expression -> super_expression AND super_expression','mega_expression',3,'p_mega_expression','vcparser.py',177),
  ('mega_expression -> super_expression OR super_expression','mega_expression',3,'p_mega_expression','vcparser.py',178),
  ('super_expression -> expression','super_expression',1,'p_super_expression','vcparser.py',183),
  ('super_expression -> expression OP_GREATER_THAN expression','super_expression',3,'p_super_expression','vcparser.py',184),
  ('super_expression -> expression OP_LESS_THAN expression','super_expression',3,'p_super_expression','vcparser.py',185),
  ('super_expression -> expression OP_GREATER_EQUALS_THAN expression','super_expression',3,'p_super_expression','vcparser.py',186),
  ('super_expression -> expression OP_LESS_EQUALS_THAN expression','super_expression',3,'p_super_expression','vcparser.py',187),
  ('super_expression -> expression OP_EQUALS_TWO expression','super_expression',3,'p_super_expression','vcparser.py',188),
  ('super_expression -> expression OP_NOT_EQUALS expression','super_expression',3,'p_super_expression','vcparser.py',189),
  ('expression -> term','expression',1,'p_expression','vcparser.py',194),
  ('expression -> term OP_PLUS expression','expression',3,'p_expression','vcparser.py',195),
  ('expression -> term OP_MINUS expression','expression',3,'p_expression','vcparser.py',196),
  ('term -> fact','term',1,'p_term','vcparser.py',202),
  ('term -> fact OP_DIVISION term','term',3,'p_term','vcparser.py',203),
  ('term -> fact OP_TIMES term','term',3,'p_term','vcparser.py',204),
  ('fact -> var_cte','fact',1,'p_fact','vcparser.py',209),
  ('fact -> OP_LPAREN mega_expression OP_RPAREN','fact',3,'p_fact','vcparser.py',210),
  ('var_cte -> ID','var_cte',1,'p_var_cte','vcparser.py',214),
  ('var_cte -> VAR_INT','var_cte',1,'p_var_cte','vcparser.py',215),
  ('var_cte -> VAR_FLOAT','var_cte',1,'p_var_cte','vcparser.py',216),
  ('var_cte -> VAR_STRING','var_cte',1,'p_var_cte','vcparser.py',217),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','vcparser.py',221),
]
