Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    CARET
    POINT
    QUOT_MARK
    VAR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID LCURLY_BRACKET vars function main_function RCURLY_BRACKET
Rule 2     vars -> type ID vars_prime2 SEMICOLON vars
Rule 3     vars -> epsilon
Rule 4     vars_prime -> COMA ID vars_prime2 vars_prime
Rule 5     vars_prime -> epsilon
Rule 6     vars_prime2 -> OP_EQUALS VAR_INT vars_prime
Rule 7     vars_prime2 -> vars_prime
Rule 8     vars_prime2 -> epsilon
Rule 9     vars2 -> INT ID OP_EQUALS VAR_INT SEMICOLON vars2
Rule 10    vars2 -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars2
Rule 11    vars2 -> STRING ID OP_EQUALS VAR_STRING SEMICOLON vars2
Rule 12    vars2 -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars2
Rule 13    vars2 -> epsilon
Rule 14    function -> FUNCTION type ID OP_LPAREN parameters OP_RPAREN bloque function
Rule 15    function -> FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN bloque function
Rule 16    function -> epsilon
Rule 17    main_function -> MAIN OP_LPAREN OP_RPAREN bloque
Rule 18    type -> INT
Rule 19    type -> FLOAT
Rule 20    type -> STRING
Rule 21    type -> BOOLEAN
Rule 22    parameters -> type ID parameters
Rule 23    parameters -> COMA type ID parameters
Rule 24    parameters -> epsilon
Rule 25    bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET
Rule 26    bloque_primo -> bloque_primo statement
Rule 27    bloque_primo -> epsilon
Rule 28    statement -> assigment
Rule 29    statement -> if
Rule 30    statement -> printer
Rule 31    statement -> increment
Rule 32    statement -> for
Rule 33    statement -> return
Rule 34    statement -> function_call
Rule 35    assigment -> ID OP_EQUALS single_expression SEMICOLON
Rule 36    if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque
Rule 37    if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque
Rule 38    printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON
Rule 39    impression -> mega_expression
Rule 40    impression -> mega_expression OP_PLUS impression
Rule 41    increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON
Rule 42    increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON
Rule 43    increment -> ID OP_PLUS OP_PLUS SEMICOLON
Rule 44    increment -> ID OP_MINUS OP_MINUS SEMICOLON
Rule 45    for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque
Rule 46    return -> RETURN single_expression SEMICOLON
Rule 47    function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON
Rule 48    function_call_prime -> ID function_call_prime
Rule 49    function_call_prime -> COMA ID function_call_prime
Rule 50    function_call_prime -> epsilon
Rule 51    condition_mega_expression -> condition_super_expression
Rule 52    condition_mega_expression -> condition_super_expression AND condition_super_expression
Rule 53    condition_mega_expression -> condition_super_expression OR condition_super_expression
Rule 54    condition_super_expression -> expression OP_GREATER_THAN expression
Rule 55    condition_super_expression -> expression OP_LESS_THAN expression
Rule 56    condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression
Rule 57    condition_super_expression -> expression OP_LESS_EQUALS_THAN expression
Rule 58    condition_super_expression -> expression OP_EQUALS_TWO expression
Rule 59    condition_super_expression -> expression OP_NOT_EQUALS expression
Rule 60    single_expression -> single_term
Rule 61    single_expression -> single_term OP_PLUS single_expression
Rule 62    single_expression -> single_term OP_MINUS single_expression
Rule 63    single_term -> single_fact
Rule 64    single_term -> single_fact OP_DIVISION single_term
Rule 65    single_term -> single_fact OP_TIMES single_term
Rule 66    single_fact -> var_cte
Rule 67    single_fact -> OP_LPAREN single_expression OP_RPAREN
Rule 68    mega_expression -> super_expression
Rule 69    mega_expression -> super_expression AND super_expression
Rule 70    mega_expression -> super_expression OR super_expression
Rule 71    super_expression -> expression
Rule 72    super_expression -> expression OP_GREATER_THAN expression
Rule 73    super_expression -> expression OP_LESS_THAN expression
Rule 74    super_expression -> expression OP_GREATER_EQUALS_THAN expression
Rule 75    super_expression -> expression OP_LESS_EQUALS_THAN expression
Rule 76    super_expression -> expression OP_EQUALS_TWO expression
Rule 77    super_expression -> expression OP_NOT_EQUALS expression
Rule 78    expression -> term
Rule 79    expression -> term OP_PLUS expression
Rule 80    expression -> term OP_MINUS expression
Rule 81    term -> fact
Rule 82    term -> fact OP_DIVISION term
Rule 83    term -> fact OP_TIMES term
Rule 84    fact -> var_cte
Rule 85    fact -> OP_LPAREN mega_expression OP_RPAREN
Rule 86    var_cte -> ID
Rule 87    var_cte -> VAR_INT
Rule 88    var_cte -> VAR_FLOAT
Rule 89    var_cte -> VAR_STRING
Rule 90    epsilon -> <empty>

Terminals, with rules where they appear

AND                  : 52 69
BOOLEAN              : 12 21
CARET                : 
COMA                 : 4 23 49
ELSE                 : 37
FLOAT                : 10 19
FOR                  : 45
FUNCTION             : 14 15
ID                   : 1 2 4 9 10 11 12 14 15 22 23 35 41 42 43 44 47 48 49 86
IF                   : 36 37
INT                  : 9 18
LCURLY_BRACKET       : 1 25
MAIN                 : 17
OP_DIVISION          : 64 82
OP_EQUALS            : 6 9 10 11 12 35
OP_EQUALS_TWO        : 58 76
OP_GREATER_EQUALS_THAN : 56 74
OP_GREATER_THAN      : 54 72
OP_LESS_EQUALS_THAN  : 57 75
OP_LESS_THAN         : 55 73
OP_LPAREN            : 14 15 17 36 37 38 45 47 67 85
OP_MINUS             : 44 44 62 80
OP_MINUS_EQUALS      : 42
OP_NOT_EQUALS        : 59 77
OP_PLUS              : 40 43 43 61 79
OP_PLUS_EQUALS       : 41
OP_RPAREN            : 14 15 17 36 37 38 45 47 67 85
OP_TIMES             : 65 83
OR                   : 53 70
POINT                : 
PRINT                : 38
PROGRAM              : 1
QUOT_MARK            : 
RCURLY_BRACKET       : 1 25
RETURN               : 46
SEMICOLON            : 2 9 10 11 12 35 38 41 42 43 44 45 46 47
STRING               : 11 20
VAR                  : 
VAR_BOOLEAN          : 12
VAR_FLOAT            : 10 88
VAR_INT              : 6 9 87
VAR_STRING           : 11 89
VOID                 : 15
error                : 

Nonterminals, with rules where they appear

assigment            : 28 45
bloque               : 14 15 17 36 37 37 45
bloque_primo         : 25 26
condition_mega_expression : 36 37
condition_super_expression : 45 51 52 52 53 53
epsilon              : 3 5 8 13 16 24 27 50
expression           : 54 54 55 55 56 56 57 57 58 58 59 59 71 72 72 73 73 74 74 75 75 76 76 77 77 79 80
fact                 : 81 82 83
for                  : 32
function             : 1 14 15
function_call        : 34
function_call_prime  : 47 48 49
if                   : 29
impression           : 38 40
increment            : 31 45
main_function        : 1
mega_expression      : 39 40 85
parameters           : 14 15 22 23
printer              : 30
program              : 0
return               : 33
single_expression    : 35 41 42 46 61 62 67
single_fact          : 63 64 65
single_term          : 60 61 62 64 65
statement            : 26
super_expression     : 68 69 69 70 70
term                 : 78 79 80 82 83
type                 : 2 14 22 23
var_cte              : 66 84
vars                 : 1 2
vars2                : 9 10 11 12
vars_prime           : 4 6 7
vars_prime2          : 2 4

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID LCURLY_BRACKET vars function main_function RCURLY_BRACKET

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID LCURLY_BRACKET vars function main_function RCURLY_BRACKET

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . LCURLY_BRACKET vars function main_function RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 4


state 4

    (1) program -> PROGRAM ID LCURLY_BRACKET . vars function main_function RCURLY_BRACKET
    (2) vars -> . type ID vars_prime2 SEMICOLON vars
    (3) vars -> . epsilon
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . STRING
    (21) type -> . BOOLEAN
    (90) epsilon -> .

    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    BOOLEAN         shift and go to state 10
    FUNCTION        reduce using rule 90 (epsilon -> .)
    MAIN            reduce using rule 90 (epsilon -> .)

    vars                           shift and go to state 5
    epsilon                        shift and go to state 7
    type                           shift and go to state 11

state 5

    (1) program -> PROGRAM ID LCURLY_BRACKET vars . function main_function RCURLY_BRACKET
    (14) function -> . FUNCTION type ID OP_LPAREN parameters OP_RPAREN bloque function
    (15) function -> . FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN bloque function
    (16) function -> . epsilon
    (90) epsilon -> .

    FUNCTION        shift and go to state 13
    MAIN            reduce using rule 90 (epsilon -> .)

    function                       shift and go to state 12
    epsilon                        shift and go to state 14

state 6

    (18) type -> INT .

    ID              reduce using rule 18 (type -> INT .)


state 7

    (3) vars -> epsilon .

    FUNCTION        reduce using rule 3 (vars -> epsilon .)
    MAIN            reduce using rule 3 (vars -> epsilon .)


state 8

    (19) type -> FLOAT .

    ID              reduce using rule 19 (type -> FLOAT .)


state 9

    (20) type -> STRING .

    ID              reduce using rule 20 (type -> STRING .)


state 10

    (21) type -> BOOLEAN .

    ID              reduce using rule 21 (type -> BOOLEAN .)


state 11

    (2) vars -> type . ID vars_prime2 SEMICOLON vars

    ID              shift and go to state 15


state 12

    (1) program -> PROGRAM ID LCURLY_BRACKET vars function . main_function RCURLY_BRACKET
    (17) main_function -> . MAIN OP_LPAREN OP_RPAREN bloque

    MAIN            shift and go to state 17

    main_function                  shift and go to state 16

state 13

    (14) function -> FUNCTION . type ID OP_LPAREN parameters OP_RPAREN bloque function
    (15) function -> FUNCTION . VOID ID OP_LPAREN parameters OP_RPAREN bloque function
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . STRING
    (21) type -> . BOOLEAN

    VOID            shift and go to state 18
    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    BOOLEAN         shift and go to state 10

    type                           shift and go to state 19

state 14

    (16) function -> epsilon .

    MAIN            reduce using rule 16 (function -> epsilon .)


state 15

    (2) vars -> type ID . vars_prime2 SEMICOLON vars
    (6) vars_prime2 -> . OP_EQUALS VAR_INT vars_prime
    (7) vars_prime2 -> . vars_prime
    (8) vars_prime2 -> . epsilon
    (4) vars_prime -> . COMA ID vars_prime2 vars_prime
    (5) vars_prime -> . epsilon
    (90) epsilon -> .

    OP_EQUALS       shift and go to state 22
    COMA            shift and go to state 23
    SEMICOLON       reduce using rule 90 (epsilon -> .)

    vars_prime                     shift and go to state 20
    epsilon                        shift and go to state 21
    vars_prime2                    shift and go to state 24

state 16

    (1) program -> PROGRAM ID LCURLY_BRACKET vars function main_function . RCURLY_BRACKET

    RCURLY_BRACKET  shift and go to state 25


state 17

    (17) main_function -> MAIN . OP_LPAREN OP_RPAREN bloque

    OP_LPAREN       shift and go to state 26


state 18

    (15) function -> FUNCTION VOID . ID OP_LPAREN parameters OP_RPAREN bloque function

    ID              shift and go to state 27


state 19

    (14) function -> FUNCTION type . ID OP_LPAREN parameters OP_RPAREN bloque function

    ID              shift and go to state 28


state 20

    (7) vars_prime2 -> vars_prime .

    SEMICOLON       reduce using rule 7 (vars_prime2 -> vars_prime .)
    COMA            reduce using rule 7 (vars_prime2 -> vars_prime .)


state 21

    (8) vars_prime2 -> epsilon .
    (5) vars_prime -> epsilon .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 5 (vars_prime -> epsilon .)
  ! reduce/reduce conflict for COMA resolved using rule 5 (vars_prime -> epsilon .)
    SEMICOLON       reduce using rule 5 (vars_prime -> epsilon .)
    COMA            reduce using rule 5 (vars_prime -> epsilon .)

  ! SEMICOLON       [ reduce using rule 8 (vars_prime2 -> epsilon .) ]
  ! COMA            [ reduce using rule 8 (vars_prime2 -> epsilon .) ]


state 22

    (6) vars_prime2 -> OP_EQUALS . VAR_INT vars_prime

    VAR_INT         shift and go to state 29


state 23

    (4) vars_prime -> COMA . ID vars_prime2 vars_prime

    ID              shift and go to state 30


state 24

    (2) vars -> type ID vars_prime2 . SEMICOLON vars

    SEMICOLON       shift and go to state 31


state 25

    (1) program -> PROGRAM ID LCURLY_BRACKET vars function main_function RCURLY_BRACKET .

    $end            reduce using rule 1 (program -> PROGRAM ID LCURLY_BRACKET vars function main_function RCURLY_BRACKET .)


state 26

    (17) main_function -> MAIN OP_LPAREN . OP_RPAREN bloque

    OP_RPAREN       shift and go to state 32


state 27

    (15) function -> FUNCTION VOID ID . OP_LPAREN parameters OP_RPAREN bloque function

    OP_LPAREN       shift and go to state 33


state 28

    (14) function -> FUNCTION type ID . OP_LPAREN parameters OP_RPAREN bloque function

    OP_LPAREN       shift and go to state 34


state 29

    (6) vars_prime2 -> OP_EQUALS VAR_INT . vars_prime
    (4) vars_prime -> . COMA ID vars_prime2 vars_prime
    (5) vars_prime -> . epsilon
    (90) epsilon -> .

  ! shift/reduce conflict for COMA resolved as shift
    COMA            shift and go to state 23
    SEMICOLON       reduce using rule 90 (epsilon -> .)

  ! COMA            [ reduce using rule 90 (epsilon -> .) ]

    vars_prime                     shift and go to state 35
    epsilon                        shift and go to state 36

state 30

    (4) vars_prime -> COMA ID . vars_prime2 vars_prime
    (6) vars_prime2 -> . OP_EQUALS VAR_INT vars_prime
    (7) vars_prime2 -> . vars_prime
    (8) vars_prime2 -> . epsilon
    (4) vars_prime -> . COMA ID vars_prime2 vars_prime
    (5) vars_prime -> . epsilon
    (90) epsilon -> .

  ! shift/reduce conflict for COMA resolved as shift
    OP_EQUALS       shift and go to state 22
    COMA            shift and go to state 23
    SEMICOLON       reduce using rule 90 (epsilon -> .)

  ! COMA            [ reduce using rule 90 (epsilon -> .) ]

    vars_prime                     shift and go to state 20
    epsilon                        shift and go to state 21
    vars_prime2                    shift and go to state 37

state 31

    (2) vars -> type ID vars_prime2 SEMICOLON . vars
    (2) vars -> . type ID vars_prime2 SEMICOLON vars
    (3) vars -> . epsilon
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . STRING
    (21) type -> . BOOLEAN
    (90) epsilon -> .

    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    BOOLEAN         shift and go to state 10
    FUNCTION        reduce using rule 90 (epsilon -> .)
    MAIN            reduce using rule 90 (epsilon -> .)

    epsilon                        shift and go to state 7
    type                           shift and go to state 11
    vars                           shift and go to state 38

state 32

    (17) main_function -> MAIN OP_LPAREN OP_RPAREN . bloque
    (25) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 39

    bloque                         shift and go to state 40

state 33

    (15) function -> FUNCTION VOID ID OP_LPAREN . parameters OP_RPAREN bloque function
    (22) parameters -> . type ID parameters
    (23) parameters -> . COMA type ID parameters
    (24) parameters -> . epsilon
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . STRING
    (21) type -> . BOOLEAN
    (90) epsilon -> .

    COMA            shift and go to state 43
    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    BOOLEAN         shift and go to state 10
    OP_RPAREN       reduce using rule 90 (epsilon -> .)

    epsilon                        shift and go to state 42
    type                           shift and go to state 44
    parameters                     shift and go to state 41

state 34

    (14) function -> FUNCTION type ID OP_LPAREN . parameters OP_RPAREN bloque function
    (22) parameters -> . type ID parameters
    (23) parameters -> . COMA type ID parameters
    (24) parameters -> . epsilon
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . STRING
    (21) type -> . BOOLEAN
    (90) epsilon -> .

    COMA            shift and go to state 43
    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    BOOLEAN         shift and go to state 10
    OP_RPAREN       reduce using rule 90 (epsilon -> .)

    epsilon                        shift and go to state 42
    type                           shift and go to state 44
    parameters                     shift and go to state 45

state 35

    (6) vars_prime2 -> OP_EQUALS VAR_INT vars_prime .

    SEMICOLON       reduce using rule 6 (vars_prime2 -> OP_EQUALS VAR_INT vars_prime .)
    COMA            reduce using rule 6 (vars_prime2 -> OP_EQUALS VAR_INT vars_prime .)


state 36

    (5) vars_prime -> epsilon .

    SEMICOLON       reduce using rule 5 (vars_prime -> epsilon .)
    COMA            reduce using rule 5 (vars_prime -> epsilon .)


state 37

    (4) vars_prime -> COMA ID vars_prime2 . vars_prime
    (4) vars_prime -> . COMA ID vars_prime2 vars_prime
    (5) vars_prime -> . epsilon
    (90) epsilon -> .

  ! shift/reduce conflict for COMA resolved as shift
    COMA            shift and go to state 23
    SEMICOLON       reduce using rule 90 (epsilon -> .)

  ! COMA            [ reduce using rule 90 (epsilon -> .) ]

    vars_prime                     shift and go to state 46
    epsilon                        shift and go to state 36

state 38

    (2) vars -> type ID vars_prime2 SEMICOLON vars .

    FUNCTION        reduce using rule 2 (vars -> type ID vars_prime2 SEMICOLON vars .)
    MAIN            reduce using rule 2 (vars -> type ID vars_prime2 SEMICOLON vars .)


state 39

    (25) bloque -> LCURLY_BRACKET . bloque_primo RCURLY_BRACKET
    (26) bloque_primo -> . bloque_primo statement
    (27) bloque_primo -> . epsilon
    (90) epsilon -> .

    RCURLY_BRACKET  reduce using rule 90 (epsilon -> .)
    ID              reduce using rule 90 (epsilon -> .)
    IF              reduce using rule 90 (epsilon -> .)
    PRINT           reduce using rule 90 (epsilon -> .)
    FOR             reduce using rule 90 (epsilon -> .)
    RETURN          reduce using rule 90 (epsilon -> .)

    epsilon                        shift and go to state 47
    bloque_primo                   shift and go to state 48

state 40

    (17) main_function -> MAIN OP_LPAREN OP_RPAREN bloque .

    RCURLY_BRACKET  reduce using rule 17 (main_function -> MAIN OP_LPAREN OP_RPAREN bloque .)


state 41

    (15) function -> FUNCTION VOID ID OP_LPAREN parameters . OP_RPAREN bloque function

    OP_RPAREN       shift and go to state 49


state 42

    (24) parameters -> epsilon .

    OP_RPAREN       reduce using rule 24 (parameters -> epsilon .)


state 43

    (23) parameters -> COMA . type ID parameters
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . STRING
    (21) type -> . BOOLEAN

    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    BOOLEAN         shift and go to state 10

    type                           shift and go to state 50

state 44

    (22) parameters -> type . ID parameters

    ID              shift and go to state 51


state 45

    (14) function -> FUNCTION type ID OP_LPAREN parameters . OP_RPAREN bloque function

    OP_RPAREN       shift and go to state 52


state 46

    (4) vars_prime -> COMA ID vars_prime2 vars_prime .

    SEMICOLON       reduce using rule 4 (vars_prime -> COMA ID vars_prime2 vars_prime .)
    COMA            reduce using rule 4 (vars_prime -> COMA ID vars_prime2 vars_prime .)


state 47

    (27) bloque_primo -> epsilon .

    RCURLY_BRACKET  reduce using rule 27 (bloque_primo -> epsilon .)
    ID              reduce using rule 27 (bloque_primo -> epsilon .)
    IF              reduce using rule 27 (bloque_primo -> epsilon .)
    PRINT           reduce using rule 27 (bloque_primo -> epsilon .)
    FOR             reduce using rule 27 (bloque_primo -> epsilon .)
    RETURN          reduce using rule 27 (bloque_primo -> epsilon .)


state 48

    (25) bloque -> LCURLY_BRACKET bloque_primo . RCURLY_BRACKET
    (26) bloque_primo -> bloque_primo . statement
    (28) statement -> . assigment
    (29) statement -> . if
    (30) statement -> . printer
    (31) statement -> . increment
    (32) statement -> . for
    (33) statement -> . return
    (34) statement -> . function_call
    (35) assigment -> . ID OP_EQUALS single_expression SEMICOLON
    (36) if -> . IF OP_LPAREN condition_mega_expression OP_RPAREN bloque
    (37) if -> . IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque
    (38) printer -> . PRINT OP_LPAREN impression OP_RPAREN SEMICOLON
    (41) increment -> . ID OP_PLUS_EQUALS single_expression SEMICOLON
    (42) increment -> . ID OP_MINUS_EQUALS single_expression SEMICOLON
    (43) increment -> . ID OP_PLUS OP_PLUS SEMICOLON
    (44) increment -> . ID OP_MINUS OP_MINUS SEMICOLON
    (45) for -> . FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque
    (46) return -> . RETURN single_expression SEMICOLON
    (47) function_call -> . ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON

    RCURLY_BRACKET  shift and go to state 66
    ID              shift and go to state 63
    IF              shift and go to state 64
    PRINT           shift and go to state 56
    FOR             shift and go to state 62
    RETURN          shift and go to state 53

    printer                        shift and go to state 60
    return                         shift and go to state 61
    statement                      shift and go to state 59
    assigment                      shift and go to state 65
    function_call                  shift and go to state 54
    for                            shift and go to state 58
    increment                      shift and go to state 55
    if                             shift and go to state 57

state 49

    (15) function -> FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN . bloque function
    (25) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 39

    bloque                         shift and go to state 67

state 50

    (23) parameters -> COMA type . ID parameters

    ID              shift and go to state 68


state 51

    (22) parameters -> type ID . parameters
    (22) parameters -> . type ID parameters
    (23) parameters -> . COMA type ID parameters
    (24) parameters -> . epsilon
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . STRING
    (21) type -> . BOOLEAN
    (90) epsilon -> .

    COMA            shift and go to state 43
    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    BOOLEAN         shift and go to state 10
    OP_RPAREN       reduce using rule 90 (epsilon -> .)

    epsilon                        shift and go to state 42
    type                           shift and go to state 44
    parameters                     shift and go to state 69

state 52

    (14) function -> FUNCTION type ID OP_LPAREN parameters OP_RPAREN . bloque function
    (25) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 39

    bloque                         shift and go to state 70

state 53

    (46) return -> RETURN . single_expression SEMICOLON
    (60) single_expression -> . single_term
    (61) single_expression -> . single_term OP_PLUS single_expression
    (62) single_expression -> . single_term OP_MINUS single_expression
    (63) single_term -> . single_fact
    (64) single_term -> . single_fact OP_DIVISION single_term
    (65) single_term -> . single_fact OP_TIMES single_term
    (66) single_fact -> . var_cte
    (67) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 76
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    single_term                    shift and go to state 74
    single_expression              shift and go to state 71
    single_fact                    shift and go to state 79
    var_cte                        shift and go to state 78

state 54

    (34) statement -> function_call .

    RCURLY_BRACKET  reduce using rule 34 (statement -> function_call .)
    ID              reduce using rule 34 (statement -> function_call .)
    IF              reduce using rule 34 (statement -> function_call .)
    PRINT           reduce using rule 34 (statement -> function_call .)
    FOR             reduce using rule 34 (statement -> function_call .)
    RETURN          reduce using rule 34 (statement -> function_call .)


state 55

    (31) statement -> increment .

    RCURLY_BRACKET  reduce using rule 31 (statement -> increment .)
    ID              reduce using rule 31 (statement -> increment .)
    IF              reduce using rule 31 (statement -> increment .)
    PRINT           reduce using rule 31 (statement -> increment .)
    FOR             reduce using rule 31 (statement -> increment .)
    RETURN          reduce using rule 31 (statement -> increment .)


state 56

    (38) printer -> PRINT . OP_LPAREN impression OP_RPAREN SEMICOLON

    OP_LPAREN       shift and go to state 80


state 57

    (29) statement -> if .

    RCURLY_BRACKET  reduce using rule 29 (statement -> if .)
    ID              reduce using rule 29 (statement -> if .)
    IF              reduce using rule 29 (statement -> if .)
    PRINT           reduce using rule 29 (statement -> if .)
    FOR             reduce using rule 29 (statement -> if .)
    RETURN          reduce using rule 29 (statement -> if .)


state 58

    (32) statement -> for .

    RCURLY_BRACKET  reduce using rule 32 (statement -> for .)
    ID              reduce using rule 32 (statement -> for .)
    IF              reduce using rule 32 (statement -> for .)
    PRINT           reduce using rule 32 (statement -> for .)
    FOR             reduce using rule 32 (statement -> for .)
    RETURN          reduce using rule 32 (statement -> for .)


state 59

    (26) bloque_primo -> bloque_primo statement .

    RCURLY_BRACKET  reduce using rule 26 (bloque_primo -> bloque_primo statement .)
    ID              reduce using rule 26 (bloque_primo -> bloque_primo statement .)
    IF              reduce using rule 26 (bloque_primo -> bloque_primo statement .)
    PRINT           reduce using rule 26 (bloque_primo -> bloque_primo statement .)
    FOR             reduce using rule 26 (bloque_primo -> bloque_primo statement .)
    RETURN          reduce using rule 26 (bloque_primo -> bloque_primo statement .)


state 60

    (30) statement -> printer .

    RCURLY_BRACKET  reduce using rule 30 (statement -> printer .)
    ID              reduce using rule 30 (statement -> printer .)
    IF              reduce using rule 30 (statement -> printer .)
    PRINT           reduce using rule 30 (statement -> printer .)
    FOR             reduce using rule 30 (statement -> printer .)
    RETURN          reduce using rule 30 (statement -> printer .)


state 61

    (33) statement -> return .

    RCURLY_BRACKET  reduce using rule 33 (statement -> return .)
    ID              reduce using rule 33 (statement -> return .)
    IF              reduce using rule 33 (statement -> return .)
    PRINT           reduce using rule 33 (statement -> return .)
    FOR             reduce using rule 33 (statement -> return .)
    RETURN          reduce using rule 33 (statement -> return .)


state 62

    (45) for -> FOR . OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque

    OP_LPAREN       shift and go to state 81


state 63

    (35) assigment -> ID . OP_EQUALS single_expression SEMICOLON
    (41) increment -> ID . OP_PLUS_EQUALS single_expression SEMICOLON
    (42) increment -> ID . OP_MINUS_EQUALS single_expression SEMICOLON
    (43) increment -> ID . OP_PLUS OP_PLUS SEMICOLON
    (44) increment -> ID . OP_MINUS OP_MINUS SEMICOLON
    (47) function_call -> ID . OP_LPAREN function_call_prime OP_RPAREN SEMICOLON

    OP_EQUALS       shift and go to state 83
    OP_PLUS_EQUALS  shift and go to state 87
    OP_MINUS_EQUALS shift and go to state 84
    OP_PLUS         shift and go to state 85
    OP_MINUS        shift and go to state 82
    OP_LPAREN       shift and go to state 86


state 64

    (36) if -> IF . OP_LPAREN condition_mega_expression OP_RPAREN bloque
    (37) if -> IF . OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque

    OP_LPAREN       shift and go to state 88


state 65

    (28) statement -> assigment .

    RCURLY_BRACKET  reduce using rule 28 (statement -> assigment .)
    ID              reduce using rule 28 (statement -> assigment .)
    IF              reduce using rule 28 (statement -> assigment .)
    PRINT           reduce using rule 28 (statement -> assigment .)
    FOR             reduce using rule 28 (statement -> assigment .)
    RETURN          reduce using rule 28 (statement -> assigment .)


state 66

    (25) bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .

    FUNCTION        reduce using rule 25 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    MAIN            reduce using rule 25 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    RCURLY_BRACKET  reduce using rule 25 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    ID              reduce using rule 25 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    IF              reduce using rule 25 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    PRINT           reduce using rule 25 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    FOR             reduce using rule 25 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    RETURN          reduce using rule 25 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    ELSE            reduce using rule 25 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)


state 67

    (15) function -> FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN bloque . function
    (14) function -> . FUNCTION type ID OP_LPAREN parameters OP_RPAREN bloque function
    (15) function -> . FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN bloque function
    (16) function -> . epsilon
    (90) epsilon -> .

    FUNCTION        shift and go to state 13
    MAIN            reduce using rule 90 (epsilon -> .)

    function                       shift and go to state 89
    epsilon                        shift and go to state 14

state 68

    (23) parameters -> COMA type ID . parameters
    (22) parameters -> . type ID parameters
    (23) parameters -> . COMA type ID parameters
    (24) parameters -> . epsilon
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . STRING
    (21) type -> . BOOLEAN
    (90) epsilon -> .

    COMA            shift and go to state 43
    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    BOOLEAN         shift and go to state 10
    OP_RPAREN       reduce using rule 90 (epsilon -> .)

    epsilon                        shift and go to state 42
    type                           shift and go to state 44
    parameters                     shift and go to state 90

state 69

    (22) parameters -> type ID parameters .

    OP_RPAREN       reduce using rule 22 (parameters -> type ID parameters .)


state 70

    (14) function -> FUNCTION type ID OP_LPAREN parameters OP_RPAREN bloque . function
    (14) function -> . FUNCTION type ID OP_LPAREN parameters OP_RPAREN bloque function
    (15) function -> . FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN bloque function
    (16) function -> . epsilon
    (90) epsilon -> .

    FUNCTION        shift and go to state 13
    MAIN            reduce using rule 90 (epsilon -> .)

    function                       shift and go to state 91
    epsilon                        shift and go to state 14

state 71

    (46) return -> RETURN single_expression . SEMICOLON

    SEMICOLON       shift and go to state 92


state 72

    (87) var_cte -> VAR_INT .

    OP_DIVISION     reduce using rule 87 (var_cte -> VAR_INT .)
    OP_TIMES        reduce using rule 87 (var_cte -> VAR_INT .)
    OP_PLUS         reduce using rule 87 (var_cte -> VAR_INT .)
    OP_MINUS        reduce using rule 87 (var_cte -> VAR_INT .)
    OP_GREATER_THAN reduce using rule 87 (var_cte -> VAR_INT .)
    OP_LESS_THAN    reduce using rule 87 (var_cte -> VAR_INT .)
    OP_GREATER_EQUALS_THAN reduce using rule 87 (var_cte -> VAR_INT .)
    OP_LESS_EQUALS_THAN reduce using rule 87 (var_cte -> VAR_INT .)
    OP_EQUALS_TWO   reduce using rule 87 (var_cte -> VAR_INT .)
    OP_NOT_EQUALS   reduce using rule 87 (var_cte -> VAR_INT .)
    AND             reduce using rule 87 (var_cte -> VAR_INT .)
    OR              reduce using rule 87 (var_cte -> VAR_INT .)
    OP_RPAREN       reduce using rule 87 (var_cte -> VAR_INT .)
    SEMICOLON       reduce using rule 87 (var_cte -> VAR_INT .)


state 73

    (88) var_cte -> VAR_FLOAT .

    OP_DIVISION     reduce using rule 88 (var_cte -> VAR_FLOAT .)
    OP_TIMES        reduce using rule 88 (var_cte -> VAR_FLOAT .)
    OP_PLUS         reduce using rule 88 (var_cte -> VAR_FLOAT .)
    OP_MINUS        reduce using rule 88 (var_cte -> VAR_FLOAT .)
    OP_GREATER_THAN reduce using rule 88 (var_cte -> VAR_FLOAT .)
    OP_LESS_THAN    reduce using rule 88 (var_cte -> VAR_FLOAT .)
    OP_GREATER_EQUALS_THAN reduce using rule 88 (var_cte -> VAR_FLOAT .)
    OP_LESS_EQUALS_THAN reduce using rule 88 (var_cte -> VAR_FLOAT .)
    OP_EQUALS_TWO   reduce using rule 88 (var_cte -> VAR_FLOAT .)
    OP_NOT_EQUALS   reduce using rule 88 (var_cte -> VAR_FLOAT .)
    AND             reduce using rule 88 (var_cte -> VAR_FLOAT .)
    OR              reduce using rule 88 (var_cte -> VAR_FLOAT .)
    OP_RPAREN       reduce using rule 88 (var_cte -> VAR_FLOAT .)
    SEMICOLON       reduce using rule 88 (var_cte -> VAR_FLOAT .)


state 74

    (60) single_expression -> single_term .
    (61) single_expression -> single_term . OP_PLUS single_expression
    (62) single_expression -> single_term . OP_MINUS single_expression

    SEMICOLON       reduce using rule 60 (single_expression -> single_term .)
    OP_RPAREN       reduce using rule 60 (single_expression -> single_term .)
    OP_PLUS         shift and go to state 94
    OP_MINUS        shift and go to state 93


state 75

    (89) var_cte -> VAR_STRING .

    OP_DIVISION     reduce using rule 89 (var_cte -> VAR_STRING .)
    OP_TIMES        reduce using rule 89 (var_cte -> VAR_STRING .)
    OP_PLUS         reduce using rule 89 (var_cte -> VAR_STRING .)
    OP_MINUS        reduce using rule 89 (var_cte -> VAR_STRING .)
    OP_GREATER_THAN reduce using rule 89 (var_cte -> VAR_STRING .)
    OP_LESS_THAN    reduce using rule 89 (var_cte -> VAR_STRING .)
    OP_GREATER_EQUALS_THAN reduce using rule 89 (var_cte -> VAR_STRING .)
    OP_LESS_EQUALS_THAN reduce using rule 89 (var_cte -> VAR_STRING .)
    OP_EQUALS_TWO   reduce using rule 89 (var_cte -> VAR_STRING .)
    OP_NOT_EQUALS   reduce using rule 89 (var_cte -> VAR_STRING .)
    AND             reduce using rule 89 (var_cte -> VAR_STRING .)
    OR              reduce using rule 89 (var_cte -> VAR_STRING .)
    OP_RPAREN       reduce using rule 89 (var_cte -> VAR_STRING .)
    SEMICOLON       reduce using rule 89 (var_cte -> VAR_STRING .)


state 76

    (67) single_fact -> OP_LPAREN . single_expression OP_RPAREN
    (60) single_expression -> . single_term
    (61) single_expression -> . single_term OP_PLUS single_expression
    (62) single_expression -> . single_term OP_MINUS single_expression
    (63) single_term -> . single_fact
    (64) single_term -> . single_fact OP_DIVISION single_term
    (65) single_term -> . single_fact OP_TIMES single_term
    (66) single_fact -> . var_cte
    (67) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 76
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    single_term                    shift and go to state 74
    single_expression              shift and go to state 95
    single_fact                    shift and go to state 79
    var_cte                        shift and go to state 78

state 77

    (86) var_cte -> ID .

    OP_DIVISION     reduce using rule 86 (var_cte -> ID .)
    OP_TIMES        reduce using rule 86 (var_cte -> ID .)
    OP_PLUS         reduce using rule 86 (var_cte -> ID .)
    OP_MINUS        reduce using rule 86 (var_cte -> ID .)
    OP_GREATER_THAN reduce using rule 86 (var_cte -> ID .)
    OP_LESS_THAN    reduce using rule 86 (var_cte -> ID .)
    OP_GREATER_EQUALS_THAN reduce using rule 86 (var_cte -> ID .)
    OP_LESS_EQUALS_THAN reduce using rule 86 (var_cte -> ID .)
    OP_EQUALS_TWO   reduce using rule 86 (var_cte -> ID .)
    OP_NOT_EQUALS   reduce using rule 86 (var_cte -> ID .)
    AND             reduce using rule 86 (var_cte -> ID .)
    OR              reduce using rule 86 (var_cte -> ID .)
    OP_RPAREN       reduce using rule 86 (var_cte -> ID .)
    SEMICOLON       reduce using rule 86 (var_cte -> ID .)


state 78

    (66) single_fact -> var_cte .

    OP_DIVISION     reduce using rule 66 (single_fact -> var_cte .)
    OP_TIMES        reduce using rule 66 (single_fact -> var_cte .)
    OP_PLUS         reduce using rule 66 (single_fact -> var_cte .)
    OP_MINUS        reduce using rule 66 (single_fact -> var_cte .)
    SEMICOLON       reduce using rule 66 (single_fact -> var_cte .)
    OP_RPAREN       reduce using rule 66 (single_fact -> var_cte .)


state 79

    (63) single_term -> single_fact .
    (64) single_term -> single_fact . OP_DIVISION single_term
    (65) single_term -> single_fact . OP_TIMES single_term

    OP_PLUS         reduce using rule 63 (single_term -> single_fact .)
    OP_MINUS        reduce using rule 63 (single_term -> single_fact .)
    SEMICOLON       reduce using rule 63 (single_term -> single_fact .)
    OP_RPAREN       reduce using rule 63 (single_term -> single_fact .)
    OP_DIVISION     shift and go to state 96
    OP_TIMES        shift and go to state 97


state 80

    (38) printer -> PRINT OP_LPAREN . impression OP_RPAREN SEMICOLON
    (39) impression -> . mega_expression
    (40) impression -> . mega_expression OP_PLUS impression
    (68) mega_expression -> . super_expression
    (69) mega_expression -> . super_expression AND super_expression
    (70) mega_expression -> . super_expression OR super_expression
    (71) super_expression -> . expression
    (72) super_expression -> . expression OP_GREATER_THAN expression
    (73) super_expression -> . expression OP_LESS_THAN expression
    (74) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (75) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (76) super_expression -> . expression OP_EQUALS_TWO expression
    (77) super_expression -> . expression OP_NOT_EQUALS expression
    (78) expression -> . term
    (79) expression -> . term OP_PLUS expression
    (80) expression -> . term OP_MINUS expression
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    impression                     shift and go to state 98
    term                           shift and go to state 102
    super_expression               shift and go to state 99
    var_cte                        shift and go to state 101
    mega_expression                shift and go to state 103
    expression                     shift and go to state 104
    fact                           shift and go to state 105

state 81

    (45) for -> FOR OP_LPAREN . assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque
    (35) assigment -> . ID OP_EQUALS single_expression SEMICOLON

    ID              shift and go to state 107

    assigment                      shift and go to state 106

state 82

    (44) increment -> ID OP_MINUS . OP_MINUS SEMICOLON

    OP_MINUS        shift and go to state 108


state 83

    (35) assigment -> ID OP_EQUALS . single_expression SEMICOLON
    (60) single_expression -> . single_term
    (61) single_expression -> . single_term OP_PLUS single_expression
    (62) single_expression -> . single_term OP_MINUS single_expression
    (63) single_term -> . single_fact
    (64) single_term -> . single_fact OP_DIVISION single_term
    (65) single_term -> . single_fact OP_TIMES single_term
    (66) single_fact -> . var_cte
    (67) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 76
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    single_term                    shift and go to state 74
    single_expression              shift and go to state 109
    single_fact                    shift and go to state 79
    var_cte                        shift and go to state 78

state 84

    (42) increment -> ID OP_MINUS_EQUALS . single_expression SEMICOLON
    (60) single_expression -> . single_term
    (61) single_expression -> . single_term OP_PLUS single_expression
    (62) single_expression -> . single_term OP_MINUS single_expression
    (63) single_term -> . single_fact
    (64) single_term -> . single_fact OP_DIVISION single_term
    (65) single_term -> . single_fact OP_TIMES single_term
    (66) single_fact -> . var_cte
    (67) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 76
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    single_term                    shift and go to state 74
    single_expression              shift and go to state 110
    single_fact                    shift and go to state 79
    var_cte                        shift and go to state 78

state 85

    (43) increment -> ID OP_PLUS . OP_PLUS SEMICOLON

    OP_PLUS         shift and go to state 111


state 86

    (47) function_call -> ID OP_LPAREN . function_call_prime OP_RPAREN SEMICOLON
    (48) function_call_prime -> . ID function_call_prime
    (49) function_call_prime -> . COMA ID function_call_prime
    (50) function_call_prime -> . epsilon
    (90) epsilon -> .

    ID              shift and go to state 115
    COMA            shift and go to state 114
    OP_RPAREN       reduce using rule 90 (epsilon -> .)

    function_call_prime            shift and go to state 113
    epsilon                        shift and go to state 112

state 87

    (41) increment -> ID OP_PLUS_EQUALS . single_expression SEMICOLON
    (60) single_expression -> . single_term
    (61) single_expression -> . single_term OP_PLUS single_expression
    (62) single_expression -> . single_term OP_MINUS single_expression
    (63) single_term -> . single_fact
    (64) single_term -> . single_fact OP_DIVISION single_term
    (65) single_term -> . single_fact OP_TIMES single_term
    (66) single_fact -> . var_cte
    (67) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 76
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    single_term                    shift and go to state 74
    single_expression              shift and go to state 116
    single_fact                    shift and go to state 79
    var_cte                        shift and go to state 78

state 88

    (36) if -> IF OP_LPAREN . condition_mega_expression OP_RPAREN bloque
    (37) if -> IF OP_LPAREN . condition_mega_expression OP_RPAREN bloque ELSE bloque
    (51) condition_mega_expression -> . condition_super_expression
    (52) condition_mega_expression -> . condition_super_expression AND condition_super_expression
    (53) condition_mega_expression -> . condition_super_expression OR condition_super_expression
    (54) condition_super_expression -> . expression OP_GREATER_THAN expression
    (55) condition_super_expression -> . expression OP_LESS_THAN expression
    (56) condition_super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (57) condition_super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (58) condition_super_expression -> . expression OP_EQUALS_TWO expression
    (59) condition_super_expression -> . expression OP_NOT_EQUALS expression
    (78) expression -> . term
    (79) expression -> . term OP_PLUS expression
    (80) expression -> . term OP_MINUS expression
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    term                           shift and go to state 102
    condition_super_expression     shift and go to state 118
    var_cte                        shift and go to state 101
    condition_mega_expression      shift and go to state 117
    expression                     shift and go to state 119
    fact                           shift and go to state 105

state 89

    (15) function -> FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN bloque function .

    MAIN            reduce using rule 15 (function -> FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN bloque function .)


state 90

    (23) parameters -> COMA type ID parameters .

    OP_RPAREN       reduce using rule 23 (parameters -> COMA type ID parameters .)


state 91

    (14) function -> FUNCTION type ID OP_LPAREN parameters OP_RPAREN bloque function .

    MAIN            reduce using rule 14 (function -> FUNCTION type ID OP_LPAREN parameters OP_RPAREN bloque function .)


state 92

    (46) return -> RETURN single_expression SEMICOLON .

    RCURLY_BRACKET  reduce using rule 46 (return -> RETURN single_expression SEMICOLON .)
    ID              reduce using rule 46 (return -> RETURN single_expression SEMICOLON .)
    IF              reduce using rule 46 (return -> RETURN single_expression SEMICOLON .)
    PRINT           reduce using rule 46 (return -> RETURN single_expression SEMICOLON .)
    FOR             reduce using rule 46 (return -> RETURN single_expression SEMICOLON .)
    RETURN          reduce using rule 46 (return -> RETURN single_expression SEMICOLON .)


state 93

    (62) single_expression -> single_term OP_MINUS . single_expression
    (60) single_expression -> . single_term
    (61) single_expression -> . single_term OP_PLUS single_expression
    (62) single_expression -> . single_term OP_MINUS single_expression
    (63) single_term -> . single_fact
    (64) single_term -> . single_fact OP_DIVISION single_term
    (65) single_term -> . single_fact OP_TIMES single_term
    (66) single_fact -> . var_cte
    (67) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 76
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    single_term                    shift and go to state 74
    single_expression              shift and go to state 120
    single_fact                    shift and go to state 79
    var_cte                        shift and go to state 78

state 94

    (61) single_expression -> single_term OP_PLUS . single_expression
    (60) single_expression -> . single_term
    (61) single_expression -> . single_term OP_PLUS single_expression
    (62) single_expression -> . single_term OP_MINUS single_expression
    (63) single_term -> . single_fact
    (64) single_term -> . single_fact OP_DIVISION single_term
    (65) single_term -> . single_fact OP_TIMES single_term
    (66) single_fact -> . var_cte
    (67) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 76
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    single_term                    shift and go to state 74
    single_expression              shift and go to state 121
    single_fact                    shift and go to state 79
    var_cte                        shift and go to state 78

state 95

    (67) single_fact -> OP_LPAREN single_expression . OP_RPAREN

    OP_RPAREN       shift and go to state 122


state 96

    (64) single_term -> single_fact OP_DIVISION . single_term
    (63) single_term -> . single_fact
    (64) single_term -> . single_fact OP_DIVISION single_term
    (65) single_term -> . single_fact OP_TIMES single_term
    (66) single_fact -> . var_cte
    (67) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 76
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    single_fact                    shift and go to state 79
    single_term                    shift and go to state 123
    var_cte                        shift and go to state 78

state 97

    (65) single_term -> single_fact OP_TIMES . single_term
    (63) single_term -> . single_fact
    (64) single_term -> . single_fact OP_DIVISION single_term
    (65) single_term -> . single_fact OP_TIMES single_term
    (66) single_fact -> . var_cte
    (67) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 76
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    single_fact                    shift and go to state 79
    single_term                    shift and go to state 124
    var_cte                        shift and go to state 78

state 98

    (38) printer -> PRINT OP_LPAREN impression . OP_RPAREN SEMICOLON

    OP_RPAREN       shift and go to state 125


state 99

    (68) mega_expression -> super_expression .
    (69) mega_expression -> super_expression . AND super_expression
    (70) mega_expression -> super_expression . OR super_expression

    OP_RPAREN       reduce using rule 68 (mega_expression -> super_expression .)
    OP_PLUS         reduce using rule 68 (mega_expression -> super_expression .)
    AND             shift and go to state 126
    OR              shift and go to state 127


state 100

    (85) fact -> OP_LPAREN . mega_expression OP_RPAREN
    (68) mega_expression -> . super_expression
    (69) mega_expression -> . super_expression AND super_expression
    (70) mega_expression -> . super_expression OR super_expression
    (71) super_expression -> . expression
    (72) super_expression -> . expression OP_GREATER_THAN expression
    (73) super_expression -> . expression OP_LESS_THAN expression
    (74) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (75) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (76) super_expression -> . expression OP_EQUALS_TWO expression
    (77) super_expression -> . expression OP_NOT_EQUALS expression
    (78) expression -> . term
    (79) expression -> . term OP_PLUS expression
    (80) expression -> . term OP_MINUS expression
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    term                           shift and go to state 102
    super_expression               shift and go to state 99
    var_cte                        shift and go to state 101
    mega_expression                shift and go to state 128
    expression                     shift and go to state 104
    fact                           shift and go to state 105

state 101

    (84) fact -> var_cte .

    OP_DIVISION     reduce using rule 84 (fact -> var_cte .)
    OP_TIMES        reduce using rule 84 (fact -> var_cte .)
    OP_PLUS         reduce using rule 84 (fact -> var_cte .)
    OP_MINUS        reduce using rule 84 (fact -> var_cte .)
    OP_GREATER_THAN reduce using rule 84 (fact -> var_cte .)
    OP_LESS_THAN    reduce using rule 84 (fact -> var_cte .)
    OP_GREATER_EQUALS_THAN reduce using rule 84 (fact -> var_cte .)
    OP_LESS_EQUALS_THAN reduce using rule 84 (fact -> var_cte .)
    OP_EQUALS_TWO   reduce using rule 84 (fact -> var_cte .)
    OP_NOT_EQUALS   reduce using rule 84 (fact -> var_cte .)
    OP_RPAREN       reduce using rule 84 (fact -> var_cte .)
    AND             reduce using rule 84 (fact -> var_cte .)
    OR              reduce using rule 84 (fact -> var_cte .)
    SEMICOLON       reduce using rule 84 (fact -> var_cte .)


state 102

    (78) expression -> term .
    (79) expression -> term . OP_PLUS expression
    (80) expression -> term . OP_MINUS expression

  ! shift/reduce conflict for OP_PLUS resolved as shift
    OP_GREATER_THAN reduce using rule 78 (expression -> term .)
    OP_LESS_THAN    reduce using rule 78 (expression -> term .)
    OP_GREATER_EQUALS_THAN reduce using rule 78 (expression -> term .)
    OP_LESS_EQUALS_THAN reduce using rule 78 (expression -> term .)
    OP_EQUALS_TWO   reduce using rule 78 (expression -> term .)
    OP_NOT_EQUALS   reduce using rule 78 (expression -> term .)
    AND             reduce using rule 78 (expression -> term .)
    OR              reduce using rule 78 (expression -> term .)
    OP_RPAREN       reduce using rule 78 (expression -> term .)
    SEMICOLON       reduce using rule 78 (expression -> term .)
    OP_PLUS         shift and go to state 130
    OP_MINUS        shift and go to state 129

  ! OP_PLUS         [ reduce using rule 78 (expression -> term .) ]


state 103

    (39) impression -> mega_expression .
    (40) impression -> mega_expression . OP_PLUS impression

    OP_RPAREN       reduce using rule 39 (impression -> mega_expression .)
    OP_PLUS         shift and go to state 131


state 104

    (71) super_expression -> expression .
    (72) super_expression -> expression . OP_GREATER_THAN expression
    (73) super_expression -> expression . OP_LESS_THAN expression
    (74) super_expression -> expression . OP_GREATER_EQUALS_THAN expression
    (75) super_expression -> expression . OP_LESS_EQUALS_THAN expression
    (76) super_expression -> expression . OP_EQUALS_TWO expression
    (77) super_expression -> expression . OP_NOT_EQUALS expression

    OP_PLUS         reduce using rule 71 (super_expression -> expression .)
    OP_RPAREN       reduce using rule 71 (super_expression -> expression .)
    AND             reduce using rule 71 (super_expression -> expression .)
    OR              reduce using rule 71 (super_expression -> expression .)
    OP_GREATER_THAN shift and go to state 133
    OP_LESS_THAN    shift and go to state 134
    OP_GREATER_EQUALS_THAN shift and go to state 136
    OP_LESS_EQUALS_THAN shift and go to state 132
    OP_EQUALS_TWO   shift and go to state 137
    OP_NOT_EQUALS   shift and go to state 135


state 105

    (81) term -> fact .
    (82) term -> fact . OP_DIVISION term
    (83) term -> fact . OP_TIMES term

    OP_PLUS         reduce using rule 81 (term -> fact .)
    OP_MINUS        reduce using rule 81 (term -> fact .)
    AND             reduce using rule 81 (term -> fact .)
    OR              reduce using rule 81 (term -> fact .)
    OP_RPAREN       reduce using rule 81 (term -> fact .)
    SEMICOLON       reduce using rule 81 (term -> fact .)
    OP_GREATER_THAN reduce using rule 81 (term -> fact .)
    OP_LESS_THAN    reduce using rule 81 (term -> fact .)
    OP_GREATER_EQUALS_THAN reduce using rule 81 (term -> fact .)
    OP_LESS_EQUALS_THAN reduce using rule 81 (term -> fact .)
    OP_EQUALS_TWO   reduce using rule 81 (term -> fact .)
    OP_NOT_EQUALS   reduce using rule 81 (term -> fact .)
    OP_DIVISION     shift and go to state 138
    OP_TIMES        shift and go to state 139


state 106

    (45) for -> FOR OP_LPAREN assigment . condition_super_expression SEMICOLON increment OP_RPAREN bloque
    (54) condition_super_expression -> . expression OP_GREATER_THAN expression
    (55) condition_super_expression -> . expression OP_LESS_THAN expression
    (56) condition_super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (57) condition_super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (58) condition_super_expression -> . expression OP_EQUALS_TWO expression
    (59) condition_super_expression -> . expression OP_NOT_EQUALS expression
    (78) expression -> . term
    (79) expression -> . term OP_PLUS expression
    (80) expression -> . term OP_MINUS expression
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    term                           shift and go to state 102
    condition_super_expression     shift and go to state 140
    var_cte                        shift and go to state 101
    expression                     shift and go to state 119
    fact                           shift and go to state 105

state 107

    (35) assigment -> ID . OP_EQUALS single_expression SEMICOLON

    OP_EQUALS       shift and go to state 83


state 108

    (44) increment -> ID OP_MINUS OP_MINUS . SEMICOLON

    SEMICOLON       shift and go to state 141


state 109

    (35) assigment -> ID OP_EQUALS single_expression . SEMICOLON

    SEMICOLON       shift and go to state 142


state 110

    (42) increment -> ID OP_MINUS_EQUALS single_expression . SEMICOLON

    SEMICOLON       shift and go to state 143


state 111

    (43) increment -> ID OP_PLUS OP_PLUS . SEMICOLON

    SEMICOLON       shift and go to state 144


state 112

    (50) function_call_prime -> epsilon .

    OP_RPAREN       reduce using rule 50 (function_call_prime -> epsilon .)


state 113

    (47) function_call -> ID OP_LPAREN function_call_prime . OP_RPAREN SEMICOLON

    OP_RPAREN       shift and go to state 145


state 114

    (49) function_call_prime -> COMA . ID function_call_prime

    ID              shift and go to state 146


state 115

    (48) function_call_prime -> ID . function_call_prime
    (48) function_call_prime -> . ID function_call_prime
    (49) function_call_prime -> . COMA ID function_call_prime
    (50) function_call_prime -> . epsilon
    (90) epsilon -> .

    ID              shift and go to state 115
    COMA            shift and go to state 114
    OP_RPAREN       reduce using rule 90 (epsilon -> .)

    function_call_prime            shift and go to state 147
    epsilon                        shift and go to state 112

state 116

    (41) increment -> ID OP_PLUS_EQUALS single_expression . SEMICOLON

    SEMICOLON       shift and go to state 148


state 117

    (36) if -> IF OP_LPAREN condition_mega_expression . OP_RPAREN bloque
    (37) if -> IF OP_LPAREN condition_mega_expression . OP_RPAREN bloque ELSE bloque

    OP_RPAREN       shift and go to state 149


state 118

    (51) condition_mega_expression -> condition_super_expression .
    (52) condition_mega_expression -> condition_super_expression . AND condition_super_expression
    (53) condition_mega_expression -> condition_super_expression . OR condition_super_expression

    OP_RPAREN       reduce using rule 51 (condition_mega_expression -> condition_super_expression .)
    AND             shift and go to state 150
    OR              shift and go to state 151


state 119

    (54) condition_super_expression -> expression . OP_GREATER_THAN expression
    (55) condition_super_expression -> expression . OP_LESS_THAN expression
    (56) condition_super_expression -> expression . OP_GREATER_EQUALS_THAN expression
    (57) condition_super_expression -> expression . OP_LESS_EQUALS_THAN expression
    (58) condition_super_expression -> expression . OP_EQUALS_TWO expression
    (59) condition_super_expression -> expression . OP_NOT_EQUALS expression

    OP_GREATER_THAN shift and go to state 153
    OP_LESS_THAN    shift and go to state 154
    OP_GREATER_EQUALS_THAN shift and go to state 156
    OP_LESS_EQUALS_THAN shift and go to state 152
    OP_EQUALS_TWO   shift and go to state 157
    OP_NOT_EQUALS   shift and go to state 155


state 120

    (62) single_expression -> single_term OP_MINUS single_expression .

    SEMICOLON       reduce using rule 62 (single_expression -> single_term OP_MINUS single_expression .)
    OP_RPAREN       reduce using rule 62 (single_expression -> single_term OP_MINUS single_expression .)


state 121

    (61) single_expression -> single_term OP_PLUS single_expression .

    SEMICOLON       reduce using rule 61 (single_expression -> single_term OP_PLUS single_expression .)
    OP_RPAREN       reduce using rule 61 (single_expression -> single_term OP_PLUS single_expression .)


state 122

    (67) single_fact -> OP_LPAREN single_expression OP_RPAREN .

    OP_DIVISION     reduce using rule 67 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)
    OP_TIMES        reduce using rule 67 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)
    OP_PLUS         reduce using rule 67 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)
    OP_MINUS        reduce using rule 67 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)
    SEMICOLON       reduce using rule 67 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)
    OP_RPAREN       reduce using rule 67 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)


state 123

    (64) single_term -> single_fact OP_DIVISION single_term .

    OP_PLUS         reduce using rule 64 (single_term -> single_fact OP_DIVISION single_term .)
    OP_MINUS        reduce using rule 64 (single_term -> single_fact OP_DIVISION single_term .)
    SEMICOLON       reduce using rule 64 (single_term -> single_fact OP_DIVISION single_term .)
    OP_RPAREN       reduce using rule 64 (single_term -> single_fact OP_DIVISION single_term .)


state 124

    (65) single_term -> single_fact OP_TIMES single_term .

    OP_PLUS         reduce using rule 65 (single_term -> single_fact OP_TIMES single_term .)
    OP_MINUS        reduce using rule 65 (single_term -> single_fact OP_TIMES single_term .)
    SEMICOLON       reduce using rule 65 (single_term -> single_fact OP_TIMES single_term .)
    OP_RPAREN       reduce using rule 65 (single_term -> single_fact OP_TIMES single_term .)


state 125

    (38) printer -> PRINT OP_LPAREN impression OP_RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 158


state 126

    (69) mega_expression -> super_expression AND . super_expression
    (71) super_expression -> . expression
    (72) super_expression -> . expression OP_GREATER_THAN expression
    (73) super_expression -> . expression OP_LESS_THAN expression
    (74) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (75) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (76) super_expression -> . expression OP_EQUALS_TWO expression
    (77) super_expression -> . expression OP_NOT_EQUALS expression
    (78) expression -> . term
    (79) expression -> . term OP_PLUS expression
    (80) expression -> . term OP_MINUS expression
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    term                           shift and go to state 102
    super_expression               shift and go to state 159
    var_cte                        shift and go to state 101
    expression                     shift and go to state 104
    fact                           shift and go to state 105

state 127

    (70) mega_expression -> super_expression OR . super_expression
    (71) super_expression -> . expression
    (72) super_expression -> . expression OP_GREATER_THAN expression
    (73) super_expression -> . expression OP_LESS_THAN expression
    (74) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (75) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (76) super_expression -> . expression OP_EQUALS_TWO expression
    (77) super_expression -> . expression OP_NOT_EQUALS expression
    (78) expression -> . term
    (79) expression -> . term OP_PLUS expression
    (80) expression -> . term OP_MINUS expression
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    term                           shift and go to state 102
    super_expression               shift and go to state 160
    var_cte                        shift and go to state 101
    expression                     shift and go to state 104
    fact                           shift and go to state 105

state 128

    (85) fact -> OP_LPAREN mega_expression . OP_RPAREN

    OP_RPAREN       shift and go to state 161


state 129

    (80) expression -> term OP_MINUS . expression
    (78) expression -> . term
    (79) expression -> . term OP_PLUS expression
    (80) expression -> . term OP_MINUS expression
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    term                           shift and go to state 102
    expression                     shift and go to state 162
    fact                           shift and go to state 105
    var_cte                        shift and go to state 101

state 130

    (79) expression -> term OP_PLUS . expression
    (78) expression -> . term
    (79) expression -> . term OP_PLUS expression
    (80) expression -> . term OP_MINUS expression
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    term                           shift and go to state 102
    expression                     shift and go to state 163
    fact                           shift and go to state 105
    var_cte                        shift and go to state 101

state 131

    (40) impression -> mega_expression OP_PLUS . impression
    (39) impression -> . mega_expression
    (40) impression -> . mega_expression OP_PLUS impression
    (68) mega_expression -> . super_expression
    (69) mega_expression -> . super_expression AND super_expression
    (70) mega_expression -> . super_expression OR super_expression
    (71) super_expression -> . expression
    (72) super_expression -> . expression OP_GREATER_THAN expression
    (73) super_expression -> . expression OP_LESS_THAN expression
    (74) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (75) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (76) super_expression -> . expression OP_EQUALS_TWO expression
    (77) super_expression -> . expression OP_NOT_EQUALS expression
    (78) expression -> . term
    (79) expression -> . term OP_PLUS expression
    (80) expression -> . term OP_MINUS expression
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    impression                     shift and go to state 164
    term                           shift and go to state 102
    super_expression               shift and go to state 99
    var_cte                        shift and go to state 101
    mega_expression                shift and go to state 103
    expression                     shift and go to state 104
    fact                           shift and go to state 105

state 132

    (75) super_expression -> expression OP_LESS_EQUALS_THAN . expression
    (78) expression -> . term
    (79) expression -> . term OP_PLUS expression
    (80) expression -> . term OP_MINUS expression
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    term                           shift and go to state 102
    expression                     shift and go to state 165
    fact                           shift and go to state 105
    var_cte                        shift and go to state 101

state 133

    (72) super_expression -> expression OP_GREATER_THAN . expression
    (78) expression -> . term
    (79) expression -> . term OP_PLUS expression
    (80) expression -> . term OP_MINUS expression
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    term                           shift and go to state 102
    expression                     shift and go to state 166
    fact                           shift and go to state 105
    var_cte                        shift and go to state 101

state 134

    (73) super_expression -> expression OP_LESS_THAN . expression
    (78) expression -> . term
    (79) expression -> . term OP_PLUS expression
    (80) expression -> . term OP_MINUS expression
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    term                           shift and go to state 102
    expression                     shift and go to state 167
    fact                           shift and go to state 105
    var_cte                        shift and go to state 101

state 135

    (77) super_expression -> expression OP_NOT_EQUALS . expression
    (78) expression -> . term
    (79) expression -> . term OP_PLUS expression
    (80) expression -> . term OP_MINUS expression
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    term                           shift and go to state 102
    expression                     shift and go to state 168
    fact                           shift and go to state 105
    var_cte                        shift and go to state 101

state 136

    (74) super_expression -> expression OP_GREATER_EQUALS_THAN . expression
    (78) expression -> . term
    (79) expression -> . term OP_PLUS expression
    (80) expression -> . term OP_MINUS expression
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    term                           shift and go to state 102
    expression                     shift and go to state 169
    fact                           shift and go to state 105
    var_cte                        shift and go to state 101

state 137

    (76) super_expression -> expression OP_EQUALS_TWO . expression
    (78) expression -> . term
    (79) expression -> . term OP_PLUS expression
    (80) expression -> . term OP_MINUS expression
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    term                           shift and go to state 102
    expression                     shift and go to state 170
    fact                           shift and go to state 105
    var_cte                        shift and go to state 101

state 138

    (82) term -> fact OP_DIVISION . term
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    term                           shift and go to state 171
    fact                           shift and go to state 105
    var_cte                        shift and go to state 101

state 139

    (83) term -> fact OP_TIMES . term
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    term                           shift and go to state 172
    fact                           shift and go to state 105
    var_cte                        shift and go to state 101

state 140

    (45) for -> FOR OP_LPAREN assigment condition_super_expression . SEMICOLON increment OP_RPAREN bloque

    SEMICOLON       shift and go to state 173


state 141

    (44) increment -> ID OP_MINUS OP_MINUS SEMICOLON .

    OP_RPAREN       reduce using rule 44 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    RCURLY_BRACKET  reduce using rule 44 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    ID              reduce using rule 44 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    IF              reduce using rule 44 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    PRINT           reduce using rule 44 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    FOR             reduce using rule 44 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    RETURN          reduce using rule 44 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)


state 142

    (35) assigment -> ID OP_EQUALS single_expression SEMICOLON .

    RCURLY_BRACKET  reduce using rule 35 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    ID              reduce using rule 35 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    IF              reduce using rule 35 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    PRINT           reduce using rule 35 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    FOR             reduce using rule 35 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    RETURN          reduce using rule 35 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    OP_LPAREN       reduce using rule 35 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    VAR_INT         reduce using rule 35 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    VAR_FLOAT       reduce using rule 35 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    VAR_STRING      reduce using rule 35 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)


state 143

    (42) increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .

    OP_RPAREN       reduce using rule 42 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    RCURLY_BRACKET  reduce using rule 42 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    ID              reduce using rule 42 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    IF              reduce using rule 42 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    PRINT           reduce using rule 42 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    FOR             reduce using rule 42 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    RETURN          reduce using rule 42 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)


state 144

    (43) increment -> ID OP_PLUS OP_PLUS SEMICOLON .

    OP_RPAREN       reduce using rule 43 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    RCURLY_BRACKET  reduce using rule 43 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    ID              reduce using rule 43 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    IF              reduce using rule 43 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    PRINT           reduce using rule 43 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    FOR             reduce using rule 43 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    RETURN          reduce using rule 43 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)


state 145

    (47) function_call -> ID OP_LPAREN function_call_prime OP_RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 174


state 146

    (49) function_call_prime -> COMA ID . function_call_prime
    (48) function_call_prime -> . ID function_call_prime
    (49) function_call_prime -> . COMA ID function_call_prime
    (50) function_call_prime -> . epsilon
    (90) epsilon -> .

    ID              shift and go to state 115
    COMA            shift and go to state 114
    OP_RPAREN       reduce using rule 90 (epsilon -> .)

    function_call_prime            shift and go to state 175
    epsilon                        shift and go to state 112

state 147

    (48) function_call_prime -> ID function_call_prime .

    OP_RPAREN       reduce using rule 48 (function_call_prime -> ID function_call_prime .)


state 148

    (41) increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .

    OP_RPAREN       reduce using rule 41 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    RCURLY_BRACKET  reduce using rule 41 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    ID              reduce using rule 41 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    IF              reduce using rule 41 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    PRINT           reduce using rule 41 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    FOR             reduce using rule 41 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    RETURN          reduce using rule 41 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)


state 149

    (36) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN . bloque
    (37) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN . bloque ELSE bloque
    (25) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 39

    bloque                         shift and go to state 176

state 150

    (52) condition_mega_expression -> condition_super_expression AND . condition_super_expression
    (54) condition_super_expression -> . expression OP_GREATER_THAN expression
    (55) condition_super_expression -> . expression OP_LESS_THAN expression
    (56) condition_super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (57) condition_super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (58) condition_super_expression -> . expression OP_EQUALS_TWO expression
    (59) condition_super_expression -> . expression OP_NOT_EQUALS expression
    (78) expression -> . term
    (79) expression -> . term OP_PLUS expression
    (80) expression -> . term OP_MINUS expression
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    term                           shift and go to state 102
    condition_super_expression     shift and go to state 177
    var_cte                        shift and go to state 101
    expression                     shift and go to state 119
    fact                           shift and go to state 105

state 151

    (53) condition_mega_expression -> condition_super_expression OR . condition_super_expression
    (54) condition_super_expression -> . expression OP_GREATER_THAN expression
    (55) condition_super_expression -> . expression OP_LESS_THAN expression
    (56) condition_super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (57) condition_super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (58) condition_super_expression -> . expression OP_EQUALS_TWO expression
    (59) condition_super_expression -> . expression OP_NOT_EQUALS expression
    (78) expression -> . term
    (79) expression -> . term OP_PLUS expression
    (80) expression -> . term OP_MINUS expression
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    term                           shift and go to state 102
    condition_super_expression     shift and go to state 178
    var_cte                        shift and go to state 101
    expression                     shift and go to state 119
    fact                           shift and go to state 105

state 152

    (57) condition_super_expression -> expression OP_LESS_EQUALS_THAN . expression
    (78) expression -> . term
    (79) expression -> . term OP_PLUS expression
    (80) expression -> . term OP_MINUS expression
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    term                           shift and go to state 102
    expression                     shift and go to state 179
    fact                           shift and go to state 105
    var_cte                        shift and go to state 101

state 153

    (54) condition_super_expression -> expression OP_GREATER_THAN . expression
    (78) expression -> . term
    (79) expression -> . term OP_PLUS expression
    (80) expression -> . term OP_MINUS expression
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    term                           shift and go to state 102
    expression                     shift and go to state 180
    fact                           shift and go to state 105
    var_cte                        shift and go to state 101

state 154

    (55) condition_super_expression -> expression OP_LESS_THAN . expression
    (78) expression -> . term
    (79) expression -> . term OP_PLUS expression
    (80) expression -> . term OP_MINUS expression
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    term                           shift and go to state 102
    expression                     shift and go to state 181
    fact                           shift and go to state 105
    var_cte                        shift and go to state 101

state 155

    (59) condition_super_expression -> expression OP_NOT_EQUALS . expression
    (78) expression -> . term
    (79) expression -> . term OP_PLUS expression
    (80) expression -> . term OP_MINUS expression
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    term                           shift and go to state 102
    expression                     shift and go to state 182
    fact                           shift and go to state 105
    var_cte                        shift and go to state 101

state 156

    (56) condition_super_expression -> expression OP_GREATER_EQUALS_THAN . expression
    (78) expression -> . term
    (79) expression -> . term OP_PLUS expression
    (80) expression -> . term OP_MINUS expression
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    term                           shift and go to state 102
    expression                     shift and go to state 183
    fact                           shift and go to state 105
    var_cte                        shift and go to state 101

state 157

    (58) condition_super_expression -> expression OP_EQUALS_TWO . expression
    (78) expression -> . term
    (79) expression -> . term OP_PLUS expression
    (80) expression -> . term OP_MINUS expression
    (81) term -> . fact
    (82) term -> . fact OP_DIVISION term
    (83) term -> . fact OP_TIMES term
    (84) fact -> . var_cte
    (85) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (86) var_cte -> . ID
    (87) var_cte -> . VAR_INT
    (88) var_cte -> . VAR_FLOAT
    (89) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 100
    ID              shift and go to state 77
    VAR_INT         shift and go to state 72
    VAR_FLOAT       shift and go to state 73
    VAR_STRING      shift and go to state 75

    term                           shift and go to state 102
    expression                     shift and go to state 184
    fact                           shift and go to state 105
    var_cte                        shift and go to state 101

state 158

    (38) printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .

    RCURLY_BRACKET  reduce using rule 38 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    ID              reduce using rule 38 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    IF              reduce using rule 38 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    PRINT           reduce using rule 38 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    FOR             reduce using rule 38 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    RETURN          reduce using rule 38 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)


state 159

    (69) mega_expression -> super_expression AND super_expression .

    OP_RPAREN       reduce using rule 69 (mega_expression -> super_expression AND super_expression .)
    OP_PLUS         reduce using rule 69 (mega_expression -> super_expression AND super_expression .)


state 160

    (70) mega_expression -> super_expression OR super_expression .

    OP_RPAREN       reduce using rule 70 (mega_expression -> super_expression OR super_expression .)
    OP_PLUS         reduce using rule 70 (mega_expression -> super_expression OR super_expression .)


state 161

    (85) fact -> OP_LPAREN mega_expression OP_RPAREN .

    OP_DIVISION     reduce using rule 85 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_TIMES        reduce using rule 85 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_PLUS         reduce using rule 85 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_MINUS        reduce using rule 85 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_GREATER_THAN reduce using rule 85 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_LESS_THAN    reduce using rule 85 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_GREATER_EQUALS_THAN reduce using rule 85 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_LESS_EQUALS_THAN reduce using rule 85 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_EQUALS_TWO   reduce using rule 85 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_NOT_EQUALS   reduce using rule 85 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_RPAREN       reduce using rule 85 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    AND             reduce using rule 85 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OR              reduce using rule 85 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    SEMICOLON       reduce using rule 85 (fact -> OP_LPAREN mega_expression OP_RPAREN .)


state 162

    (80) expression -> term OP_MINUS expression .

    OP_GREATER_THAN reduce using rule 80 (expression -> term OP_MINUS expression .)
    OP_LESS_THAN    reduce using rule 80 (expression -> term OP_MINUS expression .)
    OP_GREATER_EQUALS_THAN reduce using rule 80 (expression -> term OP_MINUS expression .)
    OP_LESS_EQUALS_THAN reduce using rule 80 (expression -> term OP_MINUS expression .)
    OP_EQUALS_TWO   reduce using rule 80 (expression -> term OP_MINUS expression .)
    OP_NOT_EQUALS   reduce using rule 80 (expression -> term OP_MINUS expression .)
    AND             reduce using rule 80 (expression -> term OP_MINUS expression .)
    OR              reduce using rule 80 (expression -> term OP_MINUS expression .)
    OP_RPAREN       reduce using rule 80 (expression -> term OP_MINUS expression .)
    OP_PLUS         reduce using rule 80 (expression -> term OP_MINUS expression .)
    SEMICOLON       reduce using rule 80 (expression -> term OP_MINUS expression .)


state 163

    (79) expression -> term OP_PLUS expression .

    OP_GREATER_THAN reduce using rule 79 (expression -> term OP_PLUS expression .)
    OP_LESS_THAN    reduce using rule 79 (expression -> term OP_PLUS expression .)
    OP_GREATER_EQUALS_THAN reduce using rule 79 (expression -> term OP_PLUS expression .)
    OP_LESS_EQUALS_THAN reduce using rule 79 (expression -> term OP_PLUS expression .)
    OP_EQUALS_TWO   reduce using rule 79 (expression -> term OP_PLUS expression .)
    OP_NOT_EQUALS   reduce using rule 79 (expression -> term OP_PLUS expression .)
    AND             reduce using rule 79 (expression -> term OP_PLUS expression .)
    OR              reduce using rule 79 (expression -> term OP_PLUS expression .)
    OP_RPAREN       reduce using rule 79 (expression -> term OP_PLUS expression .)
    OP_PLUS         reduce using rule 79 (expression -> term OP_PLUS expression .)
    SEMICOLON       reduce using rule 79 (expression -> term OP_PLUS expression .)


state 164

    (40) impression -> mega_expression OP_PLUS impression .

    OP_RPAREN       reduce using rule 40 (impression -> mega_expression OP_PLUS impression .)


state 165

    (75) super_expression -> expression OP_LESS_EQUALS_THAN expression .

    OP_PLUS         reduce using rule 75 (super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    OP_RPAREN       reduce using rule 75 (super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    AND             reduce using rule 75 (super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    OR              reduce using rule 75 (super_expression -> expression OP_LESS_EQUALS_THAN expression .)


state 166

    (72) super_expression -> expression OP_GREATER_THAN expression .

    OP_PLUS         reduce using rule 72 (super_expression -> expression OP_GREATER_THAN expression .)
    OP_RPAREN       reduce using rule 72 (super_expression -> expression OP_GREATER_THAN expression .)
    AND             reduce using rule 72 (super_expression -> expression OP_GREATER_THAN expression .)
    OR              reduce using rule 72 (super_expression -> expression OP_GREATER_THAN expression .)


state 167

    (73) super_expression -> expression OP_LESS_THAN expression .

    OP_PLUS         reduce using rule 73 (super_expression -> expression OP_LESS_THAN expression .)
    OP_RPAREN       reduce using rule 73 (super_expression -> expression OP_LESS_THAN expression .)
    AND             reduce using rule 73 (super_expression -> expression OP_LESS_THAN expression .)
    OR              reduce using rule 73 (super_expression -> expression OP_LESS_THAN expression .)


state 168

    (77) super_expression -> expression OP_NOT_EQUALS expression .

    OP_PLUS         reduce using rule 77 (super_expression -> expression OP_NOT_EQUALS expression .)
    OP_RPAREN       reduce using rule 77 (super_expression -> expression OP_NOT_EQUALS expression .)
    AND             reduce using rule 77 (super_expression -> expression OP_NOT_EQUALS expression .)
    OR              reduce using rule 77 (super_expression -> expression OP_NOT_EQUALS expression .)


state 169

    (74) super_expression -> expression OP_GREATER_EQUALS_THAN expression .

    OP_PLUS         reduce using rule 74 (super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    OP_RPAREN       reduce using rule 74 (super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    AND             reduce using rule 74 (super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    OR              reduce using rule 74 (super_expression -> expression OP_GREATER_EQUALS_THAN expression .)


state 170

    (76) super_expression -> expression OP_EQUALS_TWO expression .

    OP_PLUS         reduce using rule 76 (super_expression -> expression OP_EQUALS_TWO expression .)
    OP_RPAREN       reduce using rule 76 (super_expression -> expression OP_EQUALS_TWO expression .)
    AND             reduce using rule 76 (super_expression -> expression OP_EQUALS_TWO expression .)
    OR              reduce using rule 76 (super_expression -> expression OP_EQUALS_TWO expression .)


state 171

    (82) term -> fact OP_DIVISION term .

    OP_PLUS         reduce using rule 82 (term -> fact OP_DIVISION term .)
    OP_MINUS        reduce using rule 82 (term -> fact OP_DIVISION term .)
    AND             reduce using rule 82 (term -> fact OP_DIVISION term .)
    OR              reduce using rule 82 (term -> fact OP_DIVISION term .)
    OP_RPAREN       reduce using rule 82 (term -> fact OP_DIVISION term .)
    SEMICOLON       reduce using rule 82 (term -> fact OP_DIVISION term .)
    OP_GREATER_THAN reduce using rule 82 (term -> fact OP_DIVISION term .)
    OP_LESS_THAN    reduce using rule 82 (term -> fact OP_DIVISION term .)
    OP_GREATER_EQUALS_THAN reduce using rule 82 (term -> fact OP_DIVISION term .)
    OP_LESS_EQUALS_THAN reduce using rule 82 (term -> fact OP_DIVISION term .)
    OP_EQUALS_TWO   reduce using rule 82 (term -> fact OP_DIVISION term .)
    OP_NOT_EQUALS   reduce using rule 82 (term -> fact OP_DIVISION term .)


state 172

    (83) term -> fact OP_TIMES term .

    OP_PLUS         reduce using rule 83 (term -> fact OP_TIMES term .)
    OP_MINUS        reduce using rule 83 (term -> fact OP_TIMES term .)
    AND             reduce using rule 83 (term -> fact OP_TIMES term .)
    OR              reduce using rule 83 (term -> fact OP_TIMES term .)
    OP_RPAREN       reduce using rule 83 (term -> fact OP_TIMES term .)
    SEMICOLON       reduce using rule 83 (term -> fact OP_TIMES term .)
    OP_GREATER_THAN reduce using rule 83 (term -> fact OP_TIMES term .)
    OP_LESS_THAN    reduce using rule 83 (term -> fact OP_TIMES term .)
    OP_GREATER_EQUALS_THAN reduce using rule 83 (term -> fact OP_TIMES term .)
    OP_LESS_EQUALS_THAN reduce using rule 83 (term -> fact OP_TIMES term .)
    OP_EQUALS_TWO   reduce using rule 83 (term -> fact OP_TIMES term .)
    OP_NOT_EQUALS   reduce using rule 83 (term -> fact OP_TIMES term .)


state 173

    (45) for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON . increment OP_RPAREN bloque
    (41) increment -> . ID OP_PLUS_EQUALS single_expression SEMICOLON
    (42) increment -> . ID OP_MINUS_EQUALS single_expression SEMICOLON
    (43) increment -> . ID OP_PLUS OP_PLUS SEMICOLON
    (44) increment -> . ID OP_MINUS OP_MINUS SEMICOLON

    ID              shift and go to state 186

    increment                      shift and go to state 185

state 174

    (47) function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .

    RCURLY_BRACKET  reduce using rule 47 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    ID              reduce using rule 47 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    IF              reduce using rule 47 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    PRINT           reduce using rule 47 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    FOR             reduce using rule 47 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    RETURN          reduce using rule 47 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)


state 175

    (49) function_call_prime -> COMA ID function_call_prime .

    OP_RPAREN       reduce using rule 49 (function_call_prime -> COMA ID function_call_prime .)


state 176

    (36) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .
    (37) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque . ELSE bloque

    RCURLY_BRACKET  reduce using rule 36 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    ID              reduce using rule 36 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    IF              reduce using rule 36 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    PRINT           reduce using rule 36 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    FOR             reduce using rule 36 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    RETURN          reduce using rule 36 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    ELSE            shift and go to state 187


state 177

    (52) condition_mega_expression -> condition_super_expression AND condition_super_expression .

    OP_RPAREN       reduce using rule 52 (condition_mega_expression -> condition_super_expression AND condition_super_expression .)


state 178

    (53) condition_mega_expression -> condition_super_expression OR condition_super_expression .

    OP_RPAREN       reduce using rule 53 (condition_mega_expression -> condition_super_expression OR condition_super_expression .)


state 179

    (57) condition_super_expression -> expression OP_LESS_EQUALS_THAN expression .

    OP_RPAREN       reduce using rule 57 (condition_super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    SEMICOLON       reduce using rule 57 (condition_super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    AND             reduce using rule 57 (condition_super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    OR              reduce using rule 57 (condition_super_expression -> expression OP_LESS_EQUALS_THAN expression .)


state 180

    (54) condition_super_expression -> expression OP_GREATER_THAN expression .

    OP_RPAREN       reduce using rule 54 (condition_super_expression -> expression OP_GREATER_THAN expression .)
    SEMICOLON       reduce using rule 54 (condition_super_expression -> expression OP_GREATER_THAN expression .)
    AND             reduce using rule 54 (condition_super_expression -> expression OP_GREATER_THAN expression .)
    OR              reduce using rule 54 (condition_super_expression -> expression OP_GREATER_THAN expression .)


state 181

    (55) condition_super_expression -> expression OP_LESS_THAN expression .

    OP_RPAREN       reduce using rule 55 (condition_super_expression -> expression OP_LESS_THAN expression .)
    SEMICOLON       reduce using rule 55 (condition_super_expression -> expression OP_LESS_THAN expression .)
    AND             reduce using rule 55 (condition_super_expression -> expression OP_LESS_THAN expression .)
    OR              reduce using rule 55 (condition_super_expression -> expression OP_LESS_THAN expression .)


state 182

    (59) condition_super_expression -> expression OP_NOT_EQUALS expression .

    OP_RPAREN       reduce using rule 59 (condition_super_expression -> expression OP_NOT_EQUALS expression .)
    SEMICOLON       reduce using rule 59 (condition_super_expression -> expression OP_NOT_EQUALS expression .)
    AND             reduce using rule 59 (condition_super_expression -> expression OP_NOT_EQUALS expression .)
    OR              reduce using rule 59 (condition_super_expression -> expression OP_NOT_EQUALS expression .)


state 183

    (56) condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression .

    OP_RPAREN       reduce using rule 56 (condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    SEMICOLON       reduce using rule 56 (condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    AND             reduce using rule 56 (condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    OR              reduce using rule 56 (condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression .)


state 184

    (58) condition_super_expression -> expression OP_EQUALS_TWO expression .

    OP_RPAREN       reduce using rule 58 (condition_super_expression -> expression OP_EQUALS_TWO expression .)
    SEMICOLON       reduce using rule 58 (condition_super_expression -> expression OP_EQUALS_TWO expression .)
    AND             reduce using rule 58 (condition_super_expression -> expression OP_EQUALS_TWO expression .)
    OR              reduce using rule 58 (condition_super_expression -> expression OP_EQUALS_TWO expression .)


state 185

    (45) for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment . OP_RPAREN bloque

    OP_RPAREN       shift and go to state 188


state 186

    (41) increment -> ID . OP_PLUS_EQUALS single_expression SEMICOLON
    (42) increment -> ID . OP_MINUS_EQUALS single_expression SEMICOLON
    (43) increment -> ID . OP_PLUS OP_PLUS SEMICOLON
    (44) increment -> ID . OP_MINUS OP_MINUS SEMICOLON

    OP_PLUS_EQUALS  shift and go to state 87
    OP_MINUS_EQUALS shift and go to state 84
    OP_PLUS         shift and go to state 85
    OP_MINUS        shift and go to state 82


state 187

    (37) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE . bloque
    (25) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 39

    bloque                         shift and go to state 189

state 188

    (45) for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN . bloque
    (25) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 39

    bloque                         shift and go to state 190

state 189

    (37) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .

    RCURLY_BRACKET  reduce using rule 37 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    ID              reduce using rule 37 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    IF              reduce using rule 37 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    PRINT           reduce using rule 37 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    FOR             reduce using rule 37 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    RETURN          reduce using rule 37 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)


state 190

    (45) for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .

    RCURLY_BRACKET  reduce using rule 45 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    ID              reduce using rule 45 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    IF              reduce using rule 45 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    PRINT           reduce using rule 45 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    FOR             reduce using rule 45 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    RETURN          reduce using rule 45 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMA in state 29 resolved as shift
WARNING: shift/reduce conflict for COMA in state 30 resolved as shift
WARNING: shift/reduce conflict for COMA in state 37 resolved as shift
WARNING: shift/reduce conflict for OP_PLUS in state 102 resolved as shift
WARNING: reduce/reduce conflict in state 21 resolved using rule (vars_prime -> epsilon)
WARNING: rejected rule (vars_prime2 -> epsilon) in state 21
WARNING: Rule (vars_prime2 -> epsilon) is never reduced
