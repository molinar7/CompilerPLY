Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    VAR_BOOLEAN
    CARET
    QUOT_MARK
    VAR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID LCURLY_BRACKET vars function main_function RCURLY_BRACKET
Rule 2     vars -> type ID vars_prime SEMICOLON vars
Rule 3     vars -> epsilon
Rule 4     vars_prime -> OP_EQUALS var_cte vars_prime1
Rule 5     vars_prime -> vars_prime1
Rule 6     vars_prime -> epsilon
Rule 7     vars_prime1 -> COMA ID vars_prime2 vars_prime1
Rule 8     vars_prime1 -> epsilon
Rule 9     vars_prime2 -> OP_EQUALS var_cte
Rule 10    vars_prime2 -> epsilon
Rule 11    function -> FUNCTION type ID add_function_id OP_LPAREN parameters OP_RPAREN bloque function
Rule 12    function -> FUNCTION VOID ID add_function_id OP_LPAREN parameters OP_RPAREN bloque function
Rule 13    function -> epsilon
Rule 14    add_function_id -> epsilon
Rule 15    main_function -> MAIN add_function_id OP_LPAREN OP_RPAREN bloque
Rule 16    type -> INT
Rule 17    type -> FLOAT
Rule 18    type -> STRING
Rule 19    type -> BOOLEAN
Rule 20    parameters -> type ID parameters
Rule 21    parameters -> COMA type ID parameters
Rule 22    parameters -> epsilon
Rule 23    bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET
Rule 24    bloque_primo -> bloque_primo statement
Rule 25    bloque_primo -> epsilon
Rule 26    statement -> assigment
Rule 27    statement -> if
Rule 28    statement -> printer
Rule 29    statement -> increment
Rule 30    statement -> for
Rule 31    statement -> return
Rule 32    statement -> function_call
Rule 33    statement -> fun_esp
Rule 34    assigment -> ID OP_EQUALS single_expression SEMICOLON
Rule 35    if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque
Rule 36    if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque
Rule 37    printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON
Rule 38    impression -> mega_expression
Rule 39    impression -> mega_expression OP_PLUS impression
Rule 40    increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON
Rule 41    increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON
Rule 42    increment -> ID OP_PLUS OP_PLUS SEMICOLON
Rule 43    increment -> ID OP_MINUS OP_MINUS SEMICOLON
Rule 44    for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque
Rule 45    return -> RETURN single_expression SEMICOLON
Rule 46    function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON
Rule 47    function_call_prime -> ID function_call_prime
Rule 48    function_call_prime -> COMA ID function_call_prime
Rule 49    function_call_prime -> epsilon
Rule 50    condition_mega_expression -> condition_super_expression
Rule 51    condition_mega_expression -> condition_super_expression AND condition_super_expression
Rule 52    condition_mega_expression -> condition_super_expression OR condition_super_expression
Rule 53    condition_super_expression -> expression OP_GREATER_THAN expression
Rule 54    condition_super_expression -> expression OP_LESS_THAN expression
Rule 55    condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression
Rule 56    condition_super_expression -> expression OP_LESS_EQUALS_THAN expression
Rule 57    condition_super_expression -> expression OP_EQUALS_TWO expression
Rule 58    condition_super_expression -> expression OP_NOT_EQUALS expression
Rule 59    single_expression -> single_term
Rule 60    single_expression -> single_term OP_PLUS single_expression
Rule 61    single_expression -> single_term OP_MINUS single_expression
Rule 62    single_term -> single_fact
Rule 63    single_term -> single_fact OP_DIVISION single_term
Rule 64    single_term -> single_fact OP_TIMES single_term
Rule 65    single_fact -> var_cte
Rule 66    single_fact -> OP_LPAREN single_expression OP_RPAREN
Rule 67    mega_expression -> super_expression
Rule 68    mega_expression -> super_expression AND super_expression
Rule 69    mega_expression -> super_expression OR super_expression
Rule 70    super_expression -> expression
Rule 71    super_expression -> expression OP_GREATER_THAN expression
Rule 72    super_expression -> expression OP_LESS_THAN expression
Rule 73    super_expression -> expression OP_GREATER_EQUALS_THAN expression
Rule 74    super_expression -> expression OP_LESS_EQUALS_THAN expression
Rule 75    super_expression -> expression OP_EQUALS_TWO expression
Rule 76    super_expression -> expression OP_NOT_EQUALS expression
Rule 77    expression -> term
Rule 78    expression -> term OP_PLUS expression
Rule 79    expression -> term OP_MINUS expression
Rule 80    term -> fact
Rule 81    term -> fact OP_DIVISION term
Rule 82    term -> fact OP_TIMES term
Rule 83    fact -> var_cte
Rule 84    fact -> OP_LPAREN mega_expression OP_RPAREN
Rule 85    var_cte -> ID
Rule 86    var_cte -> VAR_INT
Rule 87    var_cte -> VAR_FLOAT
Rule 88    var_cte -> VAR_STRING
Rule 89    fun_esp -> figure_creation
Rule 90    figure_creation -> FIGURE ID OP_TWO_POINTS figure POSSESS bloque_figura
Rule 91    figure -> POINT
Rule 92    figure -> LINE
Rule 93    figure -> SQUARE
Rule 94    figure -> RECTANGLE
Rule 95    figure -> TRIANGLE
Rule 96    figure -> CIRCLE
Rule 97    bloque_figura -> LCURLY_BRACKET bloque_figura_primo RCURLY_BRACKET
Rule 98    bloque_figura_primo -> bloque_figura_primo figura_attr
Rule 99    bloque_figura_primo -> epsilon
Rule 100   figura_attr -> vector
Rule 101   figura_attr -> COLOR OP_TWO_POINTS ID SEMICOLON
Rule 102   figura_attr -> SIZE OP_TWO_POINTS single_expression SEMICOLON
Rule 103   vector -> VECTOR ID OP_TWO_POINTS OP_LPAREN single_expression COMA single_expression OP_RPAREN SEMICOLON
Rule 104   epsilon -> <empty>

Terminals, with rules where they appear

AND                  : 51 68
BOOLEAN              : 19
CARET                : 
CIRCLE               : 96
COLOR                : 101
COMA                 : 7 21 48 103
ELSE                 : 36
FIGURE               : 90
FLOAT                : 17
FOR                  : 44
FUNCTION             : 11 12
ID                   : 1 2 7 11 12 20 21 34 40 41 42 43 46 47 48 85 90 101 103
IF                   : 35 36
INT                  : 16
LCURLY_BRACKET       : 1 23 97
LINE                 : 92
MAIN                 : 15
OP_DIVISION          : 63 81
OP_EQUALS            : 4 9 34
OP_EQUALS_TWO        : 57 75
OP_GREATER_EQUALS_THAN : 55 73
OP_GREATER_THAN      : 53 71
OP_LESS_EQUALS_THAN  : 56 74
OP_LESS_THAN         : 54 72
OP_LPAREN            : 11 12 15 35 36 37 44 46 66 84 103
OP_MINUS             : 43 43 61 79
OP_MINUS_EQUALS      : 41
OP_NOT_EQUALS        : 58 76
OP_PLUS              : 39 42 42 60 78
OP_PLUS_EQUALS       : 40
OP_RPAREN            : 11 12 15 35 36 37 44 46 66 84 103
OP_TIMES             : 64 82
OP_TWO_POINTS        : 90 101 102 103
OR                   : 52 69
POINT                : 91
POSSESS              : 90
PRINT                : 37
PROGRAM              : 1
QUOT_MARK            : 
RCURLY_BRACKET       : 1 23 97
RECTANGLE            : 94
RETURN               : 45
SEMICOLON            : 2 34 37 40 41 42 43 44 45 46 101 102 103
SIZE                 : 102
SQUARE               : 93
STRING               : 18
TRIANGLE             : 95
VAR                  : 
VAR_BOOLEAN          : 
VAR_FLOAT            : 87
VAR_INT              : 86
VAR_STRING           : 88
VECTOR               : 103
VOID                 : 12
error                : 

Nonterminals, with rules where they appear

add_function_id      : 11 12 15
assigment            : 26 44
bloque               : 11 12 15 35 36 36 44
bloque_figura        : 90
bloque_figura_primo  : 97 98
bloque_primo         : 23 24
condition_mega_expression : 35 36
condition_super_expression : 44 50 51 51 52 52
epsilon              : 3 6 8 10 13 14 22 25 49 99
expression           : 53 53 54 54 55 55 56 56 57 57 58 58 70 71 71 72 72 73 73 74 74 75 75 76 76 78 79
fact                 : 80 81 82
figura_attr          : 98
figure               : 90
figure_creation      : 89
for                  : 30
fun_esp              : 33
function             : 1 11 12
function_call        : 32
function_call_prime  : 46 47 48
if                   : 27
impression           : 37 39
increment            : 29 44
main_function        : 1
mega_expression      : 38 39 84
parameters           : 11 12 20 21
printer              : 28
program              : 0
return               : 31
single_expression    : 34 40 41 45 60 61 66 102 103 103
single_fact          : 62 63 64
single_term          : 59 60 61 63 64
statement            : 24
super_expression     : 67 68 68 69 69
term                 : 77 78 79 81 82
type                 : 2 11 20 21
var_cte              : 4 9 65 83
vars                 : 1 2
vars_prime           : 2
vars_prime1          : 4 5 7
vars_prime2          : 7
vector               : 100

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID LCURLY_BRACKET vars function main_function RCURLY_BRACKET

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID LCURLY_BRACKET vars function main_function RCURLY_BRACKET

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . LCURLY_BRACKET vars function main_function RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 4


state 4

    (1) program -> PROGRAM ID LCURLY_BRACKET . vars function main_function RCURLY_BRACKET
    (2) vars -> . type ID vars_prime SEMICOLON vars
    (3) vars -> . epsilon
    (16) type -> . INT
    (17) type -> . FLOAT
    (18) type -> . STRING
    (19) type -> . BOOLEAN
    (104) epsilon -> .

    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    FUNCTION        reduce using rule 104 (epsilon -> .)
    MAIN            reduce using rule 104 (epsilon -> .)

    vars                           shift and go to state 5
    type                           shift and go to state 6
    epsilon                        shift and go to state 7

state 5

    (1) program -> PROGRAM ID LCURLY_BRACKET vars . function main_function RCURLY_BRACKET
    (11) function -> . FUNCTION type ID add_function_id OP_LPAREN parameters OP_RPAREN bloque function
    (12) function -> . FUNCTION VOID ID add_function_id OP_LPAREN parameters OP_RPAREN bloque function
    (13) function -> . epsilon
    (104) epsilon -> .

    FUNCTION        shift and go to state 13
    MAIN            reduce using rule 104 (epsilon -> .)

    function                       shift and go to state 12
    epsilon                        shift and go to state 14

state 6

    (2) vars -> type . ID vars_prime SEMICOLON vars

    ID              shift and go to state 15


state 7

    (3) vars -> epsilon .

    FUNCTION        reduce using rule 3 (vars -> epsilon .)
    MAIN            reduce using rule 3 (vars -> epsilon .)


state 8

    (16) type -> INT .

    ID              reduce using rule 16 (type -> INT .)


state 9

    (17) type -> FLOAT .

    ID              reduce using rule 17 (type -> FLOAT .)


state 10

    (18) type -> STRING .

    ID              reduce using rule 18 (type -> STRING .)


state 11

    (19) type -> BOOLEAN .

    ID              reduce using rule 19 (type -> BOOLEAN .)


state 12

    (1) program -> PROGRAM ID LCURLY_BRACKET vars function . main_function RCURLY_BRACKET
    (15) main_function -> . MAIN add_function_id OP_LPAREN OP_RPAREN bloque

    MAIN            shift and go to state 17

    main_function                  shift and go to state 16

state 13

    (11) function -> FUNCTION . type ID add_function_id OP_LPAREN parameters OP_RPAREN bloque function
    (12) function -> FUNCTION . VOID ID add_function_id OP_LPAREN parameters OP_RPAREN bloque function
    (16) type -> . INT
    (17) type -> . FLOAT
    (18) type -> . STRING
    (19) type -> . BOOLEAN

    VOID            shift and go to state 19
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11

    type                           shift and go to state 18

state 14

    (13) function -> epsilon .

    MAIN            reduce using rule 13 (function -> epsilon .)


state 15

    (2) vars -> type ID . vars_prime SEMICOLON vars
    (4) vars_prime -> . OP_EQUALS var_cte vars_prime1
    (5) vars_prime -> . vars_prime1
    (6) vars_prime -> . epsilon
    (7) vars_prime1 -> . COMA ID vars_prime2 vars_prime1
    (8) vars_prime1 -> . epsilon
    (104) epsilon -> .

    OP_EQUALS       shift and go to state 21
    COMA            shift and go to state 24
    SEMICOLON       reduce using rule 104 (epsilon -> .)

    vars_prime                     shift and go to state 20
    vars_prime1                    shift and go to state 22
    epsilon                        shift and go to state 23

state 16

    (1) program -> PROGRAM ID LCURLY_BRACKET vars function main_function . RCURLY_BRACKET

    RCURLY_BRACKET  shift and go to state 25


state 17

    (15) main_function -> MAIN . add_function_id OP_LPAREN OP_RPAREN bloque
    (14) add_function_id -> . epsilon
    (104) epsilon -> .

    OP_LPAREN       reduce using rule 104 (epsilon -> .)

    add_function_id                shift and go to state 26
    epsilon                        shift and go to state 27

state 18

    (11) function -> FUNCTION type . ID add_function_id OP_LPAREN parameters OP_RPAREN bloque function

    ID              shift and go to state 28


state 19

    (12) function -> FUNCTION VOID . ID add_function_id OP_LPAREN parameters OP_RPAREN bloque function

    ID              shift and go to state 29


state 20

    (2) vars -> type ID vars_prime . SEMICOLON vars

    SEMICOLON       shift and go to state 30


state 21

    (4) vars_prime -> OP_EQUALS . var_cte vars_prime1
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    var_cte                        shift and go to state 31

state 22

    (5) vars_prime -> vars_prime1 .

    SEMICOLON       reduce using rule 5 (vars_prime -> vars_prime1 .)


state 23

    (6) vars_prime -> epsilon .
    (8) vars_prime1 -> epsilon .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 6 (vars_prime -> epsilon .)
    SEMICOLON       reduce using rule 6 (vars_prime -> epsilon .)

  ! SEMICOLON       [ reduce using rule 8 (vars_prime1 -> epsilon .) ]


state 24

    (7) vars_prime1 -> COMA . ID vars_prime2 vars_prime1

    ID              shift and go to state 36


state 25

    (1) program -> PROGRAM ID LCURLY_BRACKET vars function main_function RCURLY_BRACKET .

    $end            reduce using rule 1 (program -> PROGRAM ID LCURLY_BRACKET vars function main_function RCURLY_BRACKET .)


state 26

    (15) main_function -> MAIN add_function_id . OP_LPAREN OP_RPAREN bloque

    OP_LPAREN       shift and go to state 37


state 27

    (14) add_function_id -> epsilon .

    OP_LPAREN       reduce using rule 14 (add_function_id -> epsilon .)


state 28

    (11) function -> FUNCTION type ID . add_function_id OP_LPAREN parameters OP_RPAREN bloque function
    (14) add_function_id -> . epsilon
    (104) epsilon -> .

    OP_LPAREN       reduce using rule 104 (epsilon -> .)

    add_function_id                shift and go to state 38
    epsilon                        shift and go to state 27

state 29

    (12) function -> FUNCTION VOID ID . add_function_id OP_LPAREN parameters OP_RPAREN bloque function
    (14) add_function_id -> . epsilon
    (104) epsilon -> .

    OP_LPAREN       reduce using rule 104 (epsilon -> .)

    add_function_id                shift and go to state 39
    epsilon                        shift and go to state 27

state 30

    (2) vars -> type ID vars_prime SEMICOLON . vars
    (2) vars -> . type ID vars_prime SEMICOLON vars
    (3) vars -> . epsilon
    (16) type -> . INT
    (17) type -> . FLOAT
    (18) type -> . STRING
    (19) type -> . BOOLEAN
    (104) epsilon -> .

    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    FUNCTION        reduce using rule 104 (epsilon -> .)
    MAIN            reduce using rule 104 (epsilon -> .)

    type                           shift and go to state 6
    vars                           shift and go to state 40
    epsilon                        shift and go to state 7

state 31

    (4) vars_prime -> OP_EQUALS var_cte . vars_prime1
    (7) vars_prime1 -> . COMA ID vars_prime2 vars_prime1
    (8) vars_prime1 -> . epsilon
    (104) epsilon -> .

    COMA            shift and go to state 24
    SEMICOLON       reduce using rule 104 (epsilon -> .)

    vars_prime1                    shift and go to state 41
    epsilon                        shift and go to state 42

state 32

    (85) var_cte -> ID .

    COMA            reduce using rule 85 (var_cte -> ID .)
    SEMICOLON       reduce using rule 85 (var_cte -> ID .)
    OP_DIVISION     reduce using rule 85 (var_cte -> ID .)
    OP_TIMES        reduce using rule 85 (var_cte -> ID .)
    OP_PLUS         reduce using rule 85 (var_cte -> ID .)
    OP_MINUS        reduce using rule 85 (var_cte -> ID .)
    OP_GREATER_THAN reduce using rule 85 (var_cte -> ID .)
    OP_LESS_THAN    reduce using rule 85 (var_cte -> ID .)
    OP_GREATER_EQUALS_THAN reduce using rule 85 (var_cte -> ID .)
    OP_LESS_EQUALS_THAN reduce using rule 85 (var_cte -> ID .)
    OP_EQUALS_TWO   reduce using rule 85 (var_cte -> ID .)
    OP_NOT_EQUALS   reduce using rule 85 (var_cte -> ID .)
    AND             reduce using rule 85 (var_cte -> ID .)
    OR              reduce using rule 85 (var_cte -> ID .)
    OP_RPAREN       reduce using rule 85 (var_cte -> ID .)


state 33

    (86) var_cte -> VAR_INT .

    COMA            reduce using rule 86 (var_cte -> VAR_INT .)
    SEMICOLON       reduce using rule 86 (var_cte -> VAR_INT .)
    OP_DIVISION     reduce using rule 86 (var_cte -> VAR_INT .)
    OP_TIMES        reduce using rule 86 (var_cte -> VAR_INT .)
    OP_PLUS         reduce using rule 86 (var_cte -> VAR_INT .)
    OP_MINUS        reduce using rule 86 (var_cte -> VAR_INT .)
    OP_GREATER_THAN reduce using rule 86 (var_cte -> VAR_INT .)
    OP_LESS_THAN    reduce using rule 86 (var_cte -> VAR_INT .)
    OP_GREATER_EQUALS_THAN reduce using rule 86 (var_cte -> VAR_INT .)
    OP_LESS_EQUALS_THAN reduce using rule 86 (var_cte -> VAR_INT .)
    OP_EQUALS_TWO   reduce using rule 86 (var_cte -> VAR_INT .)
    OP_NOT_EQUALS   reduce using rule 86 (var_cte -> VAR_INT .)
    AND             reduce using rule 86 (var_cte -> VAR_INT .)
    OR              reduce using rule 86 (var_cte -> VAR_INT .)
    OP_RPAREN       reduce using rule 86 (var_cte -> VAR_INT .)


state 34

    (87) var_cte -> VAR_FLOAT .

    COMA            reduce using rule 87 (var_cte -> VAR_FLOAT .)
    SEMICOLON       reduce using rule 87 (var_cte -> VAR_FLOAT .)
    OP_DIVISION     reduce using rule 87 (var_cte -> VAR_FLOAT .)
    OP_TIMES        reduce using rule 87 (var_cte -> VAR_FLOAT .)
    OP_PLUS         reduce using rule 87 (var_cte -> VAR_FLOAT .)
    OP_MINUS        reduce using rule 87 (var_cte -> VAR_FLOAT .)
    OP_GREATER_THAN reduce using rule 87 (var_cte -> VAR_FLOAT .)
    OP_LESS_THAN    reduce using rule 87 (var_cte -> VAR_FLOAT .)
    OP_GREATER_EQUALS_THAN reduce using rule 87 (var_cte -> VAR_FLOAT .)
    OP_LESS_EQUALS_THAN reduce using rule 87 (var_cte -> VAR_FLOAT .)
    OP_EQUALS_TWO   reduce using rule 87 (var_cte -> VAR_FLOAT .)
    OP_NOT_EQUALS   reduce using rule 87 (var_cte -> VAR_FLOAT .)
    AND             reduce using rule 87 (var_cte -> VAR_FLOAT .)
    OR              reduce using rule 87 (var_cte -> VAR_FLOAT .)
    OP_RPAREN       reduce using rule 87 (var_cte -> VAR_FLOAT .)


state 35

    (88) var_cte -> VAR_STRING .

    COMA            reduce using rule 88 (var_cte -> VAR_STRING .)
    SEMICOLON       reduce using rule 88 (var_cte -> VAR_STRING .)
    OP_DIVISION     reduce using rule 88 (var_cte -> VAR_STRING .)
    OP_TIMES        reduce using rule 88 (var_cte -> VAR_STRING .)
    OP_PLUS         reduce using rule 88 (var_cte -> VAR_STRING .)
    OP_MINUS        reduce using rule 88 (var_cte -> VAR_STRING .)
    OP_GREATER_THAN reduce using rule 88 (var_cte -> VAR_STRING .)
    OP_LESS_THAN    reduce using rule 88 (var_cte -> VAR_STRING .)
    OP_GREATER_EQUALS_THAN reduce using rule 88 (var_cte -> VAR_STRING .)
    OP_LESS_EQUALS_THAN reduce using rule 88 (var_cte -> VAR_STRING .)
    OP_EQUALS_TWO   reduce using rule 88 (var_cte -> VAR_STRING .)
    OP_NOT_EQUALS   reduce using rule 88 (var_cte -> VAR_STRING .)
    AND             reduce using rule 88 (var_cte -> VAR_STRING .)
    OR              reduce using rule 88 (var_cte -> VAR_STRING .)
    OP_RPAREN       reduce using rule 88 (var_cte -> VAR_STRING .)


state 36

    (7) vars_prime1 -> COMA ID . vars_prime2 vars_prime1
    (9) vars_prime2 -> . OP_EQUALS var_cte
    (10) vars_prime2 -> . epsilon
    (104) epsilon -> .

    OP_EQUALS       shift and go to state 44
    COMA            reduce using rule 104 (epsilon -> .)
    SEMICOLON       reduce using rule 104 (epsilon -> .)

    vars_prime2                    shift and go to state 43
    epsilon                        shift and go to state 45

state 37

    (15) main_function -> MAIN add_function_id OP_LPAREN . OP_RPAREN bloque

    OP_RPAREN       shift and go to state 46


state 38

    (11) function -> FUNCTION type ID add_function_id . OP_LPAREN parameters OP_RPAREN bloque function

    OP_LPAREN       shift and go to state 47


state 39

    (12) function -> FUNCTION VOID ID add_function_id . OP_LPAREN parameters OP_RPAREN bloque function

    OP_LPAREN       shift and go to state 48


state 40

    (2) vars -> type ID vars_prime SEMICOLON vars .

    FUNCTION        reduce using rule 2 (vars -> type ID vars_prime SEMICOLON vars .)
    MAIN            reduce using rule 2 (vars -> type ID vars_prime SEMICOLON vars .)


state 41

    (4) vars_prime -> OP_EQUALS var_cte vars_prime1 .

    SEMICOLON       reduce using rule 4 (vars_prime -> OP_EQUALS var_cte vars_prime1 .)


state 42

    (8) vars_prime1 -> epsilon .

    SEMICOLON       reduce using rule 8 (vars_prime1 -> epsilon .)


state 43

    (7) vars_prime1 -> COMA ID vars_prime2 . vars_prime1
    (7) vars_prime1 -> . COMA ID vars_prime2 vars_prime1
    (8) vars_prime1 -> . epsilon
    (104) epsilon -> .

    COMA            shift and go to state 24
    SEMICOLON       reduce using rule 104 (epsilon -> .)

    vars_prime1                    shift and go to state 49
    epsilon                        shift and go to state 42

state 44

    (9) vars_prime2 -> OP_EQUALS . var_cte
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    var_cte                        shift and go to state 50

state 45

    (10) vars_prime2 -> epsilon .

    COMA            reduce using rule 10 (vars_prime2 -> epsilon .)
    SEMICOLON       reduce using rule 10 (vars_prime2 -> epsilon .)


state 46

    (15) main_function -> MAIN add_function_id OP_LPAREN OP_RPAREN . bloque
    (23) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 52

    bloque                         shift and go to state 51

state 47

    (11) function -> FUNCTION type ID add_function_id OP_LPAREN . parameters OP_RPAREN bloque function
    (20) parameters -> . type ID parameters
    (21) parameters -> . COMA type ID parameters
    (22) parameters -> . epsilon
    (16) type -> . INT
    (17) type -> . FLOAT
    (18) type -> . STRING
    (19) type -> . BOOLEAN
    (104) epsilon -> .

    COMA            shift and go to state 55
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    OP_RPAREN       reduce using rule 104 (epsilon -> .)

    type                           shift and go to state 53
    parameters                     shift and go to state 54
    epsilon                        shift and go to state 56

state 48

    (12) function -> FUNCTION VOID ID add_function_id OP_LPAREN . parameters OP_RPAREN bloque function
    (20) parameters -> . type ID parameters
    (21) parameters -> . COMA type ID parameters
    (22) parameters -> . epsilon
    (16) type -> . INT
    (17) type -> . FLOAT
    (18) type -> . STRING
    (19) type -> . BOOLEAN
    (104) epsilon -> .

    COMA            shift and go to state 55
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    OP_RPAREN       reduce using rule 104 (epsilon -> .)

    parameters                     shift and go to state 57
    type                           shift and go to state 53
    epsilon                        shift and go to state 56

state 49

    (7) vars_prime1 -> COMA ID vars_prime2 vars_prime1 .

    SEMICOLON       reduce using rule 7 (vars_prime1 -> COMA ID vars_prime2 vars_prime1 .)


state 50

    (9) vars_prime2 -> OP_EQUALS var_cte .

    COMA            reduce using rule 9 (vars_prime2 -> OP_EQUALS var_cte .)
    SEMICOLON       reduce using rule 9 (vars_prime2 -> OP_EQUALS var_cte .)


state 51

    (15) main_function -> MAIN add_function_id OP_LPAREN OP_RPAREN bloque .

    RCURLY_BRACKET  reduce using rule 15 (main_function -> MAIN add_function_id OP_LPAREN OP_RPAREN bloque .)


state 52

    (23) bloque -> LCURLY_BRACKET . bloque_primo RCURLY_BRACKET
    (24) bloque_primo -> . bloque_primo statement
    (25) bloque_primo -> . epsilon
    (104) epsilon -> .

    RCURLY_BRACKET  reduce using rule 104 (epsilon -> .)
    ID              reduce using rule 104 (epsilon -> .)
    IF              reduce using rule 104 (epsilon -> .)
    PRINT           reduce using rule 104 (epsilon -> .)
    FOR             reduce using rule 104 (epsilon -> .)
    RETURN          reduce using rule 104 (epsilon -> .)
    FIGURE          reduce using rule 104 (epsilon -> .)

    bloque_primo                   shift and go to state 58
    epsilon                        shift and go to state 59

state 53

    (20) parameters -> type . ID parameters

    ID              shift and go to state 60


state 54

    (11) function -> FUNCTION type ID add_function_id OP_LPAREN parameters . OP_RPAREN bloque function

    OP_RPAREN       shift and go to state 61


state 55

    (21) parameters -> COMA . type ID parameters
    (16) type -> . INT
    (17) type -> . FLOAT
    (18) type -> . STRING
    (19) type -> . BOOLEAN

    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11

    type                           shift and go to state 62

state 56

    (22) parameters -> epsilon .

    OP_RPAREN       reduce using rule 22 (parameters -> epsilon .)


state 57

    (12) function -> FUNCTION VOID ID add_function_id OP_LPAREN parameters . OP_RPAREN bloque function

    OP_RPAREN       shift and go to state 63


state 58

    (23) bloque -> LCURLY_BRACKET bloque_primo . RCURLY_BRACKET
    (24) bloque_primo -> bloque_primo . statement
    (26) statement -> . assigment
    (27) statement -> . if
    (28) statement -> . printer
    (29) statement -> . increment
    (30) statement -> . for
    (31) statement -> . return
    (32) statement -> . function_call
    (33) statement -> . fun_esp
    (34) assigment -> . ID OP_EQUALS single_expression SEMICOLON
    (35) if -> . IF OP_LPAREN condition_mega_expression OP_RPAREN bloque
    (36) if -> . IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque
    (37) printer -> . PRINT OP_LPAREN impression OP_RPAREN SEMICOLON
    (40) increment -> . ID OP_PLUS_EQUALS single_expression SEMICOLON
    (41) increment -> . ID OP_MINUS_EQUALS single_expression SEMICOLON
    (42) increment -> . ID OP_PLUS OP_PLUS SEMICOLON
    (43) increment -> . ID OP_MINUS OP_MINUS SEMICOLON
    (44) for -> . FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque
    (45) return -> . RETURN single_expression SEMICOLON
    (46) function_call -> . ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON
    (89) fun_esp -> . figure_creation
    (90) figure_creation -> . FIGURE ID OP_TWO_POINTS figure POSSESS bloque_figura

    RCURLY_BRACKET  shift and go to state 64
    ID              shift and go to state 74
    IF              shift and go to state 75
    PRINT           shift and go to state 76
    FOR             shift and go to state 77
    RETURN          shift and go to state 78
    FIGURE          shift and go to state 80

    statement                      shift and go to state 65
    assigment                      shift and go to state 66
    if                             shift and go to state 67
    printer                        shift and go to state 68
    increment                      shift and go to state 69
    for                            shift and go to state 70
    return                         shift and go to state 71
    function_call                  shift and go to state 72
    fun_esp                        shift and go to state 73
    figure_creation                shift and go to state 79

state 59

    (25) bloque_primo -> epsilon .

    RCURLY_BRACKET  reduce using rule 25 (bloque_primo -> epsilon .)
    ID              reduce using rule 25 (bloque_primo -> epsilon .)
    IF              reduce using rule 25 (bloque_primo -> epsilon .)
    PRINT           reduce using rule 25 (bloque_primo -> epsilon .)
    FOR             reduce using rule 25 (bloque_primo -> epsilon .)
    RETURN          reduce using rule 25 (bloque_primo -> epsilon .)
    FIGURE          reduce using rule 25 (bloque_primo -> epsilon .)


state 60

    (20) parameters -> type ID . parameters
    (20) parameters -> . type ID parameters
    (21) parameters -> . COMA type ID parameters
    (22) parameters -> . epsilon
    (16) type -> . INT
    (17) type -> . FLOAT
    (18) type -> . STRING
    (19) type -> . BOOLEAN
    (104) epsilon -> .

    COMA            shift and go to state 55
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    OP_RPAREN       reduce using rule 104 (epsilon -> .)

    type                           shift and go to state 53
    parameters                     shift and go to state 81
    epsilon                        shift and go to state 56

state 61

    (11) function -> FUNCTION type ID add_function_id OP_LPAREN parameters OP_RPAREN . bloque function
    (23) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 52

    bloque                         shift and go to state 82

state 62

    (21) parameters -> COMA type . ID parameters

    ID              shift and go to state 83


state 63

    (12) function -> FUNCTION VOID ID add_function_id OP_LPAREN parameters OP_RPAREN . bloque function
    (23) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 52

    bloque                         shift and go to state 84

state 64

    (23) bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .

    RCURLY_BRACKET  reduce using rule 23 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    FUNCTION        reduce using rule 23 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    MAIN            reduce using rule 23 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    ELSE            reduce using rule 23 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    ID              reduce using rule 23 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    IF              reduce using rule 23 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    PRINT           reduce using rule 23 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    FOR             reduce using rule 23 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    RETURN          reduce using rule 23 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    FIGURE          reduce using rule 23 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)


state 65

    (24) bloque_primo -> bloque_primo statement .

    RCURLY_BRACKET  reduce using rule 24 (bloque_primo -> bloque_primo statement .)
    ID              reduce using rule 24 (bloque_primo -> bloque_primo statement .)
    IF              reduce using rule 24 (bloque_primo -> bloque_primo statement .)
    PRINT           reduce using rule 24 (bloque_primo -> bloque_primo statement .)
    FOR             reduce using rule 24 (bloque_primo -> bloque_primo statement .)
    RETURN          reduce using rule 24 (bloque_primo -> bloque_primo statement .)
    FIGURE          reduce using rule 24 (bloque_primo -> bloque_primo statement .)


state 66

    (26) statement -> assigment .

    RCURLY_BRACKET  reduce using rule 26 (statement -> assigment .)
    ID              reduce using rule 26 (statement -> assigment .)
    IF              reduce using rule 26 (statement -> assigment .)
    PRINT           reduce using rule 26 (statement -> assigment .)
    FOR             reduce using rule 26 (statement -> assigment .)
    RETURN          reduce using rule 26 (statement -> assigment .)
    FIGURE          reduce using rule 26 (statement -> assigment .)


state 67

    (27) statement -> if .

    RCURLY_BRACKET  reduce using rule 27 (statement -> if .)
    ID              reduce using rule 27 (statement -> if .)
    IF              reduce using rule 27 (statement -> if .)
    PRINT           reduce using rule 27 (statement -> if .)
    FOR             reduce using rule 27 (statement -> if .)
    RETURN          reduce using rule 27 (statement -> if .)
    FIGURE          reduce using rule 27 (statement -> if .)


state 68

    (28) statement -> printer .

    RCURLY_BRACKET  reduce using rule 28 (statement -> printer .)
    ID              reduce using rule 28 (statement -> printer .)
    IF              reduce using rule 28 (statement -> printer .)
    PRINT           reduce using rule 28 (statement -> printer .)
    FOR             reduce using rule 28 (statement -> printer .)
    RETURN          reduce using rule 28 (statement -> printer .)
    FIGURE          reduce using rule 28 (statement -> printer .)


state 69

    (29) statement -> increment .

    RCURLY_BRACKET  reduce using rule 29 (statement -> increment .)
    ID              reduce using rule 29 (statement -> increment .)
    IF              reduce using rule 29 (statement -> increment .)
    PRINT           reduce using rule 29 (statement -> increment .)
    FOR             reduce using rule 29 (statement -> increment .)
    RETURN          reduce using rule 29 (statement -> increment .)
    FIGURE          reduce using rule 29 (statement -> increment .)


state 70

    (30) statement -> for .

    RCURLY_BRACKET  reduce using rule 30 (statement -> for .)
    ID              reduce using rule 30 (statement -> for .)
    IF              reduce using rule 30 (statement -> for .)
    PRINT           reduce using rule 30 (statement -> for .)
    FOR             reduce using rule 30 (statement -> for .)
    RETURN          reduce using rule 30 (statement -> for .)
    FIGURE          reduce using rule 30 (statement -> for .)


state 71

    (31) statement -> return .

    RCURLY_BRACKET  reduce using rule 31 (statement -> return .)
    ID              reduce using rule 31 (statement -> return .)
    IF              reduce using rule 31 (statement -> return .)
    PRINT           reduce using rule 31 (statement -> return .)
    FOR             reduce using rule 31 (statement -> return .)
    RETURN          reduce using rule 31 (statement -> return .)
    FIGURE          reduce using rule 31 (statement -> return .)


state 72

    (32) statement -> function_call .

    RCURLY_BRACKET  reduce using rule 32 (statement -> function_call .)
    ID              reduce using rule 32 (statement -> function_call .)
    IF              reduce using rule 32 (statement -> function_call .)
    PRINT           reduce using rule 32 (statement -> function_call .)
    FOR             reduce using rule 32 (statement -> function_call .)
    RETURN          reduce using rule 32 (statement -> function_call .)
    FIGURE          reduce using rule 32 (statement -> function_call .)


state 73

    (33) statement -> fun_esp .

    RCURLY_BRACKET  reduce using rule 33 (statement -> fun_esp .)
    ID              reduce using rule 33 (statement -> fun_esp .)
    IF              reduce using rule 33 (statement -> fun_esp .)
    PRINT           reduce using rule 33 (statement -> fun_esp .)
    FOR             reduce using rule 33 (statement -> fun_esp .)
    RETURN          reduce using rule 33 (statement -> fun_esp .)
    FIGURE          reduce using rule 33 (statement -> fun_esp .)


state 74

    (34) assigment -> ID . OP_EQUALS single_expression SEMICOLON
    (40) increment -> ID . OP_PLUS_EQUALS single_expression SEMICOLON
    (41) increment -> ID . OP_MINUS_EQUALS single_expression SEMICOLON
    (42) increment -> ID . OP_PLUS OP_PLUS SEMICOLON
    (43) increment -> ID . OP_MINUS OP_MINUS SEMICOLON
    (46) function_call -> ID . OP_LPAREN function_call_prime OP_RPAREN SEMICOLON

    OP_EQUALS       shift and go to state 85
    OP_PLUS_EQUALS  shift and go to state 86
    OP_MINUS_EQUALS shift and go to state 87
    OP_PLUS         shift and go to state 88
    OP_MINUS        shift and go to state 89
    OP_LPAREN       shift and go to state 90


state 75

    (35) if -> IF . OP_LPAREN condition_mega_expression OP_RPAREN bloque
    (36) if -> IF . OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque

    OP_LPAREN       shift and go to state 91


state 76

    (37) printer -> PRINT . OP_LPAREN impression OP_RPAREN SEMICOLON

    OP_LPAREN       shift and go to state 92


state 77

    (44) for -> FOR . OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque

    OP_LPAREN       shift and go to state 93


state 78

    (45) return -> RETURN . single_expression SEMICOLON
    (59) single_expression -> . single_term
    (60) single_expression -> . single_term OP_PLUS single_expression
    (61) single_expression -> . single_term OP_MINUS single_expression
    (62) single_term -> . single_fact
    (63) single_term -> . single_fact OP_DIVISION single_term
    (64) single_term -> . single_fact OP_TIMES single_term
    (65) single_fact -> . var_cte
    (66) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 98
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    single_expression              shift and go to state 94
    single_term                    shift and go to state 95
    single_fact                    shift and go to state 96
    var_cte                        shift and go to state 97

state 79

    (89) fun_esp -> figure_creation .

    RCURLY_BRACKET  reduce using rule 89 (fun_esp -> figure_creation .)
    ID              reduce using rule 89 (fun_esp -> figure_creation .)
    IF              reduce using rule 89 (fun_esp -> figure_creation .)
    PRINT           reduce using rule 89 (fun_esp -> figure_creation .)
    FOR             reduce using rule 89 (fun_esp -> figure_creation .)
    RETURN          reduce using rule 89 (fun_esp -> figure_creation .)
    FIGURE          reduce using rule 89 (fun_esp -> figure_creation .)


state 80

    (90) figure_creation -> FIGURE . ID OP_TWO_POINTS figure POSSESS bloque_figura

    ID              shift and go to state 99


state 81

    (20) parameters -> type ID parameters .

    OP_RPAREN       reduce using rule 20 (parameters -> type ID parameters .)


state 82

    (11) function -> FUNCTION type ID add_function_id OP_LPAREN parameters OP_RPAREN bloque . function
    (11) function -> . FUNCTION type ID add_function_id OP_LPAREN parameters OP_RPAREN bloque function
    (12) function -> . FUNCTION VOID ID add_function_id OP_LPAREN parameters OP_RPAREN bloque function
    (13) function -> . epsilon
    (104) epsilon -> .

    FUNCTION        shift and go to state 13
    MAIN            reduce using rule 104 (epsilon -> .)

    function                       shift and go to state 100
    epsilon                        shift and go to state 14

state 83

    (21) parameters -> COMA type ID . parameters
    (20) parameters -> . type ID parameters
    (21) parameters -> . COMA type ID parameters
    (22) parameters -> . epsilon
    (16) type -> . INT
    (17) type -> . FLOAT
    (18) type -> . STRING
    (19) type -> . BOOLEAN
    (104) epsilon -> .

    COMA            shift and go to state 55
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    OP_RPAREN       reduce using rule 104 (epsilon -> .)

    type                           shift and go to state 53
    parameters                     shift and go to state 101
    epsilon                        shift and go to state 56

state 84

    (12) function -> FUNCTION VOID ID add_function_id OP_LPAREN parameters OP_RPAREN bloque . function
    (11) function -> . FUNCTION type ID add_function_id OP_LPAREN parameters OP_RPAREN bloque function
    (12) function -> . FUNCTION VOID ID add_function_id OP_LPAREN parameters OP_RPAREN bloque function
    (13) function -> . epsilon
    (104) epsilon -> .

    FUNCTION        shift and go to state 13
    MAIN            reduce using rule 104 (epsilon -> .)

    function                       shift and go to state 102
    epsilon                        shift and go to state 14

state 85

    (34) assigment -> ID OP_EQUALS . single_expression SEMICOLON
    (59) single_expression -> . single_term
    (60) single_expression -> . single_term OP_PLUS single_expression
    (61) single_expression -> . single_term OP_MINUS single_expression
    (62) single_term -> . single_fact
    (63) single_term -> . single_fact OP_DIVISION single_term
    (64) single_term -> . single_fact OP_TIMES single_term
    (65) single_fact -> . var_cte
    (66) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 98
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    single_expression              shift and go to state 103
    single_term                    shift and go to state 95
    single_fact                    shift and go to state 96
    var_cte                        shift and go to state 97

state 86

    (40) increment -> ID OP_PLUS_EQUALS . single_expression SEMICOLON
    (59) single_expression -> . single_term
    (60) single_expression -> . single_term OP_PLUS single_expression
    (61) single_expression -> . single_term OP_MINUS single_expression
    (62) single_term -> . single_fact
    (63) single_term -> . single_fact OP_DIVISION single_term
    (64) single_term -> . single_fact OP_TIMES single_term
    (65) single_fact -> . var_cte
    (66) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 98
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    single_expression              shift and go to state 104
    single_term                    shift and go to state 95
    single_fact                    shift and go to state 96
    var_cte                        shift and go to state 97

state 87

    (41) increment -> ID OP_MINUS_EQUALS . single_expression SEMICOLON
    (59) single_expression -> . single_term
    (60) single_expression -> . single_term OP_PLUS single_expression
    (61) single_expression -> . single_term OP_MINUS single_expression
    (62) single_term -> . single_fact
    (63) single_term -> . single_fact OP_DIVISION single_term
    (64) single_term -> . single_fact OP_TIMES single_term
    (65) single_fact -> . var_cte
    (66) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 98
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    single_expression              shift and go to state 105
    single_term                    shift and go to state 95
    single_fact                    shift and go to state 96
    var_cte                        shift and go to state 97

state 88

    (42) increment -> ID OP_PLUS . OP_PLUS SEMICOLON

    OP_PLUS         shift and go to state 106


state 89

    (43) increment -> ID OP_MINUS . OP_MINUS SEMICOLON

    OP_MINUS        shift and go to state 107


state 90

    (46) function_call -> ID OP_LPAREN . function_call_prime OP_RPAREN SEMICOLON
    (47) function_call_prime -> . ID function_call_prime
    (48) function_call_prime -> . COMA ID function_call_prime
    (49) function_call_prime -> . epsilon
    (104) epsilon -> .

    ID              shift and go to state 108
    COMA            shift and go to state 110
    OP_RPAREN       reduce using rule 104 (epsilon -> .)

    function_call_prime            shift and go to state 109
    epsilon                        shift and go to state 111

state 91

    (35) if -> IF OP_LPAREN . condition_mega_expression OP_RPAREN bloque
    (36) if -> IF OP_LPAREN . condition_mega_expression OP_RPAREN bloque ELSE bloque
    (50) condition_mega_expression -> . condition_super_expression
    (51) condition_mega_expression -> . condition_super_expression AND condition_super_expression
    (52) condition_mega_expression -> . condition_super_expression OR condition_super_expression
    (53) condition_super_expression -> . expression OP_GREATER_THAN expression
    (54) condition_super_expression -> . expression OP_LESS_THAN expression
    (55) condition_super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (56) condition_super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (57) condition_super_expression -> . expression OP_EQUALS_TWO expression
    (58) condition_super_expression -> . expression OP_NOT_EQUALS expression
    (77) expression -> . term
    (78) expression -> . term OP_PLUS expression
    (79) expression -> . term OP_MINUS expression
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    condition_mega_expression      shift and go to state 113
    condition_super_expression     shift and go to state 114
    expression                     shift and go to state 115
    term                           shift and go to state 116
    fact                           shift and go to state 117
    var_cte                        shift and go to state 118

state 92

    (37) printer -> PRINT OP_LPAREN . impression OP_RPAREN SEMICOLON
    (38) impression -> . mega_expression
    (39) impression -> . mega_expression OP_PLUS impression
    (67) mega_expression -> . super_expression
    (68) mega_expression -> . super_expression AND super_expression
    (69) mega_expression -> . super_expression OR super_expression
    (70) super_expression -> . expression
    (71) super_expression -> . expression OP_GREATER_THAN expression
    (72) super_expression -> . expression OP_LESS_THAN expression
    (73) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (74) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (75) super_expression -> . expression OP_EQUALS_TWO expression
    (76) super_expression -> . expression OP_NOT_EQUALS expression
    (77) expression -> . term
    (78) expression -> . term OP_PLUS expression
    (79) expression -> . term OP_MINUS expression
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    impression                     shift and go to state 119
    mega_expression                shift and go to state 120
    super_expression               shift and go to state 121
    expression                     shift and go to state 122
    term                           shift and go to state 116
    fact                           shift and go to state 117
    var_cte                        shift and go to state 118

state 93

    (44) for -> FOR OP_LPAREN . assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque
    (34) assigment -> . ID OP_EQUALS single_expression SEMICOLON

    ID              shift and go to state 124

    assigment                      shift and go to state 123

state 94

    (45) return -> RETURN single_expression . SEMICOLON

    SEMICOLON       shift and go to state 125


state 95

    (59) single_expression -> single_term .
    (60) single_expression -> single_term . OP_PLUS single_expression
    (61) single_expression -> single_term . OP_MINUS single_expression

    SEMICOLON       reduce using rule 59 (single_expression -> single_term .)
    OP_RPAREN       reduce using rule 59 (single_expression -> single_term .)
    COMA            reduce using rule 59 (single_expression -> single_term .)
    OP_PLUS         shift and go to state 126
    OP_MINUS        shift and go to state 127


state 96

    (62) single_term -> single_fact .
    (63) single_term -> single_fact . OP_DIVISION single_term
    (64) single_term -> single_fact . OP_TIMES single_term

    OP_PLUS         reduce using rule 62 (single_term -> single_fact .)
    OP_MINUS        reduce using rule 62 (single_term -> single_fact .)
    SEMICOLON       reduce using rule 62 (single_term -> single_fact .)
    OP_RPAREN       reduce using rule 62 (single_term -> single_fact .)
    COMA            reduce using rule 62 (single_term -> single_fact .)
    OP_DIVISION     shift and go to state 128
    OP_TIMES        shift and go to state 129


state 97

    (65) single_fact -> var_cte .

    OP_DIVISION     reduce using rule 65 (single_fact -> var_cte .)
    OP_TIMES        reduce using rule 65 (single_fact -> var_cte .)
    OP_PLUS         reduce using rule 65 (single_fact -> var_cte .)
    OP_MINUS        reduce using rule 65 (single_fact -> var_cte .)
    SEMICOLON       reduce using rule 65 (single_fact -> var_cte .)
    OP_RPAREN       reduce using rule 65 (single_fact -> var_cte .)
    COMA            reduce using rule 65 (single_fact -> var_cte .)


state 98

    (66) single_fact -> OP_LPAREN . single_expression OP_RPAREN
    (59) single_expression -> . single_term
    (60) single_expression -> . single_term OP_PLUS single_expression
    (61) single_expression -> . single_term OP_MINUS single_expression
    (62) single_term -> . single_fact
    (63) single_term -> . single_fact OP_DIVISION single_term
    (64) single_term -> . single_fact OP_TIMES single_term
    (65) single_fact -> . var_cte
    (66) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 98
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    single_expression              shift and go to state 130
    single_term                    shift and go to state 95
    single_fact                    shift and go to state 96
    var_cte                        shift and go to state 97

state 99

    (90) figure_creation -> FIGURE ID . OP_TWO_POINTS figure POSSESS bloque_figura

    OP_TWO_POINTS   shift and go to state 131


state 100

    (11) function -> FUNCTION type ID add_function_id OP_LPAREN parameters OP_RPAREN bloque function .

    MAIN            reduce using rule 11 (function -> FUNCTION type ID add_function_id OP_LPAREN parameters OP_RPAREN bloque function .)


state 101

    (21) parameters -> COMA type ID parameters .

    OP_RPAREN       reduce using rule 21 (parameters -> COMA type ID parameters .)


state 102

    (12) function -> FUNCTION VOID ID add_function_id OP_LPAREN parameters OP_RPAREN bloque function .

    MAIN            reduce using rule 12 (function -> FUNCTION VOID ID add_function_id OP_LPAREN parameters OP_RPAREN bloque function .)


state 103

    (34) assigment -> ID OP_EQUALS single_expression . SEMICOLON

    SEMICOLON       shift and go to state 132


state 104

    (40) increment -> ID OP_PLUS_EQUALS single_expression . SEMICOLON

    SEMICOLON       shift and go to state 133


state 105

    (41) increment -> ID OP_MINUS_EQUALS single_expression . SEMICOLON

    SEMICOLON       shift and go to state 134


state 106

    (42) increment -> ID OP_PLUS OP_PLUS . SEMICOLON

    SEMICOLON       shift and go to state 135


state 107

    (43) increment -> ID OP_MINUS OP_MINUS . SEMICOLON

    SEMICOLON       shift and go to state 136


state 108

    (47) function_call_prime -> ID . function_call_prime
    (47) function_call_prime -> . ID function_call_prime
    (48) function_call_prime -> . COMA ID function_call_prime
    (49) function_call_prime -> . epsilon
    (104) epsilon -> .

    ID              shift and go to state 108
    COMA            shift and go to state 110
    OP_RPAREN       reduce using rule 104 (epsilon -> .)

    function_call_prime            shift and go to state 137
    epsilon                        shift and go to state 111

state 109

    (46) function_call -> ID OP_LPAREN function_call_prime . OP_RPAREN SEMICOLON

    OP_RPAREN       shift and go to state 138


state 110

    (48) function_call_prime -> COMA . ID function_call_prime

    ID              shift and go to state 139


state 111

    (49) function_call_prime -> epsilon .

    OP_RPAREN       reduce using rule 49 (function_call_prime -> epsilon .)


state 112

    (84) fact -> OP_LPAREN . mega_expression OP_RPAREN
    (67) mega_expression -> . super_expression
    (68) mega_expression -> . super_expression AND super_expression
    (69) mega_expression -> . super_expression OR super_expression
    (70) super_expression -> . expression
    (71) super_expression -> . expression OP_GREATER_THAN expression
    (72) super_expression -> . expression OP_LESS_THAN expression
    (73) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (74) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (75) super_expression -> . expression OP_EQUALS_TWO expression
    (76) super_expression -> . expression OP_NOT_EQUALS expression
    (77) expression -> . term
    (78) expression -> . term OP_PLUS expression
    (79) expression -> . term OP_MINUS expression
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    mega_expression                shift and go to state 140
    super_expression               shift and go to state 121
    expression                     shift and go to state 122
    term                           shift and go to state 116
    fact                           shift and go to state 117
    var_cte                        shift and go to state 118

state 113

    (35) if -> IF OP_LPAREN condition_mega_expression . OP_RPAREN bloque
    (36) if -> IF OP_LPAREN condition_mega_expression . OP_RPAREN bloque ELSE bloque

    OP_RPAREN       shift and go to state 141


state 114

    (50) condition_mega_expression -> condition_super_expression .
    (51) condition_mega_expression -> condition_super_expression . AND condition_super_expression
    (52) condition_mega_expression -> condition_super_expression . OR condition_super_expression

    OP_RPAREN       reduce using rule 50 (condition_mega_expression -> condition_super_expression .)
    AND             shift and go to state 142
    OR              shift and go to state 143


state 115

    (53) condition_super_expression -> expression . OP_GREATER_THAN expression
    (54) condition_super_expression -> expression . OP_LESS_THAN expression
    (55) condition_super_expression -> expression . OP_GREATER_EQUALS_THAN expression
    (56) condition_super_expression -> expression . OP_LESS_EQUALS_THAN expression
    (57) condition_super_expression -> expression . OP_EQUALS_TWO expression
    (58) condition_super_expression -> expression . OP_NOT_EQUALS expression

    OP_GREATER_THAN shift and go to state 144
    OP_LESS_THAN    shift and go to state 145
    OP_GREATER_EQUALS_THAN shift and go to state 146
    OP_LESS_EQUALS_THAN shift and go to state 147
    OP_EQUALS_TWO   shift and go to state 148
    OP_NOT_EQUALS   shift and go to state 149


state 116

    (77) expression -> term .
    (78) expression -> term . OP_PLUS expression
    (79) expression -> term . OP_MINUS expression

  ! shift/reduce conflict for OP_PLUS resolved as shift
    OP_GREATER_THAN reduce using rule 77 (expression -> term .)
    OP_LESS_THAN    reduce using rule 77 (expression -> term .)
    OP_GREATER_EQUALS_THAN reduce using rule 77 (expression -> term .)
    OP_LESS_EQUALS_THAN reduce using rule 77 (expression -> term .)
    OP_EQUALS_TWO   reduce using rule 77 (expression -> term .)
    OP_NOT_EQUALS   reduce using rule 77 (expression -> term .)
    AND             reduce using rule 77 (expression -> term .)
    OR              reduce using rule 77 (expression -> term .)
    OP_RPAREN       reduce using rule 77 (expression -> term .)
    SEMICOLON       reduce using rule 77 (expression -> term .)
    OP_PLUS         shift and go to state 150
    OP_MINUS        shift and go to state 151

  ! OP_PLUS         [ reduce using rule 77 (expression -> term .) ]


state 117

    (80) term -> fact .
    (81) term -> fact . OP_DIVISION term
    (82) term -> fact . OP_TIMES term

    OP_PLUS         reduce using rule 80 (term -> fact .)
    OP_MINUS        reduce using rule 80 (term -> fact .)
    OP_GREATER_THAN reduce using rule 80 (term -> fact .)
    OP_LESS_THAN    reduce using rule 80 (term -> fact .)
    OP_GREATER_EQUALS_THAN reduce using rule 80 (term -> fact .)
    OP_LESS_EQUALS_THAN reduce using rule 80 (term -> fact .)
    OP_EQUALS_TWO   reduce using rule 80 (term -> fact .)
    OP_NOT_EQUALS   reduce using rule 80 (term -> fact .)
    AND             reduce using rule 80 (term -> fact .)
    OR              reduce using rule 80 (term -> fact .)
    OP_RPAREN       reduce using rule 80 (term -> fact .)
    SEMICOLON       reduce using rule 80 (term -> fact .)
    OP_DIVISION     shift and go to state 152
    OP_TIMES        shift and go to state 153


state 118

    (83) fact -> var_cte .

    OP_DIVISION     reduce using rule 83 (fact -> var_cte .)
    OP_TIMES        reduce using rule 83 (fact -> var_cte .)
    OP_PLUS         reduce using rule 83 (fact -> var_cte .)
    OP_MINUS        reduce using rule 83 (fact -> var_cte .)
    OP_GREATER_THAN reduce using rule 83 (fact -> var_cte .)
    OP_LESS_THAN    reduce using rule 83 (fact -> var_cte .)
    OP_GREATER_EQUALS_THAN reduce using rule 83 (fact -> var_cte .)
    OP_LESS_EQUALS_THAN reduce using rule 83 (fact -> var_cte .)
    OP_EQUALS_TWO   reduce using rule 83 (fact -> var_cte .)
    OP_NOT_EQUALS   reduce using rule 83 (fact -> var_cte .)
    AND             reduce using rule 83 (fact -> var_cte .)
    OR              reduce using rule 83 (fact -> var_cte .)
    OP_RPAREN       reduce using rule 83 (fact -> var_cte .)
    SEMICOLON       reduce using rule 83 (fact -> var_cte .)


state 119

    (37) printer -> PRINT OP_LPAREN impression . OP_RPAREN SEMICOLON

    OP_RPAREN       shift and go to state 154


state 120

    (38) impression -> mega_expression .
    (39) impression -> mega_expression . OP_PLUS impression

    OP_RPAREN       reduce using rule 38 (impression -> mega_expression .)
    OP_PLUS         shift and go to state 155


state 121

    (67) mega_expression -> super_expression .
    (68) mega_expression -> super_expression . AND super_expression
    (69) mega_expression -> super_expression . OR super_expression

    OP_PLUS         reduce using rule 67 (mega_expression -> super_expression .)
    OP_RPAREN       reduce using rule 67 (mega_expression -> super_expression .)
    AND             shift and go to state 156
    OR              shift and go to state 157


state 122

    (70) super_expression -> expression .
    (71) super_expression -> expression . OP_GREATER_THAN expression
    (72) super_expression -> expression . OP_LESS_THAN expression
    (73) super_expression -> expression . OP_GREATER_EQUALS_THAN expression
    (74) super_expression -> expression . OP_LESS_EQUALS_THAN expression
    (75) super_expression -> expression . OP_EQUALS_TWO expression
    (76) super_expression -> expression . OP_NOT_EQUALS expression

    AND             reduce using rule 70 (super_expression -> expression .)
    OR              reduce using rule 70 (super_expression -> expression .)
    OP_PLUS         reduce using rule 70 (super_expression -> expression .)
    OP_RPAREN       reduce using rule 70 (super_expression -> expression .)
    OP_GREATER_THAN shift and go to state 158
    OP_LESS_THAN    shift and go to state 159
    OP_GREATER_EQUALS_THAN shift and go to state 160
    OP_LESS_EQUALS_THAN shift and go to state 161
    OP_EQUALS_TWO   shift and go to state 162
    OP_NOT_EQUALS   shift and go to state 163


state 123

    (44) for -> FOR OP_LPAREN assigment . condition_super_expression SEMICOLON increment OP_RPAREN bloque
    (53) condition_super_expression -> . expression OP_GREATER_THAN expression
    (54) condition_super_expression -> . expression OP_LESS_THAN expression
    (55) condition_super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (56) condition_super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (57) condition_super_expression -> . expression OP_EQUALS_TWO expression
    (58) condition_super_expression -> . expression OP_NOT_EQUALS expression
    (77) expression -> . term
    (78) expression -> . term OP_PLUS expression
    (79) expression -> . term OP_MINUS expression
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    condition_super_expression     shift and go to state 164
    expression                     shift and go to state 115
    term                           shift and go to state 116
    fact                           shift and go to state 117
    var_cte                        shift and go to state 118

state 124

    (34) assigment -> ID . OP_EQUALS single_expression SEMICOLON

    OP_EQUALS       shift and go to state 85


state 125

    (45) return -> RETURN single_expression SEMICOLON .

    RCURLY_BRACKET  reduce using rule 45 (return -> RETURN single_expression SEMICOLON .)
    ID              reduce using rule 45 (return -> RETURN single_expression SEMICOLON .)
    IF              reduce using rule 45 (return -> RETURN single_expression SEMICOLON .)
    PRINT           reduce using rule 45 (return -> RETURN single_expression SEMICOLON .)
    FOR             reduce using rule 45 (return -> RETURN single_expression SEMICOLON .)
    RETURN          reduce using rule 45 (return -> RETURN single_expression SEMICOLON .)
    FIGURE          reduce using rule 45 (return -> RETURN single_expression SEMICOLON .)


state 126

    (60) single_expression -> single_term OP_PLUS . single_expression
    (59) single_expression -> . single_term
    (60) single_expression -> . single_term OP_PLUS single_expression
    (61) single_expression -> . single_term OP_MINUS single_expression
    (62) single_term -> . single_fact
    (63) single_term -> . single_fact OP_DIVISION single_term
    (64) single_term -> . single_fact OP_TIMES single_term
    (65) single_fact -> . var_cte
    (66) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 98
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    single_term                    shift and go to state 95
    single_expression              shift and go to state 165
    single_fact                    shift and go to state 96
    var_cte                        shift and go to state 97

state 127

    (61) single_expression -> single_term OP_MINUS . single_expression
    (59) single_expression -> . single_term
    (60) single_expression -> . single_term OP_PLUS single_expression
    (61) single_expression -> . single_term OP_MINUS single_expression
    (62) single_term -> . single_fact
    (63) single_term -> . single_fact OP_DIVISION single_term
    (64) single_term -> . single_fact OP_TIMES single_term
    (65) single_fact -> . var_cte
    (66) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 98
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    single_term                    shift and go to state 95
    single_expression              shift and go to state 166
    single_fact                    shift and go to state 96
    var_cte                        shift and go to state 97

state 128

    (63) single_term -> single_fact OP_DIVISION . single_term
    (62) single_term -> . single_fact
    (63) single_term -> . single_fact OP_DIVISION single_term
    (64) single_term -> . single_fact OP_TIMES single_term
    (65) single_fact -> . var_cte
    (66) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 98
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    single_fact                    shift and go to state 96
    single_term                    shift and go to state 167
    var_cte                        shift and go to state 97

state 129

    (64) single_term -> single_fact OP_TIMES . single_term
    (62) single_term -> . single_fact
    (63) single_term -> . single_fact OP_DIVISION single_term
    (64) single_term -> . single_fact OP_TIMES single_term
    (65) single_fact -> . var_cte
    (66) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 98
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    single_fact                    shift and go to state 96
    single_term                    shift and go to state 168
    var_cte                        shift and go to state 97

state 130

    (66) single_fact -> OP_LPAREN single_expression . OP_RPAREN

    OP_RPAREN       shift and go to state 169


state 131

    (90) figure_creation -> FIGURE ID OP_TWO_POINTS . figure POSSESS bloque_figura
    (91) figure -> . POINT
    (92) figure -> . LINE
    (93) figure -> . SQUARE
    (94) figure -> . RECTANGLE
    (95) figure -> . TRIANGLE
    (96) figure -> . CIRCLE

    POINT           shift and go to state 171
    LINE            shift and go to state 172
    SQUARE          shift and go to state 173
    RECTANGLE       shift and go to state 174
    TRIANGLE        shift and go to state 175
    CIRCLE          shift and go to state 176

    figure                         shift and go to state 170

state 132

    (34) assigment -> ID OP_EQUALS single_expression SEMICOLON .

    RCURLY_BRACKET  reduce using rule 34 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    ID              reduce using rule 34 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    IF              reduce using rule 34 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    PRINT           reduce using rule 34 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    FOR             reduce using rule 34 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    RETURN          reduce using rule 34 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    FIGURE          reduce using rule 34 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    OP_LPAREN       reduce using rule 34 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    VAR_INT         reduce using rule 34 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    VAR_FLOAT       reduce using rule 34 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    VAR_STRING      reduce using rule 34 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)


state 133

    (40) increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .

    RCURLY_BRACKET  reduce using rule 40 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    ID              reduce using rule 40 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    IF              reduce using rule 40 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    PRINT           reduce using rule 40 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    FOR             reduce using rule 40 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    RETURN          reduce using rule 40 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    FIGURE          reduce using rule 40 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    OP_RPAREN       reduce using rule 40 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)


state 134

    (41) increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .

    RCURLY_BRACKET  reduce using rule 41 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    ID              reduce using rule 41 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    IF              reduce using rule 41 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    PRINT           reduce using rule 41 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    FOR             reduce using rule 41 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    RETURN          reduce using rule 41 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    FIGURE          reduce using rule 41 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    OP_RPAREN       reduce using rule 41 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)


state 135

    (42) increment -> ID OP_PLUS OP_PLUS SEMICOLON .

    RCURLY_BRACKET  reduce using rule 42 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    ID              reduce using rule 42 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    IF              reduce using rule 42 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    PRINT           reduce using rule 42 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    FOR             reduce using rule 42 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    RETURN          reduce using rule 42 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    FIGURE          reduce using rule 42 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    OP_RPAREN       reduce using rule 42 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)


state 136

    (43) increment -> ID OP_MINUS OP_MINUS SEMICOLON .

    RCURLY_BRACKET  reduce using rule 43 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    ID              reduce using rule 43 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    IF              reduce using rule 43 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    PRINT           reduce using rule 43 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    FOR             reduce using rule 43 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    RETURN          reduce using rule 43 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    FIGURE          reduce using rule 43 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    OP_RPAREN       reduce using rule 43 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)


state 137

    (47) function_call_prime -> ID function_call_prime .

    OP_RPAREN       reduce using rule 47 (function_call_prime -> ID function_call_prime .)


state 138

    (46) function_call -> ID OP_LPAREN function_call_prime OP_RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 177


state 139

    (48) function_call_prime -> COMA ID . function_call_prime
    (47) function_call_prime -> . ID function_call_prime
    (48) function_call_prime -> . COMA ID function_call_prime
    (49) function_call_prime -> . epsilon
    (104) epsilon -> .

    ID              shift and go to state 108
    COMA            shift and go to state 110
    OP_RPAREN       reduce using rule 104 (epsilon -> .)

    function_call_prime            shift and go to state 178
    epsilon                        shift and go to state 111

state 140

    (84) fact -> OP_LPAREN mega_expression . OP_RPAREN

    OP_RPAREN       shift and go to state 179


state 141

    (35) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN . bloque
    (36) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN . bloque ELSE bloque
    (23) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 52

    bloque                         shift and go to state 180

state 142

    (51) condition_mega_expression -> condition_super_expression AND . condition_super_expression
    (53) condition_super_expression -> . expression OP_GREATER_THAN expression
    (54) condition_super_expression -> . expression OP_LESS_THAN expression
    (55) condition_super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (56) condition_super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (57) condition_super_expression -> . expression OP_EQUALS_TWO expression
    (58) condition_super_expression -> . expression OP_NOT_EQUALS expression
    (77) expression -> . term
    (78) expression -> . term OP_PLUS expression
    (79) expression -> . term OP_MINUS expression
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    condition_super_expression     shift and go to state 181
    expression                     shift and go to state 115
    term                           shift and go to state 116
    fact                           shift and go to state 117
    var_cte                        shift and go to state 118

state 143

    (52) condition_mega_expression -> condition_super_expression OR . condition_super_expression
    (53) condition_super_expression -> . expression OP_GREATER_THAN expression
    (54) condition_super_expression -> . expression OP_LESS_THAN expression
    (55) condition_super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (56) condition_super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (57) condition_super_expression -> . expression OP_EQUALS_TWO expression
    (58) condition_super_expression -> . expression OP_NOT_EQUALS expression
    (77) expression -> . term
    (78) expression -> . term OP_PLUS expression
    (79) expression -> . term OP_MINUS expression
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    condition_super_expression     shift and go to state 182
    expression                     shift and go to state 115
    term                           shift and go to state 116
    fact                           shift and go to state 117
    var_cte                        shift and go to state 118

state 144

    (53) condition_super_expression -> expression OP_GREATER_THAN . expression
    (77) expression -> . term
    (78) expression -> . term OP_PLUS expression
    (79) expression -> . term OP_MINUS expression
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    expression                     shift and go to state 183
    term                           shift and go to state 116
    fact                           shift and go to state 117
    var_cte                        shift and go to state 118

state 145

    (54) condition_super_expression -> expression OP_LESS_THAN . expression
    (77) expression -> . term
    (78) expression -> . term OP_PLUS expression
    (79) expression -> . term OP_MINUS expression
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    expression                     shift and go to state 184
    term                           shift and go to state 116
    fact                           shift and go to state 117
    var_cte                        shift and go to state 118

state 146

    (55) condition_super_expression -> expression OP_GREATER_EQUALS_THAN . expression
    (77) expression -> . term
    (78) expression -> . term OP_PLUS expression
    (79) expression -> . term OP_MINUS expression
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    expression                     shift and go to state 185
    term                           shift and go to state 116
    fact                           shift and go to state 117
    var_cte                        shift and go to state 118

state 147

    (56) condition_super_expression -> expression OP_LESS_EQUALS_THAN . expression
    (77) expression -> . term
    (78) expression -> . term OP_PLUS expression
    (79) expression -> . term OP_MINUS expression
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    expression                     shift and go to state 186
    term                           shift and go to state 116
    fact                           shift and go to state 117
    var_cte                        shift and go to state 118

state 148

    (57) condition_super_expression -> expression OP_EQUALS_TWO . expression
    (77) expression -> . term
    (78) expression -> . term OP_PLUS expression
    (79) expression -> . term OP_MINUS expression
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    expression                     shift and go to state 187
    term                           shift and go to state 116
    fact                           shift and go to state 117
    var_cte                        shift and go to state 118

state 149

    (58) condition_super_expression -> expression OP_NOT_EQUALS . expression
    (77) expression -> . term
    (78) expression -> . term OP_PLUS expression
    (79) expression -> . term OP_MINUS expression
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    expression                     shift and go to state 188
    term                           shift and go to state 116
    fact                           shift and go to state 117
    var_cte                        shift and go to state 118

state 150

    (78) expression -> term OP_PLUS . expression
    (77) expression -> . term
    (78) expression -> . term OP_PLUS expression
    (79) expression -> . term OP_MINUS expression
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    term                           shift and go to state 116
    expression                     shift and go to state 189
    fact                           shift and go to state 117
    var_cte                        shift and go to state 118

state 151

    (79) expression -> term OP_MINUS . expression
    (77) expression -> . term
    (78) expression -> . term OP_PLUS expression
    (79) expression -> . term OP_MINUS expression
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    term                           shift and go to state 116
    expression                     shift and go to state 190
    fact                           shift and go to state 117
    var_cte                        shift and go to state 118

state 152

    (81) term -> fact OP_DIVISION . term
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    fact                           shift and go to state 117
    term                           shift and go to state 191
    var_cte                        shift and go to state 118

state 153

    (82) term -> fact OP_TIMES . term
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    fact                           shift and go to state 117
    term                           shift and go to state 192
    var_cte                        shift and go to state 118

state 154

    (37) printer -> PRINT OP_LPAREN impression OP_RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 193


state 155

    (39) impression -> mega_expression OP_PLUS . impression
    (38) impression -> . mega_expression
    (39) impression -> . mega_expression OP_PLUS impression
    (67) mega_expression -> . super_expression
    (68) mega_expression -> . super_expression AND super_expression
    (69) mega_expression -> . super_expression OR super_expression
    (70) super_expression -> . expression
    (71) super_expression -> . expression OP_GREATER_THAN expression
    (72) super_expression -> . expression OP_LESS_THAN expression
    (73) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (74) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (75) super_expression -> . expression OP_EQUALS_TWO expression
    (76) super_expression -> . expression OP_NOT_EQUALS expression
    (77) expression -> . term
    (78) expression -> . term OP_PLUS expression
    (79) expression -> . term OP_MINUS expression
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    mega_expression                shift and go to state 120
    impression                     shift and go to state 194
    super_expression               shift and go to state 121
    expression                     shift and go to state 122
    term                           shift and go to state 116
    fact                           shift and go to state 117
    var_cte                        shift and go to state 118

state 156

    (68) mega_expression -> super_expression AND . super_expression
    (70) super_expression -> . expression
    (71) super_expression -> . expression OP_GREATER_THAN expression
    (72) super_expression -> . expression OP_LESS_THAN expression
    (73) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (74) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (75) super_expression -> . expression OP_EQUALS_TWO expression
    (76) super_expression -> . expression OP_NOT_EQUALS expression
    (77) expression -> . term
    (78) expression -> . term OP_PLUS expression
    (79) expression -> . term OP_MINUS expression
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    super_expression               shift and go to state 195
    expression                     shift and go to state 122
    term                           shift and go to state 116
    fact                           shift and go to state 117
    var_cte                        shift and go to state 118

state 157

    (69) mega_expression -> super_expression OR . super_expression
    (70) super_expression -> . expression
    (71) super_expression -> . expression OP_GREATER_THAN expression
    (72) super_expression -> . expression OP_LESS_THAN expression
    (73) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (74) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (75) super_expression -> . expression OP_EQUALS_TWO expression
    (76) super_expression -> . expression OP_NOT_EQUALS expression
    (77) expression -> . term
    (78) expression -> . term OP_PLUS expression
    (79) expression -> . term OP_MINUS expression
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    super_expression               shift and go to state 196
    expression                     shift and go to state 122
    term                           shift and go to state 116
    fact                           shift and go to state 117
    var_cte                        shift and go to state 118

state 158

    (71) super_expression -> expression OP_GREATER_THAN . expression
    (77) expression -> . term
    (78) expression -> . term OP_PLUS expression
    (79) expression -> . term OP_MINUS expression
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    expression                     shift and go to state 197
    term                           shift and go to state 116
    fact                           shift and go to state 117
    var_cte                        shift and go to state 118

state 159

    (72) super_expression -> expression OP_LESS_THAN . expression
    (77) expression -> . term
    (78) expression -> . term OP_PLUS expression
    (79) expression -> . term OP_MINUS expression
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    expression                     shift and go to state 198
    term                           shift and go to state 116
    fact                           shift and go to state 117
    var_cte                        shift and go to state 118

state 160

    (73) super_expression -> expression OP_GREATER_EQUALS_THAN . expression
    (77) expression -> . term
    (78) expression -> . term OP_PLUS expression
    (79) expression -> . term OP_MINUS expression
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    expression                     shift and go to state 199
    term                           shift and go to state 116
    fact                           shift and go to state 117
    var_cte                        shift and go to state 118

state 161

    (74) super_expression -> expression OP_LESS_EQUALS_THAN . expression
    (77) expression -> . term
    (78) expression -> . term OP_PLUS expression
    (79) expression -> . term OP_MINUS expression
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    expression                     shift and go to state 200
    term                           shift and go to state 116
    fact                           shift and go to state 117
    var_cte                        shift and go to state 118

state 162

    (75) super_expression -> expression OP_EQUALS_TWO . expression
    (77) expression -> . term
    (78) expression -> . term OP_PLUS expression
    (79) expression -> . term OP_MINUS expression
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    expression                     shift and go to state 201
    term                           shift and go to state 116
    fact                           shift and go to state 117
    var_cte                        shift and go to state 118

state 163

    (76) super_expression -> expression OP_NOT_EQUALS . expression
    (77) expression -> . term
    (78) expression -> . term OP_PLUS expression
    (79) expression -> . term OP_MINUS expression
    (80) term -> . fact
    (81) term -> . fact OP_DIVISION term
    (82) term -> . fact OP_TIMES term
    (83) fact -> . var_cte
    (84) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 112
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    expression                     shift and go to state 202
    term                           shift and go to state 116
    fact                           shift and go to state 117
    var_cte                        shift and go to state 118

state 164

    (44) for -> FOR OP_LPAREN assigment condition_super_expression . SEMICOLON increment OP_RPAREN bloque

    SEMICOLON       shift and go to state 203


state 165

    (60) single_expression -> single_term OP_PLUS single_expression .

    SEMICOLON       reduce using rule 60 (single_expression -> single_term OP_PLUS single_expression .)
    OP_RPAREN       reduce using rule 60 (single_expression -> single_term OP_PLUS single_expression .)
    COMA            reduce using rule 60 (single_expression -> single_term OP_PLUS single_expression .)


state 166

    (61) single_expression -> single_term OP_MINUS single_expression .

    SEMICOLON       reduce using rule 61 (single_expression -> single_term OP_MINUS single_expression .)
    OP_RPAREN       reduce using rule 61 (single_expression -> single_term OP_MINUS single_expression .)
    COMA            reduce using rule 61 (single_expression -> single_term OP_MINUS single_expression .)


state 167

    (63) single_term -> single_fact OP_DIVISION single_term .

    OP_PLUS         reduce using rule 63 (single_term -> single_fact OP_DIVISION single_term .)
    OP_MINUS        reduce using rule 63 (single_term -> single_fact OP_DIVISION single_term .)
    SEMICOLON       reduce using rule 63 (single_term -> single_fact OP_DIVISION single_term .)
    OP_RPAREN       reduce using rule 63 (single_term -> single_fact OP_DIVISION single_term .)
    COMA            reduce using rule 63 (single_term -> single_fact OP_DIVISION single_term .)


state 168

    (64) single_term -> single_fact OP_TIMES single_term .

    OP_PLUS         reduce using rule 64 (single_term -> single_fact OP_TIMES single_term .)
    OP_MINUS        reduce using rule 64 (single_term -> single_fact OP_TIMES single_term .)
    SEMICOLON       reduce using rule 64 (single_term -> single_fact OP_TIMES single_term .)
    OP_RPAREN       reduce using rule 64 (single_term -> single_fact OP_TIMES single_term .)
    COMA            reduce using rule 64 (single_term -> single_fact OP_TIMES single_term .)


state 169

    (66) single_fact -> OP_LPAREN single_expression OP_RPAREN .

    OP_DIVISION     reduce using rule 66 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)
    OP_TIMES        reduce using rule 66 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)
    OP_PLUS         reduce using rule 66 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)
    OP_MINUS        reduce using rule 66 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)
    SEMICOLON       reduce using rule 66 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)
    OP_RPAREN       reduce using rule 66 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)
    COMA            reduce using rule 66 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)


state 170

    (90) figure_creation -> FIGURE ID OP_TWO_POINTS figure . POSSESS bloque_figura

    POSSESS         shift and go to state 204


state 171

    (91) figure -> POINT .

    POSSESS         reduce using rule 91 (figure -> POINT .)


state 172

    (92) figure -> LINE .

    POSSESS         reduce using rule 92 (figure -> LINE .)


state 173

    (93) figure -> SQUARE .

    POSSESS         reduce using rule 93 (figure -> SQUARE .)


state 174

    (94) figure -> RECTANGLE .

    POSSESS         reduce using rule 94 (figure -> RECTANGLE .)


state 175

    (95) figure -> TRIANGLE .

    POSSESS         reduce using rule 95 (figure -> TRIANGLE .)


state 176

    (96) figure -> CIRCLE .

    POSSESS         reduce using rule 96 (figure -> CIRCLE .)


state 177

    (46) function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .

    RCURLY_BRACKET  reduce using rule 46 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    ID              reduce using rule 46 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    IF              reduce using rule 46 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    PRINT           reduce using rule 46 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    FOR             reduce using rule 46 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    RETURN          reduce using rule 46 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    FIGURE          reduce using rule 46 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)


state 178

    (48) function_call_prime -> COMA ID function_call_prime .

    OP_RPAREN       reduce using rule 48 (function_call_prime -> COMA ID function_call_prime .)


state 179

    (84) fact -> OP_LPAREN mega_expression OP_RPAREN .

    OP_DIVISION     reduce using rule 84 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_TIMES        reduce using rule 84 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_PLUS         reduce using rule 84 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_MINUS        reduce using rule 84 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_GREATER_THAN reduce using rule 84 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_LESS_THAN    reduce using rule 84 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_GREATER_EQUALS_THAN reduce using rule 84 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_LESS_EQUALS_THAN reduce using rule 84 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_EQUALS_TWO   reduce using rule 84 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_NOT_EQUALS   reduce using rule 84 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    AND             reduce using rule 84 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OR              reduce using rule 84 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_RPAREN       reduce using rule 84 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    SEMICOLON       reduce using rule 84 (fact -> OP_LPAREN mega_expression OP_RPAREN .)


state 180

    (35) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .
    (36) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque . ELSE bloque

    RCURLY_BRACKET  reduce using rule 35 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    ID              reduce using rule 35 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    IF              reduce using rule 35 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    PRINT           reduce using rule 35 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    FOR             reduce using rule 35 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    RETURN          reduce using rule 35 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    FIGURE          reduce using rule 35 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    ELSE            shift and go to state 205


state 181

    (51) condition_mega_expression -> condition_super_expression AND condition_super_expression .

    OP_RPAREN       reduce using rule 51 (condition_mega_expression -> condition_super_expression AND condition_super_expression .)


state 182

    (52) condition_mega_expression -> condition_super_expression OR condition_super_expression .

    OP_RPAREN       reduce using rule 52 (condition_mega_expression -> condition_super_expression OR condition_super_expression .)


state 183

    (53) condition_super_expression -> expression OP_GREATER_THAN expression .

    AND             reduce using rule 53 (condition_super_expression -> expression OP_GREATER_THAN expression .)
    OR              reduce using rule 53 (condition_super_expression -> expression OP_GREATER_THAN expression .)
    OP_RPAREN       reduce using rule 53 (condition_super_expression -> expression OP_GREATER_THAN expression .)
    SEMICOLON       reduce using rule 53 (condition_super_expression -> expression OP_GREATER_THAN expression .)


state 184

    (54) condition_super_expression -> expression OP_LESS_THAN expression .

    AND             reduce using rule 54 (condition_super_expression -> expression OP_LESS_THAN expression .)
    OR              reduce using rule 54 (condition_super_expression -> expression OP_LESS_THAN expression .)
    OP_RPAREN       reduce using rule 54 (condition_super_expression -> expression OP_LESS_THAN expression .)
    SEMICOLON       reduce using rule 54 (condition_super_expression -> expression OP_LESS_THAN expression .)


state 185

    (55) condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression .

    AND             reduce using rule 55 (condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    OR              reduce using rule 55 (condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    OP_RPAREN       reduce using rule 55 (condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    SEMICOLON       reduce using rule 55 (condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression .)


state 186

    (56) condition_super_expression -> expression OP_LESS_EQUALS_THAN expression .

    AND             reduce using rule 56 (condition_super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    OR              reduce using rule 56 (condition_super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    OP_RPAREN       reduce using rule 56 (condition_super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    SEMICOLON       reduce using rule 56 (condition_super_expression -> expression OP_LESS_EQUALS_THAN expression .)


state 187

    (57) condition_super_expression -> expression OP_EQUALS_TWO expression .

    AND             reduce using rule 57 (condition_super_expression -> expression OP_EQUALS_TWO expression .)
    OR              reduce using rule 57 (condition_super_expression -> expression OP_EQUALS_TWO expression .)
    OP_RPAREN       reduce using rule 57 (condition_super_expression -> expression OP_EQUALS_TWO expression .)
    SEMICOLON       reduce using rule 57 (condition_super_expression -> expression OP_EQUALS_TWO expression .)


state 188

    (58) condition_super_expression -> expression OP_NOT_EQUALS expression .

    AND             reduce using rule 58 (condition_super_expression -> expression OP_NOT_EQUALS expression .)
    OR              reduce using rule 58 (condition_super_expression -> expression OP_NOT_EQUALS expression .)
    OP_RPAREN       reduce using rule 58 (condition_super_expression -> expression OP_NOT_EQUALS expression .)
    SEMICOLON       reduce using rule 58 (condition_super_expression -> expression OP_NOT_EQUALS expression .)


state 189

    (78) expression -> term OP_PLUS expression .

    OP_GREATER_THAN reduce using rule 78 (expression -> term OP_PLUS expression .)
    OP_LESS_THAN    reduce using rule 78 (expression -> term OP_PLUS expression .)
    OP_GREATER_EQUALS_THAN reduce using rule 78 (expression -> term OP_PLUS expression .)
    OP_LESS_EQUALS_THAN reduce using rule 78 (expression -> term OP_PLUS expression .)
    OP_EQUALS_TWO   reduce using rule 78 (expression -> term OP_PLUS expression .)
    OP_NOT_EQUALS   reduce using rule 78 (expression -> term OP_PLUS expression .)
    AND             reduce using rule 78 (expression -> term OP_PLUS expression .)
    OR              reduce using rule 78 (expression -> term OP_PLUS expression .)
    OP_PLUS         reduce using rule 78 (expression -> term OP_PLUS expression .)
    OP_RPAREN       reduce using rule 78 (expression -> term OP_PLUS expression .)
    SEMICOLON       reduce using rule 78 (expression -> term OP_PLUS expression .)


state 190

    (79) expression -> term OP_MINUS expression .

    OP_GREATER_THAN reduce using rule 79 (expression -> term OP_MINUS expression .)
    OP_LESS_THAN    reduce using rule 79 (expression -> term OP_MINUS expression .)
    OP_GREATER_EQUALS_THAN reduce using rule 79 (expression -> term OP_MINUS expression .)
    OP_LESS_EQUALS_THAN reduce using rule 79 (expression -> term OP_MINUS expression .)
    OP_EQUALS_TWO   reduce using rule 79 (expression -> term OP_MINUS expression .)
    OP_NOT_EQUALS   reduce using rule 79 (expression -> term OP_MINUS expression .)
    AND             reduce using rule 79 (expression -> term OP_MINUS expression .)
    OR              reduce using rule 79 (expression -> term OP_MINUS expression .)
    OP_PLUS         reduce using rule 79 (expression -> term OP_MINUS expression .)
    OP_RPAREN       reduce using rule 79 (expression -> term OP_MINUS expression .)
    SEMICOLON       reduce using rule 79 (expression -> term OP_MINUS expression .)


state 191

    (81) term -> fact OP_DIVISION term .

    OP_PLUS         reduce using rule 81 (term -> fact OP_DIVISION term .)
    OP_MINUS        reduce using rule 81 (term -> fact OP_DIVISION term .)
    OP_GREATER_THAN reduce using rule 81 (term -> fact OP_DIVISION term .)
    OP_LESS_THAN    reduce using rule 81 (term -> fact OP_DIVISION term .)
    OP_GREATER_EQUALS_THAN reduce using rule 81 (term -> fact OP_DIVISION term .)
    OP_LESS_EQUALS_THAN reduce using rule 81 (term -> fact OP_DIVISION term .)
    OP_EQUALS_TWO   reduce using rule 81 (term -> fact OP_DIVISION term .)
    OP_NOT_EQUALS   reduce using rule 81 (term -> fact OP_DIVISION term .)
    AND             reduce using rule 81 (term -> fact OP_DIVISION term .)
    OR              reduce using rule 81 (term -> fact OP_DIVISION term .)
    OP_RPAREN       reduce using rule 81 (term -> fact OP_DIVISION term .)
    SEMICOLON       reduce using rule 81 (term -> fact OP_DIVISION term .)


state 192

    (82) term -> fact OP_TIMES term .

    OP_PLUS         reduce using rule 82 (term -> fact OP_TIMES term .)
    OP_MINUS        reduce using rule 82 (term -> fact OP_TIMES term .)
    OP_GREATER_THAN reduce using rule 82 (term -> fact OP_TIMES term .)
    OP_LESS_THAN    reduce using rule 82 (term -> fact OP_TIMES term .)
    OP_GREATER_EQUALS_THAN reduce using rule 82 (term -> fact OP_TIMES term .)
    OP_LESS_EQUALS_THAN reduce using rule 82 (term -> fact OP_TIMES term .)
    OP_EQUALS_TWO   reduce using rule 82 (term -> fact OP_TIMES term .)
    OP_NOT_EQUALS   reduce using rule 82 (term -> fact OP_TIMES term .)
    AND             reduce using rule 82 (term -> fact OP_TIMES term .)
    OR              reduce using rule 82 (term -> fact OP_TIMES term .)
    OP_RPAREN       reduce using rule 82 (term -> fact OP_TIMES term .)
    SEMICOLON       reduce using rule 82 (term -> fact OP_TIMES term .)


state 193

    (37) printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .

    RCURLY_BRACKET  reduce using rule 37 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    ID              reduce using rule 37 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    IF              reduce using rule 37 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    PRINT           reduce using rule 37 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    FOR             reduce using rule 37 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    RETURN          reduce using rule 37 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    FIGURE          reduce using rule 37 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)


state 194

    (39) impression -> mega_expression OP_PLUS impression .

    OP_RPAREN       reduce using rule 39 (impression -> mega_expression OP_PLUS impression .)


state 195

    (68) mega_expression -> super_expression AND super_expression .

    OP_PLUS         reduce using rule 68 (mega_expression -> super_expression AND super_expression .)
    OP_RPAREN       reduce using rule 68 (mega_expression -> super_expression AND super_expression .)


state 196

    (69) mega_expression -> super_expression OR super_expression .

    OP_PLUS         reduce using rule 69 (mega_expression -> super_expression OR super_expression .)
    OP_RPAREN       reduce using rule 69 (mega_expression -> super_expression OR super_expression .)


state 197

    (71) super_expression -> expression OP_GREATER_THAN expression .

    AND             reduce using rule 71 (super_expression -> expression OP_GREATER_THAN expression .)
    OR              reduce using rule 71 (super_expression -> expression OP_GREATER_THAN expression .)
    OP_PLUS         reduce using rule 71 (super_expression -> expression OP_GREATER_THAN expression .)
    OP_RPAREN       reduce using rule 71 (super_expression -> expression OP_GREATER_THAN expression .)


state 198

    (72) super_expression -> expression OP_LESS_THAN expression .

    AND             reduce using rule 72 (super_expression -> expression OP_LESS_THAN expression .)
    OR              reduce using rule 72 (super_expression -> expression OP_LESS_THAN expression .)
    OP_PLUS         reduce using rule 72 (super_expression -> expression OP_LESS_THAN expression .)
    OP_RPAREN       reduce using rule 72 (super_expression -> expression OP_LESS_THAN expression .)


state 199

    (73) super_expression -> expression OP_GREATER_EQUALS_THAN expression .

    AND             reduce using rule 73 (super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    OR              reduce using rule 73 (super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    OP_PLUS         reduce using rule 73 (super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    OP_RPAREN       reduce using rule 73 (super_expression -> expression OP_GREATER_EQUALS_THAN expression .)


state 200

    (74) super_expression -> expression OP_LESS_EQUALS_THAN expression .

    AND             reduce using rule 74 (super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    OR              reduce using rule 74 (super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    OP_PLUS         reduce using rule 74 (super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    OP_RPAREN       reduce using rule 74 (super_expression -> expression OP_LESS_EQUALS_THAN expression .)


state 201

    (75) super_expression -> expression OP_EQUALS_TWO expression .

    AND             reduce using rule 75 (super_expression -> expression OP_EQUALS_TWO expression .)
    OR              reduce using rule 75 (super_expression -> expression OP_EQUALS_TWO expression .)
    OP_PLUS         reduce using rule 75 (super_expression -> expression OP_EQUALS_TWO expression .)
    OP_RPAREN       reduce using rule 75 (super_expression -> expression OP_EQUALS_TWO expression .)


state 202

    (76) super_expression -> expression OP_NOT_EQUALS expression .

    AND             reduce using rule 76 (super_expression -> expression OP_NOT_EQUALS expression .)
    OR              reduce using rule 76 (super_expression -> expression OP_NOT_EQUALS expression .)
    OP_PLUS         reduce using rule 76 (super_expression -> expression OP_NOT_EQUALS expression .)
    OP_RPAREN       reduce using rule 76 (super_expression -> expression OP_NOT_EQUALS expression .)


state 203

    (44) for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON . increment OP_RPAREN bloque
    (40) increment -> . ID OP_PLUS_EQUALS single_expression SEMICOLON
    (41) increment -> . ID OP_MINUS_EQUALS single_expression SEMICOLON
    (42) increment -> . ID OP_PLUS OP_PLUS SEMICOLON
    (43) increment -> . ID OP_MINUS OP_MINUS SEMICOLON

    ID              shift and go to state 207

    increment                      shift and go to state 206

state 204

    (90) figure_creation -> FIGURE ID OP_TWO_POINTS figure POSSESS . bloque_figura
    (97) bloque_figura -> . LCURLY_BRACKET bloque_figura_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 209

    bloque_figura                  shift and go to state 208

state 205

    (36) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE . bloque
    (23) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 52

    bloque                         shift and go to state 210

state 206

    (44) for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment . OP_RPAREN bloque

    OP_RPAREN       shift and go to state 211


state 207

    (40) increment -> ID . OP_PLUS_EQUALS single_expression SEMICOLON
    (41) increment -> ID . OP_MINUS_EQUALS single_expression SEMICOLON
    (42) increment -> ID . OP_PLUS OP_PLUS SEMICOLON
    (43) increment -> ID . OP_MINUS OP_MINUS SEMICOLON

    OP_PLUS_EQUALS  shift and go to state 86
    OP_MINUS_EQUALS shift and go to state 87
    OP_PLUS         shift and go to state 88
    OP_MINUS        shift and go to state 89


state 208

    (90) figure_creation -> FIGURE ID OP_TWO_POINTS figure POSSESS bloque_figura .

    RCURLY_BRACKET  reduce using rule 90 (figure_creation -> FIGURE ID OP_TWO_POINTS figure POSSESS bloque_figura .)
    ID              reduce using rule 90 (figure_creation -> FIGURE ID OP_TWO_POINTS figure POSSESS bloque_figura .)
    IF              reduce using rule 90 (figure_creation -> FIGURE ID OP_TWO_POINTS figure POSSESS bloque_figura .)
    PRINT           reduce using rule 90 (figure_creation -> FIGURE ID OP_TWO_POINTS figure POSSESS bloque_figura .)
    FOR             reduce using rule 90 (figure_creation -> FIGURE ID OP_TWO_POINTS figure POSSESS bloque_figura .)
    RETURN          reduce using rule 90 (figure_creation -> FIGURE ID OP_TWO_POINTS figure POSSESS bloque_figura .)
    FIGURE          reduce using rule 90 (figure_creation -> FIGURE ID OP_TWO_POINTS figure POSSESS bloque_figura .)


state 209

    (97) bloque_figura -> LCURLY_BRACKET . bloque_figura_primo RCURLY_BRACKET
    (98) bloque_figura_primo -> . bloque_figura_primo figura_attr
    (99) bloque_figura_primo -> . epsilon
    (104) epsilon -> .

    RCURLY_BRACKET  reduce using rule 104 (epsilon -> .)
    COLOR           reduce using rule 104 (epsilon -> .)
    SIZE            reduce using rule 104 (epsilon -> .)
    VECTOR          reduce using rule 104 (epsilon -> .)

    bloque_figura_primo            shift and go to state 212
    epsilon                        shift and go to state 213

state 210

    (36) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .

    RCURLY_BRACKET  reduce using rule 36 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    ID              reduce using rule 36 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    IF              reduce using rule 36 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    PRINT           reduce using rule 36 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    FOR             reduce using rule 36 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    RETURN          reduce using rule 36 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    FIGURE          reduce using rule 36 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)


state 211

    (44) for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN . bloque
    (23) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 52

    bloque                         shift and go to state 214

state 212

    (97) bloque_figura -> LCURLY_BRACKET bloque_figura_primo . RCURLY_BRACKET
    (98) bloque_figura_primo -> bloque_figura_primo . figura_attr
    (100) figura_attr -> . vector
    (101) figura_attr -> . COLOR OP_TWO_POINTS ID SEMICOLON
    (102) figura_attr -> . SIZE OP_TWO_POINTS single_expression SEMICOLON
    (103) vector -> . VECTOR ID OP_TWO_POINTS OP_LPAREN single_expression COMA single_expression OP_RPAREN SEMICOLON

    RCURLY_BRACKET  shift and go to state 215
    COLOR           shift and go to state 218
    SIZE            shift and go to state 219
    VECTOR          shift and go to state 220

    figura_attr                    shift and go to state 216
    vector                         shift and go to state 217

state 213

    (99) bloque_figura_primo -> epsilon .

    RCURLY_BRACKET  reduce using rule 99 (bloque_figura_primo -> epsilon .)
    COLOR           reduce using rule 99 (bloque_figura_primo -> epsilon .)
    SIZE            reduce using rule 99 (bloque_figura_primo -> epsilon .)
    VECTOR          reduce using rule 99 (bloque_figura_primo -> epsilon .)


state 214

    (44) for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .

    RCURLY_BRACKET  reduce using rule 44 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    ID              reduce using rule 44 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    IF              reduce using rule 44 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    PRINT           reduce using rule 44 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    FOR             reduce using rule 44 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    RETURN          reduce using rule 44 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    FIGURE          reduce using rule 44 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)


state 215

    (97) bloque_figura -> LCURLY_BRACKET bloque_figura_primo RCURLY_BRACKET .

    RCURLY_BRACKET  reduce using rule 97 (bloque_figura -> LCURLY_BRACKET bloque_figura_primo RCURLY_BRACKET .)
    ID              reduce using rule 97 (bloque_figura -> LCURLY_BRACKET bloque_figura_primo RCURLY_BRACKET .)
    IF              reduce using rule 97 (bloque_figura -> LCURLY_BRACKET bloque_figura_primo RCURLY_BRACKET .)
    PRINT           reduce using rule 97 (bloque_figura -> LCURLY_BRACKET bloque_figura_primo RCURLY_BRACKET .)
    FOR             reduce using rule 97 (bloque_figura -> LCURLY_BRACKET bloque_figura_primo RCURLY_BRACKET .)
    RETURN          reduce using rule 97 (bloque_figura -> LCURLY_BRACKET bloque_figura_primo RCURLY_BRACKET .)
    FIGURE          reduce using rule 97 (bloque_figura -> LCURLY_BRACKET bloque_figura_primo RCURLY_BRACKET .)


state 216

    (98) bloque_figura_primo -> bloque_figura_primo figura_attr .

    RCURLY_BRACKET  reduce using rule 98 (bloque_figura_primo -> bloque_figura_primo figura_attr .)
    COLOR           reduce using rule 98 (bloque_figura_primo -> bloque_figura_primo figura_attr .)
    SIZE            reduce using rule 98 (bloque_figura_primo -> bloque_figura_primo figura_attr .)
    VECTOR          reduce using rule 98 (bloque_figura_primo -> bloque_figura_primo figura_attr .)


state 217

    (100) figura_attr -> vector .

    RCURLY_BRACKET  reduce using rule 100 (figura_attr -> vector .)
    COLOR           reduce using rule 100 (figura_attr -> vector .)
    SIZE            reduce using rule 100 (figura_attr -> vector .)
    VECTOR          reduce using rule 100 (figura_attr -> vector .)


state 218

    (101) figura_attr -> COLOR . OP_TWO_POINTS ID SEMICOLON

    OP_TWO_POINTS   shift and go to state 221


state 219

    (102) figura_attr -> SIZE . OP_TWO_POINTS single_expression SEMICOLON

    OP_TWO_POINTS   shift and go to state 222


state 220

    (103) vector -> VECTOR . ID OP_TWO_POINTS OP_LPAREN single_expression COMA single_expression OP_RPAREN SEMICOLON

    ID              shift and go to state 223


state 221

    (101) figura_attr -> COLOR OP_TWO_POINTS . ID SEMICOLON

    ID              shift and go to state 224


state 222

    (102) figura_attr -> SIZE OP_TWO_POINTS . single_expression SEMICOLON
    (59) single_expression -> . single_term
    (60) single_expression -> . single_term OP_PLUS single_expression
    (61) single_expression -> . single_term OP_MINUS single_expression
    (62) single_term -> . single_fact
    (63) single_term -> . single_fact OP_DIVISION single_term
    (64) single_term -> . single_fact OP_TIMES single_term
    (65) single_fact -> . var_cte
    (66) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 98
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    single_expression              shift and go to state 225
    single_term                    shift and go to state 95
    single_fact                    shift and go to state 96
    var_cte                        shift and go to state 97

state 223

    (103) vector -> VECTOR ID . OP_TWO_POINTS OP_LPAREN single_expression COMA single_expression OP_RPAREN SEMICOLON

    OP_TWO_POINTS   shift and go to state 226


state 224

    (101) figura_attr -> COLOR OP_TWO_POINTS ID . SEMICOLON

    SEMICOLON       shift and go to state 227


state 225

    (102) figura_attr -> SIZE OP_TWO_POINTS single_expression . SEMICOLON

    SEMICOLON       shift and go to state 228


state 226

    (103) vector -> VECTOR ID OP_TWO_POINTS . OP_LPAREN single_expression COMA single_expression OP_RPAREN SEMICOLON

    OP_LPAREN       shift and go to state 229


state 227

    (101) figura_attr -> COLOR OP_TWO_POINTS ID SEMICOLON .

    RCURLY_BRACKET  reduce using rule 101 (figura_attr -> COLOR OP_TWO_POINTS ID SEMICOLON .)
    COLOR           reduce using rule 101 (figura_attr -> COLOR OP_TWO_POINTS ID SEMICOLON .)
    SIZE            reduce using rule 101 (figura_attr -> COLOR OP_TWO_POINTS ID SEMICOLON .)
    VECTOR          reduce using rule 101 (figura_attr -> COLOR OP_TWO_POINTS ID SEMICOLON .)


state 228

    (102) figura_attr -> SIZE OP_TWO_POINTS single_expression SEMICOLON .

    RCURLY_BRACKET  reduce using rule 102 (figura_attr -> SIZE OP_TWO_POINTS single_expression SEMICOLON .)
    COLOR           reduce using rule 102 (figura_attr -> SIZE OP_TWO_POINTS single_expression SEMICOLON .)
    SIZE            reduce using rule 102 (figura_attr -> SIZE OP_TWO_POINTS single_expression SEMICOLON .)
    VECTOR          reduce using rule 102 (figura_attr -> SIZE OP_TWO_POINTS single_expression SEMICOLON .)


state 229

    (103) vector -> VECTOR ID OP_TWO_POINTS OP_LPAREN . single_expression COMA single_expression OP_RPAREN SEMICOLON
    (59) single_expression -> . single_term
    (60) single_expression -> . single_term OP_PLUS single_expression
    (61) single_expression -> . single_term OP_MINUS single_expression
    (62) single_term -> . single_fact
    (63) single_term -> . single_fact OP_DIVISION single_term
    (64) single_term -> . single_fact OP_TIMES single_term
    (65) single_fact -> . var_cte
    (66) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 98
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    single_expression              shift and go to state 230
    single_term                    shift and go to state 95
    single_fact                    shift and go to state 96
    var_cte                        shift and go to state 97

state 230

    (103) vector -> VECTOR ID OP_TWO_POINTS OP_LPAREN single_expression . COMA single_expression OP_RPAREN SEMICOLON

    COMA            shift and go to state 231


state 231

    (103) vector -> VECTOR ID OP_TWO_POINTS OP_LPAREN single_expression COMA . single_expression OP_RPAREN SEMICOLON
    (59) single_expression -> . single_term
    (60) single_expression -> . single_term OP_PLUS single_expression
    (61) single_expression -> . single_term OP_MINUS single_expression
    (62) single_term -> . single_fact
    (63) single_term -> . single_fact OP_DIVISION single_term
    (64) single_term -> . single_fact OP_TIMES single_term
    (65) single_fact -> . var_cte
    (66) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (85) var_cte -> . ID
    (86) var_cte -> . VAR_INT
    (87) var_cte -> . VAR_FLOAT
    (88) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 98
    ID              shift and go to state 32
    VAR_INT         shift and go to state 33
    VAR_FLOAT       shift and go to state 34
    VAR_STRING      shift and go to state 35

    single_expression              shift and go to state 232
    single_term                    shift and go to state 95
    single_fact                    shift and go to state 96
    var_cte                        shift and go to state 97

state 232

    (103) vector -> VECTOR ID OP_TWO_POINTS OP_LPAREN single_expression COMA single_expression . OP_RPAREN SEMICOLON

    OP_RPAREN       shift and go to state 233


state 233

    (103) vector -> VECTOR ID OP_TWO_POINTS OP_LPAREN single_expression COMA single_expression OP_RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 234


state 234

    (103) vector -> VECTOR ID OP_TWO_POINTS OP_LPAREN single_expression COMA single_expression OP_RPAREN SEMICOLON .

    RCURLY_BRACKET  reduce using rule 103 (vector -> VECTOR ID OP_TWO_POINTS OP_LPAREN single_expression COMA single_expression OP_RPAREN SEMICOLON .)
    COLOR           reduce using rule 103 (vector -> VECTOR ID OP_TWO_POINTS OP_LPAREN single_expression COMA single_expression OP_RPAREN SEMICOLON .)
    SIZE            reduce using rule 103 (vector -> VECTOR ID OP_TWO_POINTS OP_LPAREN single_expression COMA single_expression OP_RPAREN SEMICOLON .)
    VECTOR          reduce using rule 103 (vector -> VECTOR ID OP_TWO_POINTS OP_LPAREN single_expression COMA single_expression OP_RPAREN SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OP_PLUS in state 116 resolved as shift
WARNING: reduce/reduce conflict in state 23 resolved using rule (vars_prime -> epsilon)
WARNING: rejected rule (vars_prime1 -> epsilon) in state 23
