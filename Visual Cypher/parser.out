Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    VAR_BOOLEAN
    CARET
    QUOT_MARK
    VAR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID LCURLY_BRACKET vars function main_function RCURLY_BRACKET
Rule 2     vars -> type ID vars_prime SEMICOLON vars
Rule 3     vars -> epsilon
Rule 4     vars_prime -> OP_EQUALS var_cte vars_prime1
Rule 5     vars_prime -> vars_prime1
Rule 6     vars_prime -> epsilon
Rule 7     vars_prime1 -> COMA ID vars_prime2 vars_prime1
Rule 8     vars_prime1 -> epsilon
Rule 9     vars_prime2 -> OP_EQUALS var_cte
Rule 10    vars_prime2 -> epsilon
Rule 11    function -> FUNCTION type ID OP_LPAREN parameters OP_RPAREN bloque function
Rule 12    function -> FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN bloque function
Rule 13    function -> epsilon
Rule 14    main_function -> MAIN OP_LPAREN OP_RPAREN bloque
Rule 15    type -> INT
Rule 16    type -> FLOAT
Rule 17    type -> STRING
Rule 18    type -> BOOLEAN
Rule 19    parameters -> type ID parameters
Rule 20    parameters -> COMA type ID parameters
Rule 21    parameters -> epsilon
Rule 22    bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET
Rule 23    bloque_primo -> bloque_primo statement
Rule 24    bloque_primo -> epsilon
Rule 25    statement -> assigment
Rule 26    statement -> if
Rule 27    statement -> printer
Rule 28    statement -> increment
Rule 29    statement -> for
Rule 30    statement -> return
Rule 31    statement -> function_call
Rule 32    statement -> fun_esp
Rule 33    assigment -> ID OP_EQUALS single_expression SEMICOLON
Rule 34    if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque
Rule 35    if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque
Rule 36    printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON
Rule 37    impression -> mega_expression
Rule 38    impression -> mega_expression OP_PLUS impression
Rule 39    increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON
Rule 40    increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON
Rule 41    increment -> ID OP_PLUS OP_PLUS SEMICOLON
Rule 42    increment -> ID OP_MINUS OP_MINUS SEMICOLON
Rule 43    for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque
Rule 44    return -> RETURN single_expression SEMICOLON
Rule 45    function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON
Rule 46    function_call_prime -> ID function_call_prime
Rule 47    function_call_prime -> COMA ID function_call_prime
Rule 48    function_call_prime -> epsilon
Rule 49    condition_mega_expression -> condition_super_expression
Rule 50    condition_mega_expression -> condition_super_expression AND condition_super_expression
Rule 51    condition_mega_expression -> condition_super_expression OR condition_super_expression
Rule 52    condition_super_expression -> expression OP_GREATER_THAN expression
Rule 53    condition_super_expression -> expression OP_LESS_THAN expression
Rule 54    condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression
Rule 55    condition_super_expression -> expression OP_LESS_EQUALS_THAN expression
Rule 56    condition_super_expression -> expression OP_EQUALS_TWO expression
Rule 57    condition_super_expression -> expression OP_NOT_EQUALS expression
Rule 58    single_expression -> single_term
Rule 59    single_expression -> single_term OP_PLUS single_expression
Rule 60    single_expression -> single_term OP_MINUS single_expression
Rule 61    single_term -> single_fact
Rule 62    single_term -> single_fact OP_DIVISION single_term
Rule 63    single_term -> single_fact OP_TIMES single_term
Rule 64    single_fact -> var_cte
Rule 65    single_fact -> OP_LPAREN single_expression OP_RPAREN
Rule 66    mega_expression -> super_expression
Rule 67    mega_expression -> super_expression AND super_expression
Rule 68    mega_expression -> super_expression OR super_expression
Rule 69    super_expression -> expression
Rule 70    super_expression -> expression OP_GREATER_THAN expression
Rule 71    super_expression -> expression OP_LESS_THAN expression
Rule 72    super_expression -> expression OP_GREATER_EQUALS_THAN expression
Rule 73    super_expression -> expression OP_LESS_EQUALS_THAN expression
Rule 74    super_expression -> expression OP_EQUALS_TWO expression
Rule 75    super_expression -> expression OP_NOT_EQUALS expression
Rule 76    expression -> term
Rule 77    expression -> term OP_PLUS expression
Rule 78    expression -> term OP_MINUS expression
Rule 79    term -> fact
Rule 80    term -> fact OP_DIVISION term
Rule 81    term -> fact OP_TIMES term
Rule 82    fact -> var_cte
Rule 83    fact -> OP_LPAREN mega_expression OP_RPAREN
Rule 84    var_cte -> ID
Rule 85    var_cte -> VAR_INT
Rule 86    var_cte -> VAR_FLOAT
Rule 87    var_cte -> VAR_STRING
Rule 88    fun_esp -> figure_creation
Rule 89    figure_creation -> FIGURE ID OP_TWO_POINTS figure POSSESS bloque_figura
Rule 90    figure -> POINT
Rule 91    figure -> LINE
Rule 92    figure -> SQUARE
Rule 93    figure -> RECTANGLE
Rule 94    figure -> TRIANGLE
Rule 95    figure -> CIRCLE
Rule 96    bloque_figura -> LCURLY_BRACKET bloque_figura_primo RCURLY_BRACKET
Rule 97    bloque_figura_primo -> bloque_figura_primo figura_attr
Rule 98    bloque_figura_primo -> epsilon
Rule 99    figura_attr -> vector
Rule 100   figura_attr -> COLOR OP_TWO_POINTS ID SEMICOLON
Rule 101   figura_attr -> SIZE OP_TWO_POINTS single_expression SEMICOLON
Rule 102   vector -> VECTOR ID OP_TWO_POINTS OP_LPAREN single_expression COMA single_expression OP_RPAREN SEMICOLON
Rule 103   epsilon -> <empty>

Terminals, with rules where they appear

AND                  : 50 67
BOOLEAN              : 18
CARET                : 
CIRCLE               : 95
COLOR                : 100
COMA                 : 7 20 47 102
ELSE                 : 35
FIGURE               : 89
FLOAT                : 16
FOR                  : 43
FUNCTION             : 11 12
ID                   : 1 2 7 11 12 19 20 33 39 40 41 42 45 46 47 84 89 100 102
IF                   : 34 35
INT                  : 15
LCURLY_BRACKET       : 1 22 96
LINE                 : 91
MAIN                 : 14
OP_DIVISION          : 62 80
OP_EQUALS            : 4 9 33
OP_EQUALS_TWO        : 56 74
OP_GREATER_EQUALS_THAN : 54 72
OP_GREATER_THAN      : 52 70
OP_LESS_EQUALS_THAN  : 55 73
OP_LESS_THAN         : 53 71
OP_LPAREN            : 11 12 14 34 35 36 43 45 65 83 102
OP_MINUS             : 42 42 60 78
OP_MINUS_EQUALS      : 40
OP_NOT_EQUALS        : 57 75
OP_PLUS              : 38 41 41 59 77
OP_PLUS_EQUALS       : 39
OP_RPAREN            : 11 12 14 34 35 36 43 45 65 83 102
OP_TIMES             : 63 81
OP_TWO_POINTS        : 89 100 101 102
OR                   : 51 68
POINT                : 90
POSSESS              : 89
PRINT                : 36
PROGRAM              : 1
QUOT_MARK            : 
RCURLY_BRACKET       : 1 22 96
RECTANGLE            : 93
RETURN               : 44
SEMICOLON            : 2 33 36 39 40 41 42 43 44 45 100 101 102
SIZE                 : 101
SQUARE               : 92
STRING               : 17
TRIANGLE             : 94
VAR                  : 
VAR_BOOLEAN          : 
VAR_FLOAT            : 86
VAR_INT              : 85
VAR_STRING           : 87
VECTOR               : 102
VOID                 : 12
error                : 

Nonterminals, with rules where they appear

assigment            : 25 43
bloque               : 11 12 14 34 35 35 43
bloque_figura        : 89
bloque_figura_primo  : 96 97
bloque_primo         : 22 23
condition_mega_expression : 34 35
condition_super_expression : 43 49 50 50 51 51
epsilon              : 3 6 8 10 13 21 24 48 98
expression           : 52 52 53 53 54 54 55 55 56 56 57 57 69 70 70 71 71 72 72 73 73 74 74 75 75 77 78
fact                 : 79 80 81
figura_attr          : 97
figure               : 89
figure_creation      : 88
for                  : 29
fun_esp              : 32
function             : 1 11 12
function_call        : 31
function_call_prime  : 45 46 47
if                   : 26
impression           : 36 38
increment            : 28 43
main_function        : 1
mega_expression      : 37 38 83
parameters           : 11 12 19 20
printer              : 27
program              : 0
return               : 30
single_expression    : 33 39 40 44 59 60 65 101 102 102
single_fact          : 61 62 63
single_term          : 58 59 60 62 63
statement            : 23
super_expression     : 66 67 67 68 68
term                 : 76 77 78 80 81
type                 : 2 11 19 20
var_cte              : 4 9 64 82
vars                 : 1 2
vars_prime           : 2
vars_prime1          : 4 5 7
vars_prime2          : 7
vector               : 99

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID LCURLY_BRACKET vars function main_function RCURLY_BRACKET

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID LCURLY_BRACKET vars function main_function RCURLY_BRACKET

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . LCURLY_BRACKET vars function main_function RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 4


state 4

    (1) program -> PROGRAM ID LCURLY_BRACKET . vars function main_function RCURLY_BRACKET
    (2) vars -> . type ID vars_prime SEMICOLON vars
    (3) vars -> . epsilon
    (15) type -> . INT
    (16) type -> . FLOAT
    (17) type -> . STRING
    (18) type -> . BOOLEAN
    (103) epsilon -> .

    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    FUNCTION        reduce using rule 103 (epsilon -> .)
    MAIN            reduce using rule 103 (epsilon -> .)

    vars                           shift and go to state 5
    type                           shift and go to state 6
    epsilon                        shift and go to state 7

state 5

    (1) program -> PROGRAM ID LCURLY_BRACKET vars . function main_function RCURLY_BRACKET
    (11) function -> . FUNCTION type ID OP_LPAREN parameters OP_RPAREN bloque function
    (12) function -> . FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN bloque function
    (13) function -> . epsilon
    (103) epsilon -> .

    FUNCTION        shift and go to state 13
    MAIN            reduce using rule 103 (epsilon -> .)

    function                       shift and go to state 12
    epsilon                        shift and go to state 14

state 6

    (2) vars -> type . ID vars_prime SEMICOLON vars

    ID              shift and go to state 15


state 7

    (3) vars -> epsilon .

    FUNCTION        reduce using rule 3 (vars -> epsilon .)
    MAIN            reduce using rule 3 (vars -> epsilon .)


state 8

    (15) type -> INT .

    ID              reduce using rule 15 (type -> INT .)


state 9

    (16) type -> FLOAT .

    ID              reduce using rule 16 (type -> FLOAT .)


state 10

    (17) type -> STRING .

    ID              reduce using rule 17 (type -> STRING .)


state 11

    (18) type -> BOOLEAN .

    ID              reduce using rule 18 (type -> BOOLEAN .)


state 12

    (1) program -> PROGRAM ID LCURLY_BRACKET vars function . main_function RCURLY_BRACKET
    (14) main_function -> . MAIN OP_LPAREN OP_RPAREN bloque

    MAIN            shift and go to state 17

    main_function                  shift and go to state 16

state 13

    (11) function -> FUNCTION . type ID OP_LPAREN parameters OP_RPAREN bloque function
    (12) function -> FUNCTION . VOID ID OP_LPAREN parameters OP_RPAREN bloque function
    (15) type -> . INT
    (16) type -> . FLOAT
    (17) type -> . STRING
    (18) type -> . BOOLEAN

    VOID            shift and go to state 19
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11

    type                           shift and go to state 18

state 14

    (13) function -> epsilon .

    MAIN            reduce using rule 13 (function -> epsilon .)


state 15

    (2) vars -> type ID . vars_prime SEMICOLON vars
    (4) vars_prime -> . OP_EQUALS var_cte vars_prime1
    (5) vars_prime -> . vars_prime1
    (6) vars_prime -> . epsilon
    (7) vars_prime1 -> . COMA ID vars_prime2 vars_prime1
    (8) vars_prime1 -> . epsilon
    (103) epsilon -> .

    OP_EQUALS       shift and go to state 21
    COMA            shift and go to state 24
    SEMICOLON       reduce using rule 103 (epsilon -> .)

    vars_prime                     shift and go to state 20
    vars_prime1                    shift and go to state 22
    epsilon                        shift and go to state 23

state 16

    (1) program -> PROGRAM ID LCURLY_BRACKET vars function main_function . RCURLY_BRACKET

    RCURLY_BRACKET  shift and go to state 25


state 17

    (14) main_function -> MAIN . OP_LPAREN OP_RPAREN bloque

    OP_LPAREN       shift and go to state 26


state 18

    (11) function -> FUNCTION type . ID OP_LPAREN parameters OP_RPAREN bloque function

    ID              shift and go to state 27


state 19

    (12) function -> FUNCTION VOID . ID OP_LPAREN parameters OP_RPAREN bloque function

    ID              shift and go to state 28


state 20

    (2) vars -> type ID vars_prime . SEMICOLON vars

    SEMICOLON       shift and go to state 29


state 21

    (4) vars_prime -> OP_EQUALS . var_cte vars_prime1
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    var_cte                        shift and go to state 30

state 22

    (5) vars_prime -> vars_prime1 .

    SEMICOLON       reduce using rule 5 (vars_prime -> vars_prime1 .)


state 23

    (6) vars_prime -> epsilon .
    (8) vars_prime1 -> epsilon .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 6 (vars_prime -> epsilon .)
    SEMICOLON       reduce using rule 6 (vars_prime -> epsilon .)

  ! SEMICOLON       [ reduce using rule 8 (vars_prime1 -> epsilon .) ]


state 24

    (7) vars_prime1 -> COMA . ID vars_prime2 vars_prime1

    ID              shift and go to state 35


state 25

    (1) program -> PROGRAM ID LCURLY_BRACKET vars function main_function RCURLY_BRACKET .

    $end            reduce using rule 1 (program -> PROGRAM ID LCURLY_BRACKET vars function main_function RCURLY_BRACKET .)


state 26

    (14) main_function -> MAIN OP_LPAREN . OP_RPAREN bloque

    OP_RPAREN       shift and go to state 36


state 27

    (11) function -> FUNCTION type ID . OP_LPAREN parameters OP_RPAREN bloque function

    OP_LPAREN       shift and go to state 37


state 28

    (12) function -> FUNCTION VOID ID . OP_LPAREN parameters OP_RPAREN bloque function

    OP_LPAREN       shift and go to state 38


state 29

    (2) vars -> type ID vars_prime SEMICOLON . vars
    (2) vars -> . type ID vars_prime SEMICOLON vars
    (3) vars -> . epsilon
    (15) type -> . INT
    (16) type -> . FLOAT
    (17) type -> . STRING
    (18) type -> . BOOLEAN
    (103) epsilon -> .

    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    FUNCTION        reduce using rule 103 (epsilon -> .)
    MAIN            reduce using rule 103 (epsilon -> .)

    type                           shift and go to state 6
    vars                           shift and go to state 39
    epsilon                        shift and go to state 7

state 30

    (4) vars_prime -> OP_EQUALS var_cte . vars_prime1
    (7) vars_prime1 -> . COMA ID vars_prime2 vars_prime1
    (8) vars_prime1 -> . epsilon
    (103) epsilon -> .

    COMA            shift and go to state 24
    SEMICOLON       reduce using rule 103 (epsilon -> .)

    vars_prime1                    shift and go to state 40
    epsilon                        shift and go to state 41

state 31

    (84) var_cte -> ID .

    COMA            reduce using rule 84 (var_cte -> ID .)
    SEMICOLON       reduce using rule 84 (var_cte -> ID .)
    OP_DIVISION     reduce using rule 84 (var_cte -> ID .)
    OP_TIMES        reduce using rule 84 (var_cte -> ID .)
    OP_PLUS         reduce using rule 84 (var_cte -> ID .)
    OP_MINUS        reduce using rule 84 (var_cte -> ID .)
    OP_GREATER_THAN reduce using rule 84 (var_cte -> ID .)
    OP_LESS_THAN    reduce using rule 84 (var_cte -> ID .)
    OP_GREATER_EQUALS_THAN reduce using rule 84 (var_cte -> ID .)
    OP_LESS_EQUALS_THAN reduce using rule 84 (var_cte -> ID .)
    OP_EQUALS_TWO   reduce using rule 84 (var_cte -> ID .)
    OP_NOT_EQUALS   reduce using rule 84 (var_cte -> ID .)
    AND             reduce using rule 84 (var_cte -> ID .)
    OR              reduce using rule 84 (var_cte -> ID .)
    OP_RPAREN       reduce using rule 84 (var_cte -> ID .)


state 32

    (85) var_cte -> VAR_INT .

    COMA            reduce using rule 85 (var_cte -> VAR_INT .)
    SEMICOLON       reduce using rule 85 (var_cte -> VAR_INT .)
    OP_DIVISION     reduce using rule 85 (var_cte -> VAR_INT .)
    OP_TIMES        reduce using rule 85 (var_cte -> VAR_INT .)
    OP_PLUS         reduce using rule 85 (var_cte -> VAR_INT .)
    OP_MINUS        reduce using rule 85 (var_cte -> VAR_INT .)
    OP_GREATER_THAN reduce using rule 85 (var_cte -> VAR_INT .)
    OP_LESS_THAN    reduce using rule 85 (var_cte -> VAR_INT .)
    OP_GREATER_EQUALS_THAN reduce using rule 85 (var_cte -> VAR_INT .)
    OP_LESS_EQUALS_THAN reduce using rule 85 (var_cte -> VAR_INT .)
    OP_EQUALS_TWO   reduce using rule 85 (var_cte -> VAR_INT .)
    OP_NOT_EQUALS   reduce using rule 85 (var_cte -> VAR_INT .)
    AND             reduce using rule 85 (var_cte -> VAR_INT .)
    OR              reduce using rule 85 (var_cte -> VAR_INT .)
    OP_RPAREN       reduce using rule 85 (var_cte -> VAR_INT .)


state 33

    (86) var_cte -> VAR_FLOAT .

    COMA            reduce using rule 86 (var_cte -> VAR_FLOAT .)
    SEMICOLON       reduce using rule 86 (var_cte -> VAR_FLOAT .)
    OP_DIVISION     reduce using rule 86 (var_cte -> VAR_FLOAT .)
    OP_TIMES        reduce using rule 86 (var_cte -> VAR_FLOAT .)
    OP_PLUS         reduce using rule 86 (var_cte -> VAR_FLOAT .)
    OP_MINUS        reduce using rule 86 (var_cte -> VAR_FLOAT .)
    OP_GREATER_THAN reduce using rule 86 (var_cte -> VAR_FLOAT .)
    OP_LESS_THAN    reduce using rule 86 (var_cte -> VAR_FLOAT .)
    OP_GREATER_EQUALS_THAN reduce using rule 86 (var_cte -> VAR_FLOAT .)
    OP_LESS_EQUALS_THAN reduce using rule 86 (var_cte -> VAR_FLOAT .)
    OP_EQUALS_TWO   reduce using rule 86 (var_cte -> VAR_FLOAT .)
    OP_NOT_EQUALS   reduce using rule 86 (var_cte -> VAR_FLOAT .)
    AND             reduce using rule 86 (var_cte -> VAR_FLOAT .)
    OR              reduce using rule 86 (var_cte -> VAR_FLOAT .)
    OP_RPAREN       reduce using rule 86 (var_cte -> VAR_FLOAT .)


state 34

    (87) var_cte -> VAR_STRING .

    COMA            reduce using rule 87 (var_cte -> VAR_STRING .)
    SEMICOLON       reduce using rule 87 (var_cte -> VAR_STRING .)
    OP_DIVISION     reduce using rule 87 (var_cte -> VAR_STRING .)
    OP_TIMES        reduce using rule 87 (var_cte -> VAR_STRING .)
    OP_PLUS         reduce using rule 87 (var_cte -> VAR_STRING .)
    OP_MINUS        reduce using rule 87 (var_cte -> VAR_STRING .)
    OP_GREATER_THAN reduce using rule 87 (var_cte -> VAR_STRING .)
    OP_LESS_THAN    reduce using rule 87 (var_cte -> VAR_STRING .)
    OP_GREATER_EQUALS_THAN reduce using rule 87 (var_cte -> VAR_STRING .)
    OP_LESS_EQUALS_THAN reduce using rule 87 (var_cte -> VAR_STRING .)
    OP_EQUALS_TWO   reduce using rule 87 (var_cte -> VAR_STRING .)
    OP_NOT_EQUALS   reduce using rule 87 (var_cte -> VAR_STRING .)
    AND             reduce using rule 87 (var_cte -> VAR_STRING .)
    OR              reduce using rule 87 (var_cte -> VAR_STRING .)
    OP_RPAREN       reduce using rule 87 (var_cte -> VAR_STRING .)


state 35

    (7) vars_prime1 -> COMA ID . vars_prime2 vars_prime1
    (9) vars_prime2 -> . OP_EQUALS var_cte
    (10) vars_prime2 -> . epsilon
    (103) epsilon -> .

    OP_EQUALS       shift and go to state 43
    COMA            reduce using rule 103 (epsilon -> .)
    SEMICOLON       reduce using rule 103 (epsilon -> .)

    vars_prime2                    shift and go to state 42
    epsilon                        shift and go to state 44

state 36

    (14) main_function -> MAIN OP_LPAREN OP_RPAREN . bloque
    (22) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 46

    bloque                         shift and go to state 45

state 37

    (11) function -> FUNCTION type ID OP_LPAREN . parameters OP_RPAREN bloque function
    (19) parameters -> . type ID parameters
    (20) parameters -> . COMA type ID parameters
    (21) parameters -> . epsilon
    (15) type -> . INT
    (16) type -> . FLOAT
    (17) type -> . STRING
    (18) type -> . BOOLEAN
    (103) epsilon -> .

    COMA            shift and go to state 49
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    OP_RPAREN       reduce using rule 103 (epsilon -> .)

    type                           shift and go to state 47
    parameters                     shift and go to state 48
    epsilon                        shift and go to state 50

state 38

    (12) function -> FUNCTION VOID ID OP_LPAREN . parameters OP_RPAREN bloque function
    (19) parameters -> . type ID parameters
    (20) parameters -> . COMA type ID parameters
    (21) parameters -> . epsilon
    (15) type -> . INT
    (16) type -> . FLOAT
    (17) type -> . STRING
    (18) type -> . BOOLEAN
    (103) epsilon -> .

    COMA            shift and go to state 49
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    OP_RPAREN       reduce using rule 103 (epsilon -> .)

    parameters                     shift and go to state 51
    type                           shift and go to state 47
    epsilon                        shift and go to state 50

state 39

    (2) vars -> type ID vars_prime SEMICOLON vars .

    FUNCTION        reduce using rule 2 (vars -> type ID vars_prime SEMICOLON vars .)
    MAIN            reduce using rule 2 (vars -> type ID vars_prime SEMICOLON vars .)


state 40

    (4) vars_prime -> OP_EQUALS var_cte vars_prime1 .

    SEMICOLON       reduce using rule 4 (vars_prime -> OP_EQUALS var_cte vars_prime1 .)


state 41

    (8) vars_prime1 -> epsilon .

    SEMICOLON       reduce using rule 8 (vars_prime1 -> epsilon .)


state 42

    (7) vars_prime1 -> COMA ID vars_prime2 . vars_prime1
    (7) vars_prime1 -> . COMA ID vars_prime2 vars_prime1
    (8) vars_prime1 -> . epsilon
    (103) epsilon -> .

    COMA            shift and go to state 24
    SEMICOLON       reduce using rule 103 (epsilon -> .)

    vars_prime1                    shift and go to state 52
    epsilon                        shift and go to state 41

state 43

    (9) vars_prime2 -> OP_EQUALS . var_cte
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    var_cte                        shift and go to state 53

state 44

    (10) vars_prime2 -> epsilon .

    COMA            reduce using rule 10 (vars_prime2 -> epsilon .)
    SEMICOLON       reduce using rule 10 (vars_prime2 -> epsilon .)


state 45

    (14) main_function -> MAIN OP_LPAREN OP_RPAREN bloque .

    RCURLY_BRACKET  reduce using rule 14 (main_function -> MAIN OP_LPAREN OP_RPAREN bloque .)


state 46

    (22) bloque -> LCURLY_BRACKET . bloque_primo RCURLY_BRACKET
    (23) bloque_primo -> . bloque_primo statement
    (24) bloque_primo -> . epsilon
    (103) epsilon -> .

    RCURLY_BRACKET  reduce using rule 103 (epsilon -> .)
    ID              reduce using rule 103 (epsilon -> .)
    IF              reduce using rule 103 (epsilon -> .)
    PRINT           reduce using rule 103 (epsilon -> .)
    FOR             reduce using rule 103 (epsilon -> .)
    RETURN          reduce using rule 103 (epsilon -> .)
    FIGURE          reduce using rule 103 (epsilon -> .)

    bloque_primo                   shift and go to state 54
    epsilon                        shift and go to state 55

state 47

    (19) parameters -> type . ID parameters

    ID              shift and go to state 56


state 48

    (11) function -> FUNCTION type ID OP_LPAREN parameters . OP_RPAREN bloque function

    OP_RPAREN       shift and go to state 57


state 49

    (20) parameters -> COMA . type ID parameters
    (15) type -> . INT
    (16) type -> . FLOAT
    (17) type -> . STRING
    (18) type -> . BOOLEAN

    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11

    type                           shift and go to state 58

state 50

    (21) parameters -> epsilon .

    OP_RPAREN       reduce using rule 21 (parameters -> epsilon .)


state 51

    (12) function -> FUNCTION VOID ID OP_LPAREN parameters . OP_RPAREN bloque function

    OP_RPAREN       shift and go to state 59


state 52

    (7) vars_prime1 -> COMA ID vars_prime2 vars_prime1 .

    SEMICOLON       reduce using rule 7 (vars_prime1 -> COMA ID vars_prime2 vars_prime1 .)


state 53

    (9) vars_prime2 -> OP_EQUALS var_cte .

    COMA            reduce using rule 9 (vars_prime2 -> OP_EQUALS var_cte .)
    SEMICOLON       reduce using rule 9 (vars_prime2 -> OP_EQUALS var_cte .)


state 54

    (22) bloque -> LCURLY_BRACKET bloque_primo . RCURLY_BRACKET
    (23) bloque_primo -> bloque_primo . statement
    (25) statement -> . assigment
    (26) statement -> . if
    (27) statement -> . printer
    (28) statement -> . increment
    (29) statement -> . for
    (30) statement -> . return
    (31) statement -> . function_call
    (32) statement -> . fun_esp
    (33) assigment -> . ID OP_EQUALS single_expression SEMICOLON
    (34) if -> . IF OP_LPAREN condition_mega_expression OP_RPAREN bloque
    (35) if -> . IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque
    (36) printer -> . PRINT OP_LPAREN impression OP_RPAREN SEMICOLON
    (39) increment -> . ID OP_PLUS_EQUALS single_expression SEMICOLON
    (40) increment -> . ID OP_MINUS_EQUALS single_expression SEMICOLON
    (41) increment -> . ID OP_PLUS OP_PLUS SEMICOLON
    (42) increment -> . ID OP_MINUS OP_MINUS SEMICOLON
    (43) for -> . FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque
    (44) return -> . RETURN single_expression SEMICOLON
    (45) function_call -> . ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON
    (88) fun_esp -> . figure_creation
    (89) figure_creation -> . FIGURE ID OP_TWO_POINTS figure POSSESS bloque_figura

    RCURLY_BRACKET  shift and go to state 60
    ID              shift and go to state 70
    IF              shift and go to state 71
    PRINT           shift and go to state 72
    FOR             shift and go to state 73
    RETURN          shift and go to state 74
    FIGURE          shift and go to state 76

    statement                      shift and go to state 61
    assigment                      shift and go to state 62
    if                             shift and go to state 63
    printer                        shift and go to state 64
    increment                      shift and go to state 65
    for                            shift and go to state 66
    return                         shift and go to state 67
    function_call                  shift and go to state 68
    fun_esp                        shift and go to state 69
    figure_creation                shift and go to state 75

state 55

    (24) bloque_primo -> epsilon .

    RCURLY_BRACKET  reduce using rule 24 (bloque_primo -> epsilon .)
    ID              reduce using rule 24 (bloque_primo -> epsilon .)
    IF              reduce using rule 24 (bloque_primo -> epsilon .)
    PRINT           reduce using rule 24 (bloque_primo -> epsilon .)
    FOR             reduce using rule 24 (bloque_primo -> epsilon .)
    RETURN          reduce using rule 24 (bloque_primo -> epsilon .)
    FIGURE          reduce using rule 24 (bloque_primo -> epsilon .)


state 56

    (19) parameters -> type ID . parameters
    (19) parameters -> . type ID parameters
    (20) parameters -> . COMA type ID parameters
    (21) parameters -> . epsilon
    (15) type -> . INT
    (16) type -> . FLOAT
    (17) type -> . STRING
    (18) type -> . BOOLEAN
    (103) epsilon -> .

    COMA            shift and go to state 49
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    OP_RPAREN       reduce using rule 103 (epsilon -> .)

    type                           shift and go to state 47
    parameters                     shift and go to state 77
    epsilon                        shift and go to state 50

state 57

    (11) function -> FUNCTION type ID OP_LPAREN parameters OP_RPAREN . bloque function
    (22) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 46

    bloque                         shift and go to state 78

state 58

    (20) parameters -> COMA type . ID parameters

    ID              shift and go to state 79


state 59

    (12) function -> FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN . bloque function
    (22) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 46

    bloque                         shift and go to state 80

state 60

    (22) bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .

    RCURLY_BRACKET  reduce using rule 22 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    FUNCTION        reduce using rule 22 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    MAIN            reduce using rule 22 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    ELSE            reduce using rule 22 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    ID              reduce using rule 22 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    IF              reduce using rule 22 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    PRINT           reduce using rule 22 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    FOR             reduce using rule 22 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    RETURN          reduce using rule 22 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    FIGURE          reduce using rule 22 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)


state 61

    (23) bloque_primo -> bloque_primo statement .

    RCURLY_BRACKET  reduce using rule 23 (bloque_primo -> bloque_primo statement .)
    ID              reduce using rule 23 (bloque_primo -> bloque_primo statement .)
    IF              reduce using rule 23 (bloque_primo -> bloque_primo statement .)
    PRINT           reduce using rule 23 (bloque_primo -> bloque_primo statement .)
    FOR             reduce using rule 23 (bloque_primo -> bloque_primo statement .)
    RETURN          reduce using rule 23 (bloque_primo -> bloque_primo statement .)
    FIGURE          reduce using rule 23 (bloque_primo -> bloque_primo statement .)


state 62

    (25) statement -> assigment .

    RCURLY_BRACKET  reduce using rule 25 (statement -> assigment .)
    ID              reduce using rule 25 (statement -> assigment .)
    IF              reduce using rule 25 (statement -> assigment .)
    PRINT           reduce using rule 25 (statement -> assigment .)
    FOR             reduce using rule 25 (statement -> assigment .)
    RETURN          reduce using rule 25 (statement -> assigment .)
    FIGURE          reduce using rule 25 (statement -> assigment .)


state 63

    (26) statement -> if .

    RCURLY_BRACKET  reduce using rule 26 (statement -> if .)
    ID              reduce using rule 26 (statement -> if .)
    IF              reduce using rule 26 (statement -> if .)
    PRINT           reduce using rule 26 (statement -> if .)
    FOR             reduce using rule 26 (statement -> if .)
    RETURN          reduce using rule 26 (statement -> if .)
    FIGURE          reduce using rule 26 (statement -> if .)


state 64

    (27) statement -> printer .

    RCURLY_BRACKET  reduce using rule 27 (statement -> printer .)
    ID              reduce using rule 27 (statement -> printer .)
    IF              reduce using rule 27 (statement -> printer .)
    PRINT           reduce using rule 27 (statement -> printer .)
    FOR             reduce using rule 27 (statement -> printer .)
    RETURN          reduce using rule 27 (statement -> printer .)
    FIGURE          reduce using rule 27 (statement -> printer .)


state 65

    (28) statement -> increment .

    RCURLY_BRACKET  reduce using rule 28 (statement -> increment .)
    ID              reduce using rule 28 (statement -> increment .)
    IF              reduce using rule 28 (statement -> increment .)
    PRINT           reduce using rule 28 (statement -> increment .)
    FOR             reduce using rule 28 (statement -> increment .)
    RETURN          reduce using rule 28 (statement -> increment .)
    FIGURE          reduce using rule 28 (statement -> increment .)


state 66

    (29) statement -> for .

    RCURLY_BRACKET  reduce using rule 29 (statement -> for .)
    ID              reduce using rule 29 (statement -> for .)
    IF              reduce using rule 29 (statement -> for .)
    PRINT           reduce using rule 29 (statement -> for .)
    FOR             reduce using rule 29 (statement -> for .)
    RETURN          reduce using rule 29 (statement -> for .)
    FIGURE          reduce using rule 29 (statement -> for .)


state 67

    (30) statement -> return .

    RCURLY_BRACKET  reduce using rule 30 (statement -> return .)
    ID              reduce using rule 30 (statement -> return .)
    IF              reduce using rule 30 (statement -> return .)
    PRINT           reduce using rule 30 (statement -> return .)
    FOR             reduce using rule 30 (statement -> return .)
    RETURN          reduce using rule 30 (statement -> return .)
    FIGURE          reduce using rule 30 (statement -> return .)


state 68

    (31) statement -> function_call .

    RCURLY_BRACKET  reduce using rule 31 (statement -> function_call .)
    ID              reduce using rule 31 (statement -> function_call .)
    IF              reduce using rule 31 (statement -> function_call .)
    PRINT           reduce using rule 31 (statement -> function_call .)
    FOR             reduce using rule 31 (statement -> function_call .)
    RETURN          reduce using rule 31 (statement -> function_call .)
    FIGURE          reduce using rule 31 (statement -> function_call .)


state 69

    (32) statement -> fun_esp .

    RCURLY_BRACKET  reduce using rule 32 (statement -> fun_esp .)
    ID              reduce using rule 32 (statement -> fun_esp .)
    IF              reduce using rule 32 (statement -> fun_esp .)
    PRINT           reduce using rule 32 (statement -> fun_esp .)
    FOR             reduce using rule 32 (statement -> fun_esp .)
    RETURN          reduce using rule 32 (statement -> fun_esp .)
    FIGURE          reduce using rule 32 (statement -> fun_esp .)


state 70

    (33) assigment -> ID . OP_EQUALS single_expression SEMICOLON
    (39) increment -> ID . OP_PLUS_EQUALS single_expression SEMICOLON
    (40) increment -> ID . OP_MINUS_EQUALS single_expression SEMICOLON
    (41) increment -> ID . OP_PLUS OP_PLUS SEMICOLON
    (42) increment -> ID . OP_MINUS OP_MINUS SEMICOLON
    (45) function_call -> ID . OP_LPAREN function_call_prime OP_RPAREN SEMICOLON

    OP_EQUALS       shift and go to state 81
    OP_PLUS_EQUALS  shift and go to state 82
    OP_MINUS_EQUALS shift and go to state 83
    OP_PLUS         shift and go to state 84
    OP_MINUS        shift and go to state 85
    OP_LPAREN       shift and go to state 86


state 71

    (34) if -> IF . OP_LPAREN condition_mega_expression OP_RPAREN bloque
    (35) if -> IF . OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque

    OP_LPAREN       shift and go to state 87


state 72

    (36) printer -> PRINT . OP_LPAREN impression OP_RPAREN SEMICOLON

    OP_LPAREN       shift and go to state 88


state 73

    (43) for -> FOR . OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque

    OP_LPAREN       shift and go to state 89


state 74

    (44) return -> RETURN . single_expression SEMICOLON
    (58) single_expression -> . single_term
    (59) single_expression -> . single_term OP_PLUS single_expression
    (60) single_expression -> . single_term OP_MINUS single_expression
    (61) single_term -> . single_fact
    (62) single_term -> . single_fact OP_DIVISION single_term
    (63) single_term -> . single_fact OP_TIMES single_term
    (64) single_fact -> . var_cte
    (65) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 94
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    single_expression              shift and go to state 90
    single_term                    shift and go to state 91
    single_fact                    shift and go to state 92
    var_cte                        shift and go to state 93

state 75

    (88) fun_esp -> figure_creation .

    RCURLY_BRACKET  reduce using rule 88 (fun_esp -> figure_creation .)
    ID              reduce using rule 88 (fun_esp -> figure_creation .)
    IF              reduce using rule 88 (fun_esp -> figure_creation .)
    PRINT           reduce using rule 88 (fun_esp -> figure_creation .)
    FOR             reduce using rule 88 (fun_esp -> figure_creation .)
    RETURN          reduce using rule 88 (fun_esp -> figure_creation .)
    FIGURE          reduce using rule 88 (fun_esp -> figure_creation .)


state 76

    (89) figure_creation -> FIGURE . ID OP_TWO_POINTS figure POSSESS bloque_figura

    ID              shift and go to state 95


state 77

    (19) parameters -> type ID parameters .

    OP_RPAREN       reduce using rule 19 (parameters -> type ID parameters .)


state 78

    (11) function -> FUNCTION type ID OP_LPAREN parameters OP_RPAREN bloque . function
    (11) function -> . FUNCTION type ID OP_LPAREN parameters OP_RPAREN bloque function
    (12) function -> . FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN bloque function
    (13) function -> . epsilon
    (103) epsilon -> .

    FUNCTION        shift and go to state 13
    MAIN            reduce using rule 103 (epsilon -> .)

    function                       shift and go to state 96
    epsilon                        shift and go to state 14

state 79

    (20) parameters -> COMA type ID . parameters
    (19) parameters -> . type ID parameters
    (20) parameters -> . COMA type ID parameters
    (21) parameters -> . epsilon
    (15) type -> . INT
    (16) type -> . FLOAT
    (17) type -> . STRING
    (18) type -> . BOOLEAN
    (103) epsilon -> .

    COMA            shift and go to state 49
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    OP_RPAREN       reduce using rule 103 (epsilon -> .)

    type                           shift and go to state 47
    parameters                     shift and go to state 97
    epsilon                        shift and go to state 50

state 80

    (12) function -> FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN bloque . function
    (11) function -> . FUNCTION type ID OP_LPAREN parameters OP_RPAREN bloque function
    (12) function -> . FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN bloque function
    (13) function -> . epsilon
    (103) epsilon -> .

    FUNCTION        shift and go to state 13
    MAIN            reduce using rule 103 (epsilon -> .)

    function                       shift and go to state 98
    epsilon                        shift and go to state 14

state 81

    (33) assigment -> ID OP_EQUALS . single_expression SEMICOLON
    (58) single_expression -> . single_term
    (59) single_expression -> . single_term OP_PLUS single_expression
    (60) single_expression -> . single_term OP_MINUS single_expression
    (61) single_term -> . single_fact
    (62) single_term -> . single_fact OP_DIVISION single_term
    (63) single_term -> . single_fact OP_TIMES single_term
    (64) single_fact -> . var_cte
    (65) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 94
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    single_expression              shift and go to state 99
    single_term                    shift and go to state 91
    single_fact                    shift and go to state 92
    var_cte                        shift and go to state 93

state 82

    (39) increment -> ID OP_PLUS_EQUALS . single_expression SEMICOLON
    (58) single_expression -> . single_term
    (59) single_expression -> . single_term OP_PLUS single_expression
    (60) single_expression -> . single_term OP_MINUS single_expression
    (61) single_term -> . single_fact
    (62) single_term -> . single_fact OP_DIVISION single_term
    (63) single_term -> . single_fact OP_TIMES single_term
    (64) single_fact -> . var_cte
    (65) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 94
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    single_expression              shift and go to state 100
    single_term                    shift and go to state 91
    single_fact                    shift and go to state 92
    var_cte                        shift and go to state 93

state 83

    (40) increment -> ID OP_MINUS_EQUALS . single_expression SEMICOLON
    (58) single_expression -> . single_term
    (59) single_expression -> . single_term OP_PLUS single_expression
    (60) single_expression -> . single_term OP_MINUS single_expression
    (61) single_term -> . single_fact
    (62) single_term -> . single_fact OP_DIVISION single_term
    (63) single_term -> . single_fact OP_TIMES single_term
    (64) single_fact -> . var_cte
    (65) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 94
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    single_expression              shift and go to state 101
    single_term                    shift and go to state 91
    single_fact                    shift and go to state 92
    var_cte                        shift and go to state 93

state 84

    (41) increment -> ID OP_PLUS . OP_PLUS SEMICOLON

    OP_PLUS         shift and go to state 102


state 85

    (42) increment -> ID OP_MINUS . OP_MINUS SEMICOLON

    OP_MINUS        shift and go to state 103


state 86

    (45) function_call -> ID OP_LPAREN . function_call_prime OP_RPAREN SEMICOLON
    (46) function_call_prime -> . ID function_call_prime
    (47) function_call_prime -> . COMA ID function_call_prime
    (48) function_call_prime -> . epsilon
    (103) epsilon -> .

    ID              shift and go to state 104
    COMA            shift and go to state 106
    OP_RPAREN       reduce using rule 103 (epsilon -> .)

    function_call_prime            shift and go to state 105
    epsilon                        shift and go to state 107

state 87

    (34) if -> IF OP_LPAREN . condition_mega_expression OP_RPAREN bloque
    (35) if -> IF OP_LPAREN . condition_mega_expression OP_RPAREN bloque ELSE bloque
    (49) condition_mega_expression -> . condition_super_expression
    (50) condition_mega_expression -> . condition_super_expression AND condition_super_expression
    (51) condition_mega_expression -> . condition_super_expression OR condition_super_expression
    (52) condition_super_expression -> . expression OP_GREATER_THAN expression
    (53) condition_super_expression -> . expression OP_LESS_THAN expression
    (54) condition_super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (55) condition_super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (56) condition_super_expression -> . expression OP_EQUALS_TWO expression
    (57) condition_super_expression -> . expression OP_NOT_EQUALS expression
    (76) expression -> . term
    (77) expression -> . term OP_PLUS expression
    (78) expression -> . term OP_MINUS expression
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    condition_mega_expression      shift and go to state 109
    condition_super_expression     shift and go to state 110
    expression                     shift and go to state 111
    term                           shift and go to state 112
    fact                           shift and go to state 113
    var_cte                        shift and go to state 114

state 88

    (36) printer -> PRINT OP_LPAREN . impression OP_RPAREN SEMICOLON
    (37) impression -> . mega_expression
    (38) impression -> . mega_expression OP_PLUS impression
    (66) mega_expression -> . super_expression
    (67) mega_expression -> . super_expression AND super_expression
    (68) mega_expression -> . super_expression OR super_expression
    (69) super_expression -> . expression
    (70) super_expression -> . expression OP_GREATER_THAN expression
    (71) super_expression -> . expression OP_LESS_THAN expression
    (72) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (73) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (74) super_expression -> . expression OP_EQUALS_TWO expression
    (75) super_expression -> . expression OP_NOT_EQUALS expression
    (76) expression -> . term
    (77) expression -> . term OP_PLUS expression
    (78) expression -> . term OP_MINUS expression
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    impression                     shift and go to state 115
    mega_expression                shift and go to state 116
    super_expression               shift and go to state 117
    expression                     shift and go to state 118
    term                           shift and go to state 112
    fact                           shift and go to state 113
    var_cte                        shift and go to state 114

state 89

    (43) for -> FOR OP_LPAREN . assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque
    (33) assigment -> . ID OP_EQUALS single_expression SEMICOLON

    ID              shift and go to state 120

    assigment                      shift and go to state 119

state 90

    (44) return -> RETURN single_expression . SEMICOLON

    SEMICOLON       shift and go to state 121


state 91

    (58) single_expression -> single_term .
    (59) single_expression -> single_term . OP_PLUS single_expression
    (60) single_expression -> single_term . OP_MINUS single_expression

    SEMICOLON       reduce using rule 58 (single_expression -> single_term .)
    OP_RPAREN       reduce using rule 58 (single_expression -> single_term .)
    COMA            reduce using rule 58 (single_expression -> single_term .)
    OP_PLUS         shift and go to state 122
    OP_MINUS        shift and go to state 123


state 92

    (61) single_term -> single_fact .
    (62) single_term -> single_fact . OP_DIVISION single_term
    (63) single_term -> single_fact . OP_TIMES single_term

    OP_PLUS         reduce using rule 61 (single_term -> single_fact .)
    OP_MINUS        reduce using rule 61 (single_term -> single_fact .)
    SEMICOLON       reduce using rule 61 (single_term -> single_fact .)
    OP_RPAREN       reduce using rule 61 (single_term -> single_fact .)
    COMA            reduce using rule 61 (single_term -> single_fact .)
    OP_DIVISION     shift and go to state 124
    OP_TIMES        shift and go to state 125


state 93

    (64) single_fact -> var_cte .

    OP_DIVISION     reduce using rule 64 (single_fact -> var_cte .)
    OP_TIMES        reduce using rule 64 (single_fact -> var_cte .)
    OP_PLUS         reduce using rule 64 (single_fact -> var_cte .)
    OP_MINUS        reduce using rule 64 (single_fact -> var_cte .)
    SEMICOLON       reduce using rule 64 (single_fact -> var_cte .)
    OP_RPAREN       reduce using rule 64 (single_fact -> var_cte .)
    COMA            reduce using rule 64 (single_fact -> var_cte .)


state 94

    (65) single_fact -> OP_LPAREN . single_expression OP_RPAREN
    (58) single_expression -> . single_term
    (59) single_expression -> . single_term OP_PLUS single_expression
    (60) single_expression -> . single_term OP_MINUS single_expression
    (61) single_term -> . single_fact
    (62) single_term -> . single_fact OP_DIVISION single_term
    (63) single_term -> . single_fact OP_TIMES single_term
    (64) single_fact -> . var_cte
    (65) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 94
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    single_expression              shift and go to state 126
    single_term                    shift and go to state 91
    single_fact                    shift and go to state 92
    var_cte                        shift and go to state 93

state 95

    (89) figure_creation -> FIGURE ID . OP_TWO_POINTS figure POSSESS bloque_figura

    OP_TWO_POINTS   shift and go to state 127


state 96

    (11) function -> FUNCTION type ID OP_LPAREN parameters OP_RPAREN bloque function .

    MAIN            reduce using rule 11 (function -> FUNCTION type ID OP_LPAREN parameters OP_RPAREN bloque function .)


state 97

    (20) parameters -> COMA type ID parameters .

    OP_RPAREN       reduce using rule 20 (parameters -> COMA type ID parameters .)


state 98

    (12) function -> FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN bloque function .

    MAIN            reduce using rule 12 (function -> FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN bloque function .)


state 99

    (33) assigment -> ID OP_EQUALS single_expression . SEMICOLON

    SEMICOLON       shift and go to state 128


state 100

    (39) increment -> ID OP_PLUS_EQUALS single_expression . SEMICOLON

    SEMICOLON       shift and go to state 129


state 101

    (40) increment -> ID OP_MINUS_EQUALS single_expression . SEMICOLON

    SEMICOLON       shift and go to state 130


state 102

    (41) increment -> ID OP_PLUS OP_PLUS . SEMICOLON

    SEMICOLON       shift and go to state 131


state 103

    (42) increment -> ID OP_MINUS OP_MINUS . SEMICOLON

    SEMICOLON       shift and go to state 132


state 104

    (46) function_call_prime -> ID . function_call_prime
    (46) function_call_prime -> . ID function_call_prime
    (47) function_call_prime -> . COMA ID function_call_prime
    (48) function_call_prime -> . epsilon
    (103) epsilon -> .

    ID              shift and go to state 104
    COMA            shift and go to state 106
    OP_RPAREN       reduce using rule 103 (epsilon -> .)

    function_call_prime            shift and go to state 133
    epsilon                        shift and go to state 107

state 105

    (45) function_call -> ID OP_LPAREN function_call_prime . OP_RPAREN SEMICOLON

    OP_RPAREN       shift and go to state 134


state 106

    (47) function_call_prime -> COMA . ID function_call_prime

    ID              shift and go to state 135


state 107

    (48) function_call_prime -> epsilon .

    OP_RPAREN       reduce using rule 48 (function_call_prime -> epsilon .)


state 108

    (83) fact -> OP_LPAREN . mega_expression OP_RPAREN
    (66) mega_expression -> . super_expression
    (67) mega_expression -> . super_expression AND super_expression
    (68) mega_expression -> . super_expression OR super_expression
    (69) super_expression -> . expression
    (70) super_expression -> . expression OP_GREATER_THAN expression
    (71) super_expression -> . expression OP_LESS_THAN expression
    (72) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (73) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (74) super_expression -> . expression OP_EQUALS_TWO expression
    (75) super_expression -> . expression OP_NOT_EQUALS expression
    (76) expression -> . term
    (77) expression -> . term OP_PLUS expression
    (78) expression -> . term OP_MINUS expression
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    mega_expression                shift and go to state 136
    super_expression               shift and go to state 117
    expression                     shift and go to state 118
    term                           shift and go to state 112
    fact                           shift and go to state 113
    var_cte                        shift and go to state 114

state 109

    (34) if -> IF OP_LPAREN condition_mega_expression . OP_RPAREN bloque
    (35) if -> IF OP_LPAREN condition_mega_expression . OP_RPAREN bloque ELSE bloque

    OP_RPAREN       shift and go to state 137


state 110

    (49) condition_mega_expression -> condition_super_expression .
    (50) condition_mega_expression -> condition_super_expression . AND condition_super_expression
    (51) condition_mega_expression -> condition_super_expression . OR condition_super_expression

    OP_RPAREN       reduce using rule 49 (condition_mega_expression -> condition_super_expression .)
    AND             shift and go to state 138
    OR              shift and go to state 139


state 111

    (52) condition_super_expression -> expression . OP_GREATER_THAN expression
    (53) condition_super_expression -> expression . OP_LESS_THAN expression
    (54) condition_super_expression -> expression . OP_GREATER_EQUALS_THAN expression
    (55) condition_super_expression -> expression . OP_LESS_EQUALS_THAN expression
    (56) condition_super_expression -> expression . OP_EQUALS_TWO expression
    (57) condition_super_expression -> expression . OP_NOT_EQUALS expression

    OP_GREATER_THAN shift and go to state 140
    OP_LESS_THAN    shift and go to state 141
    OP_GREATER_EQUALS_THAN shift and go to state 142
    OP_LESS_EQUALS_THAN shift and go to state 143
    OP_EQUALS_TWO   shift and go to state 144
    OP_NOT_EQUALS   shift and go to state 145


state 112

    (76) expression -> term .
    (77) expression -> term . OP_PLUS expression
    (78) expression -> term . OP_MINUS expression

  ! shift/reduce conflict for OP_PLUS resolved as shift
    OP_GREATER_THAN reduce using rule 76 (expression -> term .)
    OP_LESS_THAN    reduce using rule 76 (expression -> term .)
    OP_GREATER_EQUALS_THAN reduce using rule 76 (expression -> term .)
    OP_LESS_EQUALS_THAN reduce using rule 76 (expression -> term .)
    OP_EQUALS_TWO   reduce using rule 76 (expression -> term .)
    OP_NOT_EQUALS   reduce using rule 76 (expression -> term .)
    AND             reduce using rule 76 (expression -> term .)
    OR              reduce using rule 76 (expression -> term .)
    OP_RPAREN       reduce using rule 76 (expression -> term .)
    SEMICOLON       reduce using rule 76 (expression -> term .)
    OP_PLUS         shift and go to state 146
    OP_MINUS        shift and go to state 147

  ! OP_PLUS         [ reduce using rule 76 (expression -> term .) ]


state 113

    (79) term -> fact .
    (80) term -> fact . OP_DIVISION term
    (81) term -> fact . OP_TIMES term

    OP_PLUS         reduce using rule 79 (term -> fact .)
    OP_MINUS        reduce using rule 79 (term -> fact .)
    OP_GREATER_THAN reduce using rule 79 (term -> fact .)
    OP_LESS_THAN    reduce using rule 79 (term -> fact .)
    OP_GREATER_EQUALS_THAN reduce using rule 79 (term -> fact .)
    OP_LESS_EQUALS_THAN reduce using rule 79 (term -> fact .)
    OP_EQUALS_TWO   reduce using rule 79 (term -> fact .)
    OP_NOT_EQUALS   reduce using rule 79 (term -> fact .)
    AND             reduce using rule 79 (term -> fact .)
    OR              reduce using rule 79 (term -> fact .)
    OP_RPAREN       reduce using rule 79 (term -> fact .)
    SEMICOLON       reduce using rule 79 (term -> fact .)
    OP_DIVISION     shift and go to state 148
    OP_TIMES        shift and go to state 149


state 114

    (82) fact -> var_cte .

    OP_DIVISION     reduce using rule 82 (fact -> var_cte .)
    OP_TIMES        reduce using rule 82 (fact -> var_cte .)
    OP_PLUS         reduce using rule 82 (fact -> var_cte .)
    OP_MINUS        reduce using rule 82 (fact -> var_cte .)
    OP_GREATER_THAN reduce using rule 82 (fact -> var_cte .)
    OP_LESS_THAN    reduce using rule 82 (fact -> var_cte .)
    OP_GREATER_EQUALS_THAN reduce using rule 82 (fact -> var_cte .)
    OP_LESS_EQUALS_THAN reduce using rule 82 (fact -> var_cte .)
    OP_EQUALS_TWO   reduce using rule 82 (fact -> var_cte .)
    OP_NOT_EQUALS   reduce using rule 82 (fact -> var_cte .)
    AND             reduce using rule 82 (fact -> var_cte .)
    OR              reduce using rule 82 (fact -> var_cte .)
    OP_RPAREN       reduce using rule 82 (fact -> var_cte .)
    SEMICOLON       reduce using rule 82 (fact -> var_cte .)


state 115

    (36) printer -> PRINT OP_LPAREN impression . OP_RPAREN SEMICOLON

    OP_RPAREN       shift and go to state 150


state 116

    (37) impression -> mega_expression .
    (38) impression -> mega_expression . OP_PLUS impression

    OP_RPAREN       reduce using rule 37 (impression -> mega_expression .)
    OP_PLUS         shift and go to state 151


state 117

    (66) mega_expression -> super_expression .
    (67) mega_expression -> super_expression . AND super_expression
    (68) mega_expression -> super_expression . OR super_expression

    OP_PLUS         reduce using rule 66 (mega_expression -> super_expression .)
    OP_RPAREN       reduce using rule 66 (mega_expression -> super_expression .)
    AND             shift and go to state 152
    OR              shift and go to state 153


state 118

    (69) super_expression -> expression .
    (70) super_expression -> expression . OP_GREATER_THAN expression
    (71) super_expression -> expression . OP_LESS_THAN expression
    (72) super_expression -> expression . OP_GREATER_EQUALS_THAN expression
    (73) super_expression -> expression . OP_LESS_EQUALS_THAN expression
    (74) super_expression -> expression . OP_EQUALS_TWO expression
    (75) super_expression -> expression . OP_NOT_EQUALS expression

    AND             reduce using rule 69 (super_expression -> expression .)
    OR              reduce using rule 69 (super_expression -> expression .)
    OP_PLUS         reduce using rule 69 (super_expression -> expression .)
    OP_RPAREN       reduce using rule 69 (super_expression -> expression .)
    OP_GREATER_THAN shift and go to state 154
    OP_LESS_THAN    shift and go to state 155
    OP_GREATER_EQUALS_THAN shift and go to state 156
    OP_LESS_EQUALS_THAN shift and go to state 157
    OP_EQUALS_TWO   shift and go to state 158
    OP_NOT_EQUALS   shift and go to state 159


state 119

    (43) for -> FOR OP_LPAREN assigment . condition_super_expression SEMICOLON increment OP_RPAREN bloque
    (52) condition_super_expression -> . expression OP_GREATER_THAN expression
    (53) condition_super_expression -> . expression OP_LESS_THAN expression
    (54) condition_super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (55) condition_super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (56) condition_super_expression -> . expression OP_EQUALS_TWO expression
    (57) condition_super_expression -> . expression OP_NOT_EQUALS expression
    (76) expression -> . term
    (77) expression -> . term OP_PLUS expression
    (78) expression -> . term OP_MINUS expression
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    condition_super_expression     shift and go to state 160
    expression                     shift and go to state 111
    term                           shift and go to state 112
    fact                           shift and go to state 113
    var_cte                        shift and go to state 114

state 120

    (33) assigment -> ID . OP_EQUALS single_expression SEMICOLON

    OP_EQUALS       shift and go to state 81


state 121

    (44) return -> RETURN single_expression SEMICOLON .

    RCURLY_BRACKET  reduce using rule 44 (return -> RETURN single_expression SEMICOLON .)
    ID              reduce using rule 44 (return -> RETURN single_expression SEMICOLON .)
    IF              reduce using rule 44 (return -> RETURN single_expression SEMICOLON .)
    PRINT           reduce using rule 44 (return -> RETURN single_expression SEMICOLON .)
    FOR             reduce using rule 44 (return -> RETURN single_expression SEMICOLON .)
    RETURN          reduce using rule 44 (return -> RETURN single_expression SEMICOLON .)
    FIGURE          reduce using rule 44 (return -> RETURN single_expression SEMICOLON .)


state 122

    (59) single_expression -> single_term OP_PLUS . single_expression
    (58) single_expression -> . single_term
    (59) single_expression -> . single_term OP_PLUS single_expression
    (60) single_expression -> . single_term OP_MINUS single_expression
    (61) single_term -> . single_fact
    (62) single_term -> . single_fact OP_DIVISION single_term
    (63) single_term -> . single_fact OP_TIMES single_term
    (64) single_fact -> . var_cte
    (65) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 94
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    single_term                    shift and go to state 91
    single_expression              shift and go to state 161
    single_fact                    shift and go to state 92
    var_cte                        shift and go to state 93

state 123

    (60) single_expression -> single_term OP_MINUS . single_expression
    (58) single_expression -> . single_term
    (59) single_expression -> . single_term OP_PLUS single_expression
    (60) single_expression -> . single_term OP_MINUS single_expression
    (61) single_term -> . single_fact
    (62) single_term -> . single_fact OP_DIVISION single_term
    (63) single_term -> . single_fact OP_TIMES single_term
    (64) single_fact -> . var_cte
    (65) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 94
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    single_term                    shift and go to state 91
    single_expression              shift and go to state 162
    single_fact                    shift and go to state 92
    var_cte                        shift and go to state 93

state 124

    (62) single_term -> single_fact OP_DIVISION . single_term
    (61) single_term -> . single_fact
    (62) single_term -> . single_fact OP_DIVISION single_term
    (63) single_term -> . single_fact OP_TIMES single_term
    (64) single_fact -> . var_cte
    (65) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 94
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    single_fact                    shift and go to state 92
    single_term                    shift and go to state 163
    var_cte                        shift and go to state 93

state 125

    (63) single_term -> single_fact OP_TIMES . single_term
    (61) single_term -> . single_fact
    (62) single_term -> . single_fact OP_DIVISION single_term
    (63) single_term -> . single_fact OP_TIMES single_term
    (64) single_fact -> . var_cte
    (65) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 94
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    single_fact                    shift and go to state 92
    single_term                    shift and go to state 164
    var_cte                        shift and go to state 93

state 126

    (65) single_fact -> OP_LPAREN single_expression . OP_RPAREN

    OP_RPAREN       shift and go to state 165


state 127

    (89) figure_creation -> FIGURE ID OP_TWO_POINTS . figure POSSESS bloque_figura
    (90) figure -> . POINT
    (91) figure -> . LINE
    (92) figure -> . SQUARE
    (93) figure -> . RECTANGLE
    (94) figure -> . TRIANGLE
    (95) figure -> . CIRCLE

    POINT           shift and go to state 167
    LINE            shift and go to state 168
    SQUARE          shift and go to state 169
    RECTANGLE       shift and go to state 170
    TRIANGLE        shift and go to state 171
    CIRCLE          shift and go to state 172

    figure                         shift and go to state 166

state 128

    (33) assigment -> ID OP_EQUALS single_expression SEMICOLON .

    RCURLY_BRACKET  reduce using rule 33 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    ID              reduce using rule 33 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    IF              reduce using rule 33 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    PRINT           reduce using rule 33 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    FOR             reduce using rule 33 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    RETURN          reduce using rule 33 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    FIGURE          reduce using rule 33 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    OP_LPAREN       reduce using rule 33 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    VAR_INT         reduce using rule 33 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    VAR_FLOAT       reduce using rule 33 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    VAR_STRING      reduce using rule 33 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)


state 129

    (39) increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .

    RCURLY_BRACKET  reduce using rule 39 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    ID              reduce using rule 39 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    IF              reduce using rule 39 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    PRINT           reduce using rule 39 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    FOR             reduce using rule 39 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    RETURN          reduce using rule 39 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    FIGURE          reduce using rule 39 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    OP_RPAREN       reduce using rule 39 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)


state 130

    (40) increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .

    RCURLY_BRACKET  reduce using rule 40 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    ID              reduce using rule 40 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    IF              reduce using rule 40 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    PRINT           reduce using rule 40 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    FOR             reduce using rule 40 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    RETURN          reduce using rule 40 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    FIGURE          reduce using rule 40 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    OP_RPAREN       reduce using rule 40 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)


state 131

    (41) increment -> ID OP_PLUS OP_PLUS SEMICOLON .

    RCURLY_BRACKET  reduce using rule 41 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    ID              reduce using rule 41 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    IF              reduce using rule 41 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    PRINT           reduce using rule 41 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    FOR             reduce using rule 41 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    RETURN          reduce using rule 41 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    FIGURE          reduce using rule 41 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    OP_RPAREN       reduce using rule 41 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)


state 132

    (42) increment -> ID OP_MINUS OP_MINUS SEMICOLON .

    RCURLY_BRACKET  reduce using rule 42 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    ID              reduce using rule 42 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    IF              reduce using rule 42 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    PRINT           reduce using rule 42 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    FOR             reduce using rule 42 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    RETURN          reduce using rule 42 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    FIGURE          reduce using rule 42 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    OP_RPAREN       reduce using rule 42 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)


state 133

    (46) function_call_prime -> ID function_call_prime .

    OP_RPAREN       reduce using rule 46 (function_call_prime -> ID function_call_prime .)


state 134

    (45) function_call -> ID OP_LPAREN function_call_prime OP_RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 173


state 135

    (47) function_call_prime -> COMA ID . function_call_prime
    (46) function_call_prime -> . ID function_call_prime
    (47) function_call_prime -> . COMA ID function_call_prime
    (48) function_call_prime -> . epsilon
    (103) epsilon -> .

    ID              shift and go to state 104
    COMA            shift and go to state 106
    OP_RPAREN       reduce using rule 103 (epsilon -> .)

    function_call_prime            shift and go to state 174
    epsilon                        shift and go to state 107

state 136

    (83) fact -> OP_LPAREN mega_expression . OP_RPAREN

    OP_RPAREN       shift and go to state 175


state 137

    (34) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN . bloque
    (35) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN . bloque ELSE bloque
    (22) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 46

    bloque                         shift and go to state 176

state 138

    (50) condition_mega_expression -> condition_super_expression AND . condition_super_expression
    (52) condition_super_expression -> . expression OP_GREATER_THAN expression
    (53) condition_super_expression -> . expression OP_LESS_THAN expression
    (54) condition_super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (55) condition_super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (56) condition_super_expression -> . expression OP_EQUALS_TWO expression
    (57) condition_super_expression -> . expression OP_NOT_EQUALS expression
    (76) expression -> . term
    (77) expression -> . term OP_PLUS expression
    (78) expression -> . term OP_MINUS expression
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    condition_super_expression     shift and go to state 177
    expression                     shift and go to state 111
    term                           shift and go to state 112
    fact                           shift and go to state 113
    var_cte                        shift and go to state 114

state 139

    (51) condition_mega_expression -> condition_super_expression OR . condition_super_expression
    (52) condition_super_expression -> . expression OP_GREATER_THAN expression
    (53) condition_super_expression -> . expression OP_LESS_THAN expression
    (54) condition_super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (55) condition_super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (56) condition_super_expression -> . expression OP_EQUALS_TWO expression
    (57) condition_super_expression -> . expression OP_NOT_EQUALS expression
    (76) expression -> . term
    (77) expression -> . term OP_PLUS expression
    (78) expression -> . term OP_MINUS expression
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    condition_super_expression     shift and go to state 178
    expression                     shift and go to state 111
    term                           shift and go to state 112
    fact                           shift and go to state 113
    var_cte                        shift and go to state 114

state 140

    (52) condition_super_expression -> expression OP_GREATER_THAN . expression
    (76) expression -> . term
    (77) expression -> . term OP_PLUS expression
    (78) expression -> . term OP_MINUS expression
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    expression                     shift and go to state 179
    term                           shift and go to state 112
    fact                           shift and go to state 113
    var_cte                        shift and go to state 114

state 141

    (53) condition_super_expression -> expression OP_LESS_THAN . expression
    (76) expression -> . term
    (77) expression -> . term OP_PLUS expression
    (78) expression -> . term OP_MINUS expression
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    expression                     shift and go to state 180
    term                           shift and go to state 112
    fact                           shift and go to state 113
    var_cte                        shift and go to state 114

state 142

    (54) condition_super_expression -> expression OP_GREATER_EQUALS_THAN . expression
    (76) expression -> . term
    (77) expression -> . term OP_PLUS expression
    (78) expression -> . term OP_MINUS expression
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    expression                     shift and go to state 181
    term                           shift and go to state 112
    fact                           shift and go to state 113
    var_cte                        shift and go to state 114

state 143

    (55) condition_super_expression -> expression OP_LESS_EQUALS_THAN . expression
    (76) expression -> . term
    (77) expression -> . term OP_PLUS expression
    (78) expression -> . term OP_MINUS expression
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    expression                     shift and go to state 182
    term                           shift and go to state 112
    fact                           shift and go to state 113
    var_cte                        shift and go to state 114

state 144

    (56) condition_super_expression -> expression OP_EQUALS_TWO . expression
    (76) expression -> . term
    (77) expression -> . term OP_PLUS expression
    (78) expression -> . term OP_MINUS expression
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    expression                     shift and go to state 183
    term                           shift and go to state 112
    fact                           shift and go to state 113
    var_cte                        shift and go to state 114

state 145

    (57) condition_super_expression -> expression OP_NOT_EQUALS . expression
    (76) expression -> . term
    (77) expression -> . term OP_PLUS expression
    (78) expression -> . term OP_MINUS expression
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    expression                     shift and go to state 184
    term                           shift and go to state 112
    fact                           shift and go to state 113
    var_cte                        shift and go to state 114

state 146

    (77) expression -> term OP_PLUS . expression
    (76) expression -> . term
    (77) expression -> . term OP_PLUS expression
    (78) expression -> . term OP_MINUS expression
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    term                           shift and go to state 112
    expression                     shift and go to state 185
    fact                           shift and go to state 113
    var_cte                        shift and go to state 114

state 147

    (78) expression -> term OP_MINUS . expression
    (76) expression -> . term
    (77) expression -> . term OP_PLUS expression
    (78) expression -> . term OP_MINUS expression
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    term                           shift and go to state 112
    expression                     shift and go to state 186
    fact                           shift and go to state 113
    var_cte                        shift and go to state 114

state 148

    (80) term -> fact OP_DIVISION . term
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    fact                           shift and go to state 113
    term                           shift and go to state 187
    var_cte                        shift and go to state 114

state 149

    (81) term -> fact OP_TIMES . term
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    fact                           shift and go to state 113
    term                           shift and go to state 188
    var_cte                        shift and go to state 114

state 150

    (36) printer -> PRINT OP_LPAREN impression OP_RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 189


state 151

    (38) impression -> mega_expression OP_PLUS . impression
    (37) impression -> . mega_expression
    (38) impression -> . mega_expression OP_PLUS impression
    (66) mega_expression -> . super_expression
    (67) mega_expression -> . super_expression AND super_expression
    (68) mega_expression -> . super_expression OR super_expression
    (69) super_expression -> . expression
    (70) super_expression -> . expression OP_GREATER_THAN expression
    (71) super_expression -> . expression OP_LESS_THAN expression
    (72) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (73) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (74) super_expression -> . expression OP_EQUALS_TWO expression
    (75) super_expression -> . expression OP_NOT_EQUALS expression
    (76) expression -> . term
    (77) expression -> . term OP_PLUS expression
    (78) expression -> . term OP_MINUS expression
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    mega_expression                shift and go to state 116
    impression                     shift and go to state 190
    super_expression               shift and go to state 117
    expression                     shift and go to state 118
    term                           shift and go to state 112
    fact                           shift and go to state 113
    var_cte                        shift and go to state 114

state 152

    (67) mega_expression -> super_expression AND . super_expression
    (69) super_expression -> . expression
    (70) super_expression -> . expression OP_GREATER_THAN expression
    (71) super_expression -> . expression OP_LESS_THAN expression
    (72) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (73) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (74) super_expression -> . expression OP_EQUALS_TWO expression
    (75) super_expression -> . expression OP_NOT_EQUALS expression
    (76) expression -> . term
    (77) expression -> . term OP_PLUS expression
    (78) expression -> . term OP_MINUS expression
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    super_expression               shift and go to state 191
    expression                     shift and go to state 118
    term                           shift and go to state 112
    fact                           shift and go to state 113
    var_cte                        shift and go to state 114

state 153

    (68) mega_expression -> super_expression OR . super_expression
    (69) super_expression -> . expression
    (70) super_expression -> . expression OP_GREATER_THAN expression
    (71) super_expression -> . expression OP_LESS_THAN expression
    (72) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (73) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (74) super_expression -> . expression OP_EQUALS_TWO expression
    (75) super_expression -> . expression OP_NOT_EQUALS expression
    (76) expression -> . term
    (77) expression -> . term OP_PLUS expression
    (78) expression -> . term OP_MINUS expression
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    super_expression               shift and go to state 192
    expression                     shift and go to state 118
    term                           shift and go to state 112
    fact                           shift and go to state 113
    var_cte                        shift and go to state 114

state 154

    (70) super_expression -> expression OP_GREATER_THAN . expression
    (76) expression -> . term
    (77) expression -> . term OP_PLUS expression
    (78) expression -> . term OP_MINUS expression
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    expression                     shift and go to state 193
    term                           shift and go to state 112
    fact                           shift and go to state 113
    var_cte                        shift and go to state 114

state 155

    (71) super_expression -> expression OP_LESS_THAN . expression
    (76) expression -> . term
    (77) expression -> . term OP_PLUS expression
    (78) expression -> . term OP_MINUS expression
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    expression                     shift and go to state 194
    term                           shift and go to state 112
    fact                           shift and go to state 113
    var_cte                        shift and go to state 114

state 156

    (72) super_expression -> expression OP_GREATER_EQUALS_THAN . expression
    (76) expression -> . term
    (77) expression -> . term OP_PLUS expression
    (78) expression -> . term OP_MINUS expression
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    expression                     shift and go to state 195
    term                           shift and go to state 112
    fact                           shift and go to state 113
    var_cte                        shift and go to state 114

state 157

    (73) super_expression -> expression OP_LESS_EQUALS_THAN . expression
    (76) expression -> . term
    (77) expression -> . term OP_PLUS expression
    (78) expression -> . term OP_MINUS expression
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    expression                     shift and go to state 196
    term                           shift and go to state 112
    fact                           shift and go to state 113
    var_cte                        shift and go to state 114

state 158

    (74) super_expression -> expression OP_EQUALS_TWO . expression
    (76) expression -> . term
    (77) expression -> . term OP_PLUS expression
    (78) expression -> . term OP_MINUS expression
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    expression                     shift and go to state 197
    term                           shift and go to state 112
    fact                           shift and go to state 113
    var_cte                        shift and go to state 114

state 159

    (75) super_expression -> expression OP_NOT_EQUALS . expression
    (76) expression -> . term
    (77) expression -> . term OP_PLUS expression
    (78) expression -> . term OP_MINUS expression
    (79) term -> . fact
    (80) term -> . fact OP_DIVISION term
    (81) term -> . fact OP_TIMES term
    (82) fact -> . var_cte
    (83) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    expression                     shift and go to state 198
    term                           shift and go to state 112
    fact                           shift and go to state 113
    var_cte                        shift and go to state 114

state 160

    (43) for -> FOR OP_LPAREN assigment condition_super_expression . SEMICOLON increment OP_RPAREN bloque

    SEMICOLON       shift and go to state 199


state 161

    (59) single_expression -> single_term OP_PLUS single_expression .

    SEMICOLON       reduce using rule 59 (single_expression -> single_term OP_PLUS single_expression .)
    OP_RPAREN       reduce using rule 59 (single_expression -> single_term OP_PLUS single_expression .)
    COMA            reduce using rule 59 (single_expression -> single_term OP_PLUS single_expression .)


state 162

    (60) single_expression -> single_term OP_MINUS single_expression .

    SEMICOLON       reduce using rule 60 (single_expression -> single_term OP_MINUS single_expression .)
    OP_RPAREN       reduce using rule 60 (single_expression -> single_term OP_MINUS single_expression .)
    COMA            reduce using rule 60 (single_expression -> single_term OP_MINUS single_expression .)


state 163

    (62) single_term -> single_fact OP_DIVISION single_term .

    OP_PLUS         reduce using rule 62 (single_term -> single_fact OP_DIVISION single_term .)
    OP_MINUS        reduce using rule 62 (single_term -> single_fact OP_DIVISION single_term .)
    SEMICOLON       reduce using rule 62 (single_term -> single_fact OP_DIVISION single_term .)
    OP_RPAREN       reduce using rule 62 (single_term -> single_fact OP_DIVISION single_term .)
    COMA            reduce using rule 62 (single_term -> single_fact OP_DIVISION single_term .)


state 164

    (63) single_term -> single_fact OP_TIMES single_term .

    OP_PLUS         reduce using rule 63 (single_term -> single_fact OP_TIMES single_term .)
    OP_MINUS        reduce using rule 63 (single_term -> single_fact OP_TIMES single_term .)
    SEMICOLON       reduce using rule 63 (single_term -> single_fact OP_TIMES single_term .)
    OP_RPAREN       reduce using rule 63 (single_term -> single_fact OP_TIMES single_term .)
    COMA            reduce using rule 63 (single_term -> single_fact OP_TIMES single_term .)


state 165

    (65) single_fact -> OP_LPAREN single_expression OP_RPAREN .

    OP_DIVISION     reduce using rule 65 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)
    OP_TIMES        reduce using rule 65 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)
    OP_PLUS         reduce using rule 65 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)
    OP_MINUS        reduce using rule 65 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)
    SEMICOLON       reduce using rule 65 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)
    OP_RPAREN       reduce using rule 65 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)
    COMA            reduce using rule 65 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)


state 166

    (89) figure_creation -> FIGURE ID OP_TWO_POINTS figure . POSSESS bloque_figura

    POSSESS         shift and go to state 200


state 167

    (90) figure -> POINT .

    POSSESS         reduce using rule 90 (figure -> POINT .)


state 168

    (91) figure -> LINE .

    POSSESS         reduce using rule 91 (figure -> LINE .)


state 169

    (92) figure -> SQUARE .

    POSSESS         reduce using rule 92 (figure -> SQUARE .)


state 170

    (93) figure -> RECTANGLE .

    POSSESS         reduce using rule 93 (figure -> RECTANGLE .)


state 171

    (94) figure -> TRIANGLE .

    POSSESS         reduce using rule 94 (figure -> TRIANGLE .)


state 172

    (95) figure -> CIRCLE .

    POSSESS         reduce using rule 95 (figure -> CIRCLE .)


state 173

    (45) function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .

    RCURLY_BRACKET  reduce using rule 45 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    ID              reduce using rule 45 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    IF              reduce using rule 45 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    PRINT           reduce using rule 45 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    FOR             reduce using rule 45 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    RETURN          reduce using rule 45 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    FIGURE          reduce using rule 45 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)


state 174

    (47) function_call_prime -> COMA ID function_call_prime .

    OP_RPAREN       reduce using rule 47 (function_call_prime -> COMA ID function_call_prime .)


state 175

    (83) fact -> OP_LPAREN mega_expression OP_RPAREN .

    OP_DIVISION     reduce using rule 83 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_TIMES        reduce using rule 83 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_PLUS         reduce using rule 83 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_MINUS        reduce using rule 83 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_GREATER_THAN reduce using rule 83 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_LESS_THAN    reduce using rule 83 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_GREATER_EQUALS_THAN reduce using rule 83 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_LESS_EQUALS_THAN reduce using rule 83 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_EQUALS_TWO   reduce using rule 83 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_NOT_EQUALS   reduce using rule 83 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    AND             reduce using rule 83 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OR              reduce using rule 83 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_RPAREN       reduce using rule 83 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    SEMICOLON       reduce using rule 83 (fact -> OP_LPAREN mega_expression OP_RPAREN .)


state 176

    (34) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .
    (35) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque . ELSE bloque

    RCURLY_BRACKET  reduce using rule 34 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    ID              reduce using rule 34 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    IF              reduce using rule 34 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    PRINT           reduce using rule 34 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    FOR             reduce using rule 34 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    RETURN          reduce using rule 34 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    FIGURE          reduce using rule 34 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    ELSE            shift and go to state 201


state 177

    (50) condition_mega_expression -> condition_super_expression AND condition_super_expression .

    OP_RPAREN       reduce using rule 50 (condition_mega_expression -> condition_super_expression AND condition_super_expression .)


state 178

    (51) condition_mega_expression -> condition_super_expression OR condition_super_expression .

    OP_RPAREN       reduce using rule 51 (condition_mega_expression -> condition_super_expression OR condition_super_expression .)


state 179

    (52) condition_super_expression -> expression OP_GREATER_THAN expression .

    AND             reduce using rule 52 (condition_super_expression -> expression OP_GREATER_THAN expression .)
    OR              reduce using rule 52 (condition_super_expression -> expression OP_GREATER_THAN expression .)
    OP_RPAREN       reduce using rule 52 (condition_super_expression -> expression OP_GREATER_THAN expression .)
    SEMICOLON       reduce using rule 52 (condition_super_expression -> expression OP_GREATER_THAN expression .)


state 180

    (53) condition_super_expression -> expression OP_LESS_THAN expression .

    AND             reduce using rule 53 (condition_super_expression -> expression OP_LESS_THAN expression .)
    OR              reduce using rule 53 (condition_super_expression -> expression OP_LESS_THAN expression .)
    OP_RPAREN       reduce using rule 53 (condition_super_expression -> expression OP_LESS_THAN expression .)
    SEMICOLON       reduce using rule 53 (condition_super_expression -> expression OP_LESS_THAN expression .)


state 181

    (54) condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression .

    AND             reduce using rule 54 (condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    OR              reduce using rule 54 (condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    OP_RPAREN       reduce using rule 54 (condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    SEMICOLON       reduce using rule 54 (condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression .)


state 182

    (55) condition_super_expression -> expression OP_LESS_EQUALS_THAN expression .

    AND             reduce using rule 55 (condition_super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    OR              reduce using rule 55 (condition_super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    OP_RPAREN       reduce using rule 55 (condition_super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    SEMICOLON       reduce using rule 55 (condition_super_expression -> expression OP_LESS_EQUALS_THAN expression .)


state 183

    (56) condition_super_expression -> expression OP_EQUALS_TWO expression .

    AND             reduce using rule 56 (condition_super_expression -> expression OP_EQUALS_TWO expression .)
    OR              reduce using rule 56 (condition_super_expression -> expression OP_EQUALS_TWO expression .)
    OP_RPAREN       reduce using rule 56 (condition_super_expression -> expression OP_EQUALS_TWO expression .)
    SEMICOLON       reduce using rule 56 (condition_super_expression -> expression OP_EQUALS_TWO expression .)


state 184

    (57) condition_super_expression -> expression OP_NOT_EQUALS expression .

    AND             reduce using rule 57 (condition_super_expression -> expression OP_NOT_EQUALS expression .)
    OR              reduce using rule 57 (condition_super_expression -> expression OP_NOT_EQUALS expression .)
    OP_RPAREN       reduce using rule 57 (condition_super_expression -> expression OP_NOT_EQUALS expression .)
    SEMICOLON       reduce using rule 57 (condition_super_expression -> expression OP_NOT_EQUALS expression .)


state 185

    (77) expression -> term OP_PLUS expression .

    OP_GREATER_THAN reduce using rule 77 (expression -> term OP_PLUS expression .)
    OP_LESS_THAN    reduce using rule 77 (expression -> term OP_PLUS expression .)
    OP_GREATER_EQUALS_THAN reduce using rule 77 (expression -> term OP_PLUS expression .)
    OP_LESS_EQUALS_THAN reduce using rule 77 (expression -> term OP_PLUS expression .)
    OP_EQUALS_TWO   reduce using rule 77 (expression -> term OP_PLUS expression .)
    OP_NOT_EQUALS   reduce using rule 77 (expression -> term OP_PLUS expression .)
    AND             reduce using rule 77 (expression -> term OP_PLUS expression .)
    OR              reduce using rule 77 (expression -> term OP_PLUS expression .)
    OP_PLUS         reduce using rule 77 (expression -> term OP_PLUS expression .)
    OP_RPAREN       reduce using rule 77 (expression -> term OP_PLUS expression .)
    SEMICOLON       reduce using rule 77 (expression -> term OP_PLUS expression .)


state 186

    (78) expression -> term OP_MINUS expression .

    OP_GREATER_THAN reduce using rule 78 (expression -> term OP_MINUS expression .)
    OP_LESS_THAN    reduce using rule 78 (expression -> term OP_MINUS expression .)
    OP_GREATER_EQUALS_THAN reduce using rule 78 (expression -> term OP_MINUS expression .)
    OP_LESS_EQUALS_THAN reduce using rule 78 (expression -> term OP_MINUS expression .)
    OP_EQUALS_TWO   reduce using rule 78 (expression -> term OP_MINUS expression .)
    OP_NOT_EQUALS   reduce using rule 78 (expression -> term OP_MINUS expression .)
    AND             reduce using rule 78 (expression -> term OP_MINUS expression .)
    OR              reduce using rule 78 (expression -> term OP_MINUS expression .)
    OP_PLUS         reduce using rule 78 (expression -> term OP_MINUS expression .)
    OP_RPAREN       reduce using rule 78 (expression -> term OP_MINUS expression .)
    SEMICOLON       reduce using rule 78 (expression -> term OP_MINUS expression .)


state 187

    (80) term -> fact OP_DIVISION term .

    OP_PLUS         reduce using rule 80 (term -> fact OP_DIVISION term .)
    OP_MINUS        reduce using rule 80 (term -> fact OP_DIVISION term .)
    OP_GREATER_THAN reduce using rule 80 (term -> fact OP_DIVISION term .)
    OP_LESS_THAN    reduce using rule 80 (term -> fact OP_DIVISION term .)
    OP_GREATER_EQUALS_THAN reduce using rule 80 (term -> fact OP_DIVISION term .)
    OP_LESS_EQUALS_THAN reduce using rule 80 (term -> fact OP_DIVISION term .)
    OP_EQUALS_TWO   reduce using rule 80 (term -> fact OP_DIVISION term .)
    OP_NOT_EQUALS   reduce using rule 80 (term -> fact OP_DIVISION term .)
    AND             reduce using rule 80 (term -> fact OP_DIVISION term .)
    OR              reduce using rule 80 (term -> fact OP_DIVISION term .)
    OP_RPAREN       reduce using rule 80 (term -> fact OP_DIVISION term .)
    SEMICOLON       reduce using rule 80 (term -> fact OP_DIVISION term .)


state 188

    (81) term -> fact OP_TIMES term .

    OP_PLUS         reduce using rule 81 (term -> fact OP_TIMES term .)
    OP_MINUS        reduce using rule 81 (term -> fact OP_TIMES term .)
    OP_GREATER_THAN reduce using rule 81 (term -> fact OP_TIMES term .)
    OP_LESS_THAN    reduce using rule 81 (term -> fact OP_TIMES term .)
    OP_GREATER_EQUALS_THAN reduce using rule 81 (term -> fact OP_TIMES term .)
    OP_LESS_EQUALS_THAN reduce using rule 81 (term -> fact OP_TIMES term .)
    OP_EQUALS_TWO   reduce using rule 81 (term -> fact OP_TIMES term .)
    OP_NOT_EQUALS   reduce using rule 81 (term -> fact OP_TIMES term .)
    AND             reduce using rule 81 (term -> fact OP_TIMES term .)
    OR              reduce using rule 81 (term -> fact OP_TIMES term .)
    OP_RPAREN       reduce using rule 81 (term -> fact OP_TIMES term .)
    SEMICOLON       reduce using rule 81 (term -> fact OP_TIMES term .)


state 189

    (36) printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .

    RCURLY_BRACKET  reduce using rule 36 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    ID              reduce using rule 36 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    IF              reduce using rule 36 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    PRINT           reduce using rule 36 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    FOR             reduce using rule 36 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    RETURN          reduce using rule 36 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    FIGURE          reduce using rule 36 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)


state 190

    (38) impression -> mega_expression OP_PLUS impression .

    OP_RPAREN       reduce using rule 38 (impression -> mega_expression OP_PLUS impression .)


state 191

    (67) mega_expression -> super_expression AND super_expression .

    OP_PLUS         reduce using rule 67 (mega_expression -> super_expression AND super_expression .)
    OP_RPAREN       reduce using rule 67 (mega_expression -> super_expression AND super_expression .)


state 192

    (68) mega_expression -> super_expression OR super_expression .

    OP_PLUS         reduce using rule 68 (mega_expression -> super_expression OR super_expression .)
    OP_RPAREN       reduce using rule 68 (mega_expression -> super_expression OR super_expression .)


state 193

    (70) super_expression -> expression OP_GREATER_THAN expression .

    AND             reduce using rule 70 (super_expression -> expression OP_GREATER_THAN expression .)
    OR              reduce using rule 70 (super_expression -> expression OP_GREATER_THAN expression .)
    OP_PLUS         reduce using rule 70 (super_expression -> expression OP_GREATER_THAN expression .)
    OP_RPAREN       reduce using rule 70 (super_expression -> expression OP_GREATER_THAN expression .)


state 194

    (71) super_expression -> expression OP_LESS_THAN expression .

    AND             reduce using rule 71 (super_expression -> expression OP_LESS_THAN expression .)
    OR              reduce using rule 71 (super_expression -> expression OP_LESS_THAN expression .)
    OP_PLUS         reduce using rule 71 (super_expression -> expression OP_LESS_THAN expression .)
    OP_RPAREN       reduce using rule 71 (super_expression -> expression OP_LESS_THAN expression .)


state 195

    (72) super_expression -> expression OP_GREATER_EQUALS_THAN expression .

    AND             reduce using rule 72 (super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    OR              reduce using rule 72 (super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    OP_PLUS         reduce using rule 72 (super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    OP_RPAREN       reduce using rule 72 (super_expression -> expression OP_GREATER_EQUALS_THAN expression .)


state 196

    (73) super_expression -> expression OP_LESS_EQUALS_THAN expression .

    AND             reduce using rule 73 (super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    OR              reduce using rule 73 (super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    OP_PLUS         reduce using rule 73 (super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    OP_RPAREN       reduce using rule 73 (super_expression -> expression OP_LESS_EQUALS_THAN expression .)


state 197

    (74) super_expression -> expression OP_EQUALS_TWO expression .

    AND             reduce using rule 74 (super_expression -> expression OP_EQUALS_TWO expression .)
    OR              reduce using rule 74 (super_expression -> expression OP_EQUALS_TWO expression .)
    OP_PLUS         reduce using rule 74 (super_expression -> expression OP_EQUALS_TWO expression .)
    OP_RPAREN       reduce using rule 74 (super_expression -> expression OP_EQUALS_TWO expression .)


state 198

    (75) super_expression -> expression OP_NOT_EQUALS expression .

    AND             reduce using rule 75 (super_expression -> expression OP_NOT_EQUALS expression .)
    OR              reduce using rule 75 (super_expression -> expression OP_NOT_EQUALS expression .)
    OP_PLUS         reduce using rule 75 (super_expression -> expression OP_NOT_EQUALS expression .)
    OP_RPAREN       reduce using rule 75 (super_expression -> expression OP_NOT_EQUALS expression .)


state 199

    (43) for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON . increment OP_RPAREN bloque
    (39) increment -> . ID OP_PLUS_EQUALS single_expression SEMICOLON
    (40) increment -> . ID OP_MINUS_EQUALS single_expression SEMICOLON
    (41) increment -> . ID OP_PLUS OP_PLUS SEMICOLON
    (42) increment -> . ID OP_MINUS OP_MINUS SEMICOLON

    ID              shift and go to state 203

    increment                      shift and go to state 202

state 200

    (89) figure_creation -> FIGURE ID OP_TWO_POINTS figure POSSESS . bloque_figura
    (96) bloque_figura -> . LCURLY_BRACKET bloque_figura_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 205

    bloque_figura                  shift and go to state 204

state 201

    (35) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE . bloque
    (22) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 46

    bloque                         shift and go to state 206

state 202

    (43) for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment . OP_RPAREN bloque

    OP_RPAREN       shift and go to state 207


state 203

    (39) increment -> ID . OP_PLUS_EQUALS single_expression SEMICOLON
    (40) increment -> ID . OP_MINUS_EQUALS single_expression SEMICOLON
    (41) increment -> ID . OP_PLUS OP_PLUS SEMICOLON
    (42) increment -> ID . OP_MINUS OP_MINUS SEMICOLON

    OP_PLUS_EQUALS  shift and go to state 82
    OP_MINUS_EQUALS shift and go to state 83
    OP_PLUS         shift and go to state 84
    OP_MINUS        shift and go to state 85


state 204

    (89) figure_creation -> FIGURE ID OP_TWO_POINTS figure POSSESS bloque_figura .

    RCURLY_BRACKET  reduce using rule 89 (figure_creation -> FIGURE ID OP_TWO_POINTS figure POSSESS bloque_figura .)
    ID              reduce using rule 89 (figure_creation -> FIGURE ID OP_TWO_POINTS figure POSSESS bloque_figura .)
    IF              reduce using rule 89 (figure_creation -> FIGURE ID OP_TWO_POINTS figure POSSESS bloque_figura .)
    PRINT           reduce using rule 89 (figure_creation -> FIGURE ID OP_TWO_POINTS figure POSSESS bloque_figura .)
    FOR             reduce using rule 89 (figure_creation -> FIGURE ID OP_TWO_POINTS figure POSSESS bloque_figura .)
    RETURN          reduce using rule 89 (figure_creation -> FIGURE ID OP_TWO_POINTS figure POSSESS bloque_figura .)
    FIGURE          reduce using rule 89 (figure_creation -> FIGURE ID OP_TWO_POINTS figure POSSESS bloque_figura .)


state 205

    (96) bloque_figura -> LCURLY_BRACKET . bloque_figura_primo RCURLY_BRACKET
    (97) bloque_figura_primo -> . bloque_figura_primo figura_attr
    (98) bloque_figura_primo -> . epsilon
    (103) epsilon -> .

    RCURLY_BRACKET  reduce using rule 103 (epsilon -> .)
    COLOR           reduce using rule 103 (epsilon -> .)
    SIZE            reduce using rule 103 (epsilon -> .)
    VECTOR          reduce using rule 103 (epsilon -> .)

    bloque_figura_primo            shift and go to state 208
    epsilon                        shift and go to state 209

state 206

    (35) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .

    RCURLY_BRACKET  reduce using rule 35 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    ID              reduce using rule 35 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    IF              reduce using rule 35 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    PRINT           reduce using rule 35 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    FOR             reduce using rule 35 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    RETURN          reduce using rule 35 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    FIGURE          reduce using rule 35 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)


state 207

    (43) for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN . bloque
    (22) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 46

    bloque                         shift and go to state 210

state 208

    (96) bloque_figura -> LCURLY_BRACKET bloque_figura_primo . RCURLY_BRACKET
    (97) bloque_figura_primo -> bloque_figura_primo . figura_attr
    (99) figura_attr -> . vector
    (100) figura_attr -> . COLOR OP_TWO_POINTS ID SEMICOLON
    (101) figura_attr -> . SIZE OP_TWO_POINTS single_expression SEMICOLON
    (102) vector -> . VECTOR ID OP_TWO_POINTS OP_LPAREN single_expression COMA single_expression OP_RPAREN SEMICOLON

    RCURLY_BRACKET  shift and go to state 211
    COLOR           shift and go to state 214
    SIZE            shift and go to state 215
    VECTOR          shift and go to state 216

    figura_attr                    shift and go to state 212
    vector                         shift and go to state 213

state 209

    (98) bloque_figura_primo -> epsilon .

    RCURLY_BRACKET  reduce using rule 98 (bloque_figura_primo -> epsilon .)
    COLOR           reduce using rule 98 (bloque_figura_primo -> epsilon .)
    SIZE            reduce using rule 98 (bloque_figura_primo -> epsilon .)
    VECTOR          reduce using rule 98 (bloque_figura_primo -> epsilon .)


state 210

    (43) for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .

    RCURLY_BRACKET  reduce using rule 43 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    ID              reduce using rule 43 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    IF              reduce using rule 43 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    PRINT           reduce using rule 43 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    FOR             reduce using rule 43 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    RETURN          reduce using rule 43 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    FIGURE          reduce using rule 43 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)


state 211

    (96) bloque_figura -> LCURLY_BRACKET bloque_figura_primo RCURLY_BRACKET .

    RCURLY_BRACKET  reduce using rule 96 (bloque_figura -> LCURLY_BRACKET bloque_figura_primo RCURLY_BRACKET .)
    ID              reduce using rule 96 (bloque_figura -> LCURLY_BRACKET bloque_figura_primo RCURLY_BRACKET .)
    IF              reduce using rule 96 (bloque_figura -> LCURLY_BRACKET bloque_figura_primo RCURLY_BRACKET .)
    PRINT           reduce using rule 96 (bloque_figura -> LCURLY_BRACKET bloque_figura_primo RCURLY_BRACKET .)
    FOR             reduce using rule 96 (bloque_figura -> LCURLY_BRACKET bloque_figura_primo RCURLY_BRACKET .)
    RETURN          reduce using rule 96 (bloque_figura -> LCURLY_BRACKET bloque_figura_primo RCURLY_BRACKET .)
    FIGURE          reduce using rule 96 (bloque_figura -> LCURLY_BRACKET bloque_figura_primo RCURLY_BRACKET .)


state 212

    (97) bloque_figura_primo -> bloque_figura_primo figura_attr .

    RCURLY_BRACKET  reduce using rule 97 (bloque_figura_primo -> bloque_figura_primo figura_attr .)
    COLOR           reduce using rule 97 (bloque_figura_primo -> bloque_figura_primo figura_attr .)
    SIZE            reduce using rule 97 (bloque_figura_primo -> bloque_figura_primo figura_attr .)
    VECTOR          reduce using rule 97 (bloque_figura_primo -> bloque_figura_primo figura_attr .)


state 213

    (99) figura_attr -> vector .

    RCURLY_BRACKET  reduce using rule 99 (figura_attr -> vector .)
    COLOR           reduce using rule 99 (figura_attr -> vector .)
    SIZE            reduce using rule 99 (figura_attr -> vector .)
    VECTOR          reduce using rule 99 (figura_attr -> vector .)


state 214

    (100) figura_attr -> COLOR . OP_TWO_POINTS ID SEMICOLON

    OP_TWO_POINTS   shift and go to state 217


state 215

    (101) figura_attr -> SIZE . OP_TWO_POINTS single_expression SEMICOLON

    OP_TWO_POINTS   shift and go to state 218


state 216

    (102) vector -> VECTOR . ID OP_TWO_POINTS OP_LPAREN single_expression COMA single_expression OP_RPAREN SEMICOLON

    ID              shift and go to state 219


state 217

    (100) figura_attr -> COLOR OP_TWO_POINTS . ID SEMICOLON

    ID              shift and go to state 220


state 218

    (101) figura_attr -> SIZE OP_TWO_POINTS . single_expression SEMICOLON
    (58) single_expression -> . single_term
    (59) single_expression -> . single_term OP_PLUS single_expression
    (60) single_expression -> . single_term OP_MINUS single_expression
    (61) single_term -> . single_fact
    (62) single_term -> . single_fact OP_DIVISION single_term
    (63) single_term -> . single_fact OP_TIMES single_term
    (64) single_fact -> . var_cte
    (65) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 94
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    single_expression              shift and go to state 221
    single_term                    shift and go to state 91
    single_fact                    shift and go to state 92
    var_cte                        shift and go to state 93

state 219

    (102) vector -> VECTOR ID . OP_TWO_POINTS OP_LPAREN single_expression COMA single_expression OP_RPAREN SEMICOLON

    OP_TWO_POINTS   shift and go to state 222


state 220

    (100) figura_attr -> COLOR OP_TWO_POINTS ID . SEMICOLON

    SEMICOLON       shift and go to state 223


state 221

    (101) figura_attr -> SIZE OP_TWO_POINTS single_expression . SEMICOLON

    SEMICOLON       shift and go to state 224


state 222

    (102) vector -> VECTOR ID OP_TWO_POINTS . OP_LPAREN single_expression COMA single_expression OP_RPAREN SEMICOLON

    OP_LPAREN       shift and go to state 225


state 223

    (100) figura_attr -> COLOR OP_TWO_POINTS ID SEMICOLON .

    RCURLY_BRACKET  reduce using rule 100 (figura_attr -> COLOR OP_TWO_POINTS ID SEMICOLON .)
    COLOR           reduce using rule 100 (figura_attr -> COLOR OP_TWO_POINTS ID SEMICOLON .)
    SIZE            reduce using rule 100 (figura_attr -> COLOR OP_TWO_POINTS ID SEMICOLON .)
    VECTOR          reduce using rule 100 (figura_attr -> COLOR OP_TWO_POINTS ID SEMICOLON .)


state 224

    (101) figura_attr -> SIZE OP_TWO_POINTS single_expression SEMICOLON .

    RCURLY_BRACKET  reduce using rule 101 (figura_attr -> SIZE OP_TWO_POINTS single_expression SEMICOLON .)
    COLOR           reduce using rule 101 (figura_attr -> SIZE OP_TWO_POINTS single_expression SEMICOLON .)
    SIZE            reduce using rule 101 (figura_attr -> SIZE OP_TWO_POINTS single_expression SEMICOLON .)
    VECTOR          reduce using rule 101 (figura_attr -> SIZE OP_TWO_POINTS single_expression SEMICOLON .)


state 225

    (102) vector -> VECTOR ID OP_TWO_POINTS OP_LPAREN . single_expression COMA single_expression OP_RPAREN SEMICOLON
    (58) single_expression -> . single_term
    (59) single_expression -> . single_term OP_PLUS single_expression
    (60) single_expression -> . single_term OP_MINUS single_expression
    (61) single_term -> . single_fact
    (62) single_term -> . single_fact OP_DIVISION single_term
    (63) single_term -> . single_fact OP_TIMES single_term
    (64) single_fact -> . var_cte
    (65) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 94
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    single_expression              shift and go to state 226
    single_term                    shift and go to state 91
    single_fact                    shift and go to state 92
    var_cte                        shift and go to state 93

state 226

    (102) vector -> VECTOR ID OP_TWO_POINTS OP_LPAREN single_expression . COMA single_expression OP_RPAREN SEMICOLON

    COMA            shift and go to state 227


state 227

    (102) vector -> VECTOR ID OP_TWO_POINTS OP_LPAREN single_expression COMA . single_expression OP_RPAREN SEMICOLON
    (58) single_expression -> . single_term
    (59) single_expression -> . single_term OP_PLUS single_expression
    (60) single_expression -> . single_term OP_MINUS single_expression
    (61) single_term -> . single_fact
    (62) single_term -> . single_fact OP_DIVISION single_term
    (63) single_term -> . single_fact OP_TIMES single_term
    (64) single_fact -> . var_cte
    (65) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (84) var_cte -> . ID
    (85) var_cte -> . VAR_INT
    (86) var_cte -> . VAR_FLOAT
    (87) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 94
    ID              shift and go to state 31
    VAR_INT         shift and go to state 32
    VAR_FLOAT       shift and go to state 33
    VAR_STRING      shift and go to state 34

    single_expression              shift and go to state 228
    single_term                    shift and go to state 91
    single_fact                    shift and go to state 92
    var_cte                        shift and go to state 93

state 228

    (102) vector -> VECTOR ID OP_TWO_POINTS OP_LPAREN single_expression COMA single_expression . OP_RPAREN SEMICOLON

    OP_RPAREN       shift and go to state 229


state 229

    (102) vector -> VECTOR ID OP_TWO_POINTS OP_LPAREN single_expression COMA single_expression OP_RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 230


state 230

    (102) vector -> VECTOR ID OP_TWO_POINTS OP_LPAREN single_expression COMA single_expression OP_RPAREN SEMICOLON .

    RCURLY_BRACKET  reduce using rule 102 (vector -> VECTOR ID OP_TWO_POINTS OP_LPAREN single_expression COMA single_expression OP_RPAREN SEMICOLON .)
    COLOR           reduce using rule 102 (vector -> VECTOR ID OP_TWO_POINTS OP_LPAREN single_expression COMA single_expression OP_RPAREN SEMICOLON .)
    SIZE            reduce using rule 102 (vector -> VECTOR ID OP_TWO_POINTS OP_LPAREN single_expression COMA single_expression OP_RPAREN SEMICOLON .)
    VECTOR          reduce using rule 102 (vector -> VECTOR ID OP_TWO_POINTS OP_LPAREN single_expression COMA single_expression OP_RPAREN SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OP_PLUS in state 112 resolved as shift
WARNING: reduce/reduce conflict in state 23 resolved using rule (vars_prime -> epsilon)
WARNING: rejected rule (vars_prime1 -> epsilon) in state 23
