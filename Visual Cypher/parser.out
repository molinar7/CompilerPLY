Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    CARET
    POINT
    QUOT_MARK
    VAR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID LCURLY_BRACKET vars function main_function RCURLY_BRACKET
Rule 2     vars -> INT ID OP_EQUALS VAR_INT SEMICOLON vars
Rule 3     vars -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars
Rule 4     vars -> STRING ID OP_EQUALS VAR_STRING SEMICOLON vars
Rule 5     vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars
Rule 6     vars -> epsilon
Rule 7     function -> FUNCTION type ID OP_LPAREN parameters OP_RPAREN bloque function
Rule 8     function -> FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN bloque function
Rule 9     function -> epsilon
Rule 10    main_function -> MAIN OP_LPAREN OP_RPAREN bloque
Rule 11    type -> INT
Rule 12    type -> FLOAT
Rule 13    type -> STRING
Rule 14    type -> BOOLEAN
Rule 15    parameters -> type ID parameters
Rule 16    parameters -> COMA type ID parameters
Rule 17    parameters -> epsilon
Rule 18    bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET
Rule 19    bloque_primo -> bloque_primo statement
Rule 20    bloque_primo -> epsilon
Rule 21    statement -> assigment
Rule 22    statement -> if
Rule 23    statement -> printer
Rule 24    statement -> increment
Rule 25    statement -> vars
Rule 26    statement -> for
Rule 27    statement -> return
Rule 28    statement -> function_call
Rule 29    assigment -> ID OP_EQUALS single_expression SEMICOLON
Rule 30    if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque
Rule 31    if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque
Rule 32    printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON
Rule 33    impression -> mega_expression
Rule 34    impression -> mega_expression OP_PLUS impression
Rule 35    increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON
Rule 36    increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON
Rule 37    increment -> ID OP_PLUS OP_PLUS SEMICOLON
Rule 38    increment -> ID OP_MINUS OP_MINUS SEMICOLON
Rule 39    for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque
Rule 40    return -> RETURN mega_expression SEMICOLON
Rule 41    function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON
Rule 42    function_call_prime -> ID function_call_prime
Rule 43    function_call_prime -> COMA ID function_call_prime
Rule 44    function_call_prime -> epsilon
Rule 45    condition_mega_expression -> condition_super_expression
Rule 46    condition_mega_expression -> condition_super_expression AND condition_super_expression
Rule 47    condition_mega_expression -> condition_super_expression OR condition_super_expression
Rule 48    condition_super_expression -> expression OP_GREATER_THAN expression
Rule 49    condition_super_expression -> expression OP_LESS_THAN expression
Rule 50    condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression
Rule 51    condition_super_expression -> expression OP_LESS_EQUALS_THAN expression
Rule 52    condition_super_expression -> expression OP_EQUALS_TWO expression
Rule 53    condition_super_expression -> expression OP_NOT_EQUALS expression
Rule 54    single_expression -> single_term
Rule 55    single_expression -> single_term OP_PLUS single_expression
Rule 56    single_expression -> single_term OP_MINUS single_expression
Rule 57    single_term -> single_fact
Rule 58    single_term -> single_fact OP_DIVISION single_term
Rule 59    single_term -> single_fact OP_TIMES single_term
Rule 60    single_fact -> var_cte
Rule 61    single_fact -> OP_LPAREN single_expression OP_RPAREN
Rule 62    mega_expression -> super_expression
Rule 63    mega_expression -> super_expression AND super_expression
Rule 64    mega_expression -> super_expression OR super_expression
Rule 65    super_expression -> expression
Rule 66    super_expression -> expression OP_GREATER_THAN expression
Rule 67    super_expression -> expression OP_LESS_THAN expression
Rule 68    super_expression -> expression OP_GREATER_EQUALS_THAN expression
Rule 69    super_expression -> expression OP_LESS_EQUALS_THAN expression
Rule 70    super_expression -> expression OP_EQUALS_TWO expression
Rule 71    super_expression -> expression OP_NOT_EQUALS expression
Rule 72    expression -> term
Rule 73    expression -> term OP_PLUS expression
Rule 74    expression -> term OP_MINUS expression
Rule 75    term -> fact
Rule 76    term -> fact OP_DIVISION term
Rule 77    term -> fact OP_TIMES term
Rule 78    fact -> var_cte
Rule 79    fact -> OP_LPAREN mega_expression OP_RPAREN
Rule 80    var_cte -> ID
Rule 81    var_cte -> VAR_INT
Rule 82    var_cte -> VAR_FLOAT
Rule 83    var_cte -> VAR_STRING
Rule 84    epsilon -> <empty>

Terminals, with rules where they appear

AND                  : 46 63
BOOLEAN              : 5 14
CARET                : 
COMA                 : 16 43
ELSE                 : 31
FLOAT                : 3 12
FOR                  : 39
FUNCTION             : 7 8
ID                   : 1 2 3 4 5 7 8 15 16 29 35 36 37 38 41 42 43 80
IF                   : 30 31
INT                  : 2 11
LCURLY_BRACKET       : 1 18
MAIN                 : 10
OP_DIVISION          : 58 76
OP_EQUALS            : 2 3 4 5 29
OP_EQUALS_TWO        : 52 70
OP_GREATER_EQUALS_THAN : 50 68
OP_GREATER_THAN      : 48 66
OP_LESS_EQUALS_THAN  : 51 69
OP_LESS_THAN         : 49 67
OP_LPAREN            : 7 8 10 30 31 32 39 41 61 79
OP_MINUS             : 38 38 56 74
OP_MINUS_EQUALS      : 36
OP_NOT_EQUALS        : 53 71
OP_PLUS              : 34 37 37 55 73
OP_PLUS_EQUALS       : 35
OP_RPAREN            : 7 8 10 30 31 32 39 41 61 79
OP_TIMES             : 59 77
OR                   : 47 64
POINT                : 
PRINT                : 32
PROGRAM              : 1
QUOT_MARK            : 
RCURLY_BRACKET       : 1 18
RETURN               : 40
SEMICOLON            : 2 3 4 5 29 32 35 36 37 38 39 40 41
STRING               : 4 13
VAR                  : 
VAR_BOOLEAN          : 5
VAR_FLOAT            : 3 82
VAR_INT              : 2 81
VAR_STRING           : 4 83
VOID                 : 8
error                : 

Nonterminals, with rules where they appear

assigment            : 21 39
bloque               : 7 8 10 30 31 31 39
bloque_primo         : 18 19
condition_mega_expression : 30 31
condition_super_expression : 39 45 46 46 47 47
epsilon              : 6 9 17 20 44
expression           : 48 48 49 49 50 50 51 51 52 52 53 53 65 66 66 67 67 68 68 69 69 70 70 71 71 73 74
fact                 : 75 76 77
for                  : 26
function             : 1 7 8
function_call        : 28
function_call_prime  : 41 42 43
if                   : 22
impression           : 32 34
increment            : 24 39
main_function        : 1
mega_expression      : 33 34 40 79
parameters           : 7 8 15 16
printer              : 23
program              : 0
return               : 27
single_expression    : 29 35 36 55 56 61
single_fact          : 57 58 59
single_term          : 54 55 56 58 59
statement            : 19
super_expression     : 62 63 63 64 64
term                 : 72 73 74 76 77
type                 : 7 15 16
var_cte              : 60 78
vars                 : 1 2 3 4 5 25

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID LCURLY_BRACKET vars function main_function RCURLY_BRACKET

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID LCURLY_BRACKET vars function main_function RCURLY_BRACKET

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . LCURLY_BRACKET vars function main_function RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 4


state 4

    (1) program -> PROGRAM ID LCURLY_BRACKET . vars function main_function RCURLY_BRACKET
    (2) vars -> . INT ID OP_EQUALS VAR_INT SEMICOLON vars
    (3) vars -> . FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars
    (4) vars -> . STRING ID OP_EQUALS VAR_STRING SEMICOLON vars
    (5) vars -> . BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars
    (6) vars -> . epsilon
    (84) epsilon -> .

    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    BOOLEAN         shift and go to state 9
    FUNCTION        reduce using rule 84 (epsilon -> .)
    MAIN            reduce using rule 84 (epsilon -> .)

    vars                           shift and go to state 5
    epsilon                        shift and go to state 10

state 5

    (1) program -> PROGRAM ID LCURLY_BRACKET vars . function main_function RCURLY_BRACKET
    (7) function -> . FUNCTION type ID OP_LPAREN parameters OP_RPAREN bloque function
    (8) function -> . FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN bloque function
    (9) function -> . epsilon
    (84) epsilon -> .

    FUNCTION        shift and go to state 12
    MAIN            reduce using rule 84 (epsilon -> .)

    function                       shift and go to state 11
    epsilon                        shift and go to state 13

state 6

    (2) vars -> INT . ID OP_EQUALS VAR_INT SEMICOLON vars

    ID              shift and go to state 14


state 7

    (3) vars -> FLOAT . ID OP_EQUALS VAR_FLOAT SEMICOLON vars

    ID              shift and go to state 15


state 8

    (4) vars -> STRING . ID OP_EQUALS VAR_STRING SEMICOLON vars

    ID              shift and go to state 16


state 9

    (5) vars -> BOOLEAN . ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars

    ID              shift and go to state 17


state 10

    (6) vars -> epsilon .

    FUNCTION        reduce using rule 6 (vars -> epsilon .)
    MAIN            reduce using rule 6 (vars -> epsilon .)
    RCURLY_BRACKET  reduce using rule 6 (vars -> epsilon .)
    ID              reduce using rule 6 (vars -> epsilon .)
    IF              reduce using rule 6 (vars -> epsilon .)
    PRINT           reduce using rule 6 (vars -> epsilon .)
    INT             reduce using rule 6 (vars -> epsilon .)
    FLOAT           reduce using rule 6 (vars -> epsilon .)
    STRING          reduce using rule 6 (vars -> epsilon .)
    BOOLEAN         reduce using rule 6 (vars -> epsilon .)
    FOR             reduce using rule 6 (vars -> epsilon .)
    RETURN          reduce using rule 6 (vars -> epsilon .)


state 11

    (1) program -> PROGRAM ID LCURLY_BRACKET vars function . main_function RCURLY_BRACKET
    (10) main_function -> . MAIN OP_LPAREN OP_RPAREN bloque

    MAIN            shift and go to state 19

    main_function                  shift and go to state 18

state 12

    (7) function -> FUNCTION . type ID OP_LPAREN parameters OP_RPAREN bloque function
    (8) function -> FUNCTION . VOID ID OP_LPAREN parameters OP_RPAREN bloque function
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . STRING
    (14) type -> . BOOLEAN

    VOID            shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 24
    BOOLEAN         shift and go to state 25

    type                           shift and go to state 20

state 13

    (9) function -> epsilon .

    MAIN            reduce using rule 9 (function -> epsilon .)


state 14

    (2) vars -> INT ID . OP_EQUALS VAR_INT SEMICOLON vars

    OP_EQUALS       shift and go to state 26


state 15

    (3) vars -> FLOAT ID . OP_EQUALS VAR_FLOAT SEMICOLON vars

    OP_EQUALS       shift and go to state 27


state 16

    (4) vars -> STRING ID . OP_EQUALS VAR_STRING SEMICOLON vars

    OP_EQUALS       shift and go to state 28


state 17

    (5) vars -> BOOLEAN ID . OP_EQUALS VAR_BOOLEAN SEMICOLON vars

    OP_EQUALS       shift and go to state 29


state 18

    (1) program -> PROGRAM ID LCURLY_BRACKET vars function main_function . RCURLY_BRACKET

    RCURLY_BRACKET  shift and go to state 30


state 19

    (10) main_function -> MAIN . OP_LPAREN OP_RPAREN bloque

    OP_LPAREN       shift and go to state 31


state 20

    (7) function -> FUNCTION type . ID OP_LPAREN parameters OP_RPAREN bloque function

    ID              shift and go to state 32


state 21

    (8) function -> FUNCTION VOID . ID OP_LPAREN parameters OP_RPAREN bloque function

    ID              shift and go to state 33


state 22

    (11) type -> INT .

    ID              reduce using rule 11 (type -> INT .)


state 23

    (12) type -> FLOAT .

    ID              reduce using rule 12 (type -> FLOAT .)


state 24

    (13) type -> STRING .

    ID              reduce using rule 13 (type -> STRING .)


state 25

    (14) type -> BOOLEAN .

    ID              reduce using rule 14 (type -> BOOLEAN .)


state 26

    (2) vars -> INT ID OP_EQUALS . VAR_INT SEMICOLON vars

    VAR_INT         shift and go to state 34


state 27

    (3) vars -> FLOAT ID OP_EQUALS . VAR_FLOAT SEMICOLON vars

    VAR_FLOAT       shift and go to state 35


state 28

    (4) vars -> STRING ID OP_EQUALS . VAR_STRING SEMICOLON vars

    VAR_STRING      shift and go to state 36


state 29

    (5) vars -> BOOLEAN ID OP_EQUALS . VAR_BOOLEAN SEMICOLON vars

    VAR_BOOLEAN     shift and go to state 37


state 30

    (1) program -> PROGRAM ID LCURLY_BRACKET vars function main_function RCURLY_BRACKET .

    $end            reduce using rule 1 (program -> PROGRAM ID LCURLY_BRACKET vars function main_function RCURLY_BRACKET .)


state 31

    (10) main_function -> MAIN OP_LPAREN . OP_RPAREN bloque

    OP_RPAREN       shift and go to state 38


state 32

    (7) function -> FUNCTION type ID . OP_LPAREN parameters OP_RPAREN bloque function

    OP_LPAREN       shift and go to state 39


state 33

    (8) function -> FUNCTION VOID ID . OP_LPAREN parameters OP_RPAREN bloque function

    OP_LPAREN       shift and go to state 40


state 34

    (2) vars -> INT ID OP_EQUALS VAR_INT . SEMICOLON vars

    SEMICOLON       shift and go to state 41


state 35

    (3) vars -> FLOAT ID OP_EQUALS VAR_FLOAT . SEMICOLON vars

    SEMICOLON       shift and go to state 42


state 36

    (4) vars -> STRING ID OP_EQUALS VAR_STRING . SEMICOLON vars

    SEMICOLON       shift and go to state 43


state 37

    (5) vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN . SEMICOLON vars

    SEMICOLON       shift and go to state 44


state 38

    (10) main_function -> MAIN OP_LPAREN OP_RPAREN . bloque
    (18) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 46

    bloque                         shift and go to state 45

state 39

    (7) function -> FUNCTION type ID OP_LPAREN . parameters OP_RPAREN bloque function
    (15) parameters -> . type ID parameters
    (16) parameters -> . COMA type ID parameters
    (17) parameters -> . epsilon
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . STRING
    (14) type -> . BOOLEAN
    (84) epsilon -> .

    COMA            shift and go to state 49
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 24
    BOOLEAN         shift and go to state 25
    OP_RPAREN       reduce using rule 84 (epsilon -> .)

    type                           shift and go to state 47
    parameters                     shift and go to state 48
    epsilon                        shift and go to state 50

state 40

    (8) function -> FUNCTION VOID ID OP_LPAREN . parameters OP_RPAREN bloque function
    (15) parameters -> . type ID parameters
    (16) parameters -> . COMA type ID parameters
    (17) parameters -> . epsilon
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . STRING
    (14) type -> . BOOLEAN
    (84) epsilon -> .

    COMA            shift and go to state 49
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 24
    BOOLEAN         shift and go to state 25
    OP_RPAREN       reduce using rule 84 (epsilon -> .)

    parameters                     shift and go to state 51
    type                           shift and go to state 47
    epsilon                        shift and go to state 50

state 41

    (2) vars -> INT ID OP_EQUALS VAR_INT SEMICOLON . vars
    (2) vars -> . INT ID OP_EQUALS VAR_INT SEMICOLON vars
    (3) vars -> . FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars
    (4) vars -> . STRING ID OP_EQUALS VAR_STRING SEMICOLON vars
    (5) vars -> . BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars
    (6) vars -> . epsilon
    (84) epsilon -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    BOOLEAN         shift and go to state 9
    FUNCTION        reduce using rule 84 (epsilon -> .)
    MAIN            reduce using rule 84 (epsilon -> .)
    RCURLY_BRACKET  reduce using rule 84 (epsilon -> .)
    ID              reduce using rule 84 (epsilon -> .)
    IF              reduce using rule 84 (epsilon -> .)
    PRINT           reduce using rule 84 (epsilon -> .)
    FOR             reduce using rule 84 (epsilon -> .)
    RETURN          reduce using rule 84 (epsilon -> .)

  ! INT             [ reduce using rule 84 (epsilon -> .) ]
  ! FLOAT           [ reduce using rule 84 (epsilon -> .) ]
  ! STRING          [ reduce using rule 84 (epsilon -> .) ]
  ! BOOLEAN         [ reduce using rule 84 (epsilon -> .) ]

    vars                           shift and go to state 52
    epsilon                        shift and go to state 10

state 42

    (3) vars -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON . vars
    (2) vars -> . INT ID OP_EQUALS VAR_INT SEMICOLON vars
    (3) vars -> . FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars
    (4) vars -> . STRING ID OP_EQUALS VAR_STRING SEMICOLON vars
    (5) vars -> . BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars
    (6) vars -> . epsilon
    (84) epsilon -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    BOOLEAN         shift and go to state 9
    FUNCTION        reduce using rule 84 (epsilon -> .)
    MAIN            reduce using rule 84 (epsilon -> .)
    RCURLY_BRACKET  reduce using rule 84 (epsilon -> .)
    ID              reduce using rule 84 (epsilon -> .)
    IF              reduce using rule 84 (epsilon -> .)
    PRINT           reduce using rule 84 (epsilon -> .)
    FOR             reduce using rule 84 (epsilon -> .)
    RETURN          reduce using rule 84 (epsilon -> .)

  ! INT             [ reduce using rule 84 (epsilon -> .) ]
  ! FLOAT           [ reduce using rule 84 (epsilon -> .) ]
  ! STRING          [ reduce using rule 84 (epsilon -> .) ]
  ! BOOLEAN         [ reduce using rule 84 (epsilon -> .) ]

    vars                           shift and go to state 53
    epsilon                        shift and go to state 10

state 43

    (4) vars -> STRING ID OP_EQUALS VAR_STRING SEMICOLON . vars
    (2) vars -> . INT ID OP_EQUALS VAR_INT SEMICOLON vars
    (3) vars -> . FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars
    (4) vars -> . STRING ID OP_EQUALS VAR_STRING SEMICOLON vars
    (5) vars -> . BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars
    (6) vars -> . epsilon
    (84) epsilon -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    BOOLEAN         shift and go to state 9
    FUNCTION        reduce using rule 84 (epsilon -> .)
    MAIN            reduce using rule 84 (epsilon -> .)
    RCURLY_BRACKET  reduce using rule 84 (epsilon -> .)
    ID              reduce using rule 84 (epsilon -> .)
    IF              reduce using rule 84 (epsilon -> .)
    PRINT           reduce using rule 84 (epsilon -> .)
    FOR             reduce using rule 84 (epsilon -> .)
    RETURN          reduce using rule 84 (epsilon -> .)

  ! INT             [ reduce using rule 84 (epsilon -> .) ]
  ! FLOAT           [ reduce using rule 84 (epsilon -> .) ]
  ! STRING          [ reduce using rule 84 (epsilon -> .) ]
  ! BOOLEAN         [ reduce using rule 84 (epsilon -> .) ]

    vars                           shift and go to state 54
    epsilon                        shift and go to state 10

state 44

    (5) vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON . vars
    (2) vars -> . INT ID OP_EQUALS VAR_INT SEMICOLON vars
    (3) vars -> . FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars
    (4) vars -> . STRING ID OP_EQUALS VAR_STRING SEMICOLON vars
    (5) vars -> . BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars
    (6) vars -> . epsilon
    (84) epsilon -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    BOOLEAN         shift and go to state 9
    FUNCTION        reduce using rule 84 (epsilon -> .)
    MAIN            reduce using rule 84 (epsilon -> .)
    RCURLY_BRACKET  reduce using rule 84 (epsilon -> .)
    ID              reduce using rule 84 (epsilon -> .)
    IF              reduce using rule 84 (epsilon -> .)
    PRINT           reduce using rule 84 (epsilon -> .)
    FOR             reduce using rule 84 (epsilon -> .)
    RETURN          reduce using rule 84 (epsilon -> .)

  ! INT             [ reduce using rule 84 (epsilon -> .) ]
  ! FLOAT           [ reduce using rule 84 (epsilon -> .) ]
  ! STRING          [ reduce using rule 84 (epsilon -> .) ]
  ! BOOLEAN         [ reduce using rule 84 (epsilon -> .) ]

    vars                           shift and go to state 55
    epsilon                        shift and go to state 10

state 45

    (10) main_function -> MAIN OP_LPAREN OP_RPAREN bloque .

    RCURLY_BRACKET  reduce using rule 10 (main_function -> MAIN OP_LPAREN OP_RPAREN bloque .)


state 46

    (18) bloque -> LCURLY_BRACKET . bloque_primo RCURLY_BRACKET
    (19) bloque_primo -> . bloque_primo statement
    (20) bloque_primo -> . epsilon
    (84) epsilon -> .

    RCURLY_BRACKET  reduce using rule 84 (epsilon -> .)
    ID              reduce using rule 84 (epsilon -> .)
    IF              reduce using rule 84 (epsilon -> .)
    PRINT           reduce using rule 84 (epsilon -> .)
    INT             reduce using rule 84 (epsilon -> .)
    FLOAT           reduce using rule 84 (epsilon -> .)
    STRING          reduce using rule 84 (epsilon -> .)
    BOOLEAN         reduce using rule 84 (epsilon -> .)
    FOR             reduce using rule 84 (epsilon -> .)
    RETURN          reduce using rule 84 (epsilon -> .)

    bloque_primo                   shift and go to state 56
    epsilon                        shift and go to state 57

state 47

    (15) parameters -> type . ID parameters

    ID              shift and go to state 58


state 48

    (7) function -> FUNCTION type ID OP_LPAREN parameters . OP_RPAREN bloque function

    OP_RPAREN       shift and go to state 59


state 49

    (16) parameters -> COMA . type ID parameters
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . STRING
    (14) type -> . BOOLEAN

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 24
    BOOLEAN         shift and go to state 25

    type                           shift and go to state 60

state 50

    (17) parameters -> epsilon .

    OP_RPAREN       reduce using rule 17 (parameters -> epsilon .)


state 51

    (8) function -> FUNCTION VOID ID OP_LPAREN parameters . OP_RPAREN bloque function

    OP_RPAREN       shift and go to state 61


state 52

    (2) vars -> INT ID OP_EQUALS VAR_INT SEMICOLON vars .

    FUNCTION        reduce using rule 2 (vars -> INT ID OP_EQUALS VAR_INT SEMICOLON vars .)
    MAIN            reduce using rule 2 (vars -> INT ID OP_EQUALS VAR_INT SEMICOLON vars .)
    RCURLY_BRACKET  reduce using rule 2 (vars -> INT ID OP_EQUALS VAR_INT SEMICOLON vars .)
    ID              reduce using rule 2 (vars -> INT ID OP_EQUALS VAR_INT SEMICOLON vars .)
    IF              reduce using rule 2 (vars -> INT ID OP_EQUALS VAR_INT SEMICOLON vars .)
    PRINT           reduce using rule 2 (vars -> INT ID OP_EQUALS VAR_INT SEMICOLON vars .)
    INT             reduce using rule 2 (vars -> INT ID OP_EQUALS VAR_INT SEMICOLON vars .)
    FLOAT           reduce using rule 2 (vars -> INT ID OP_EQUALS VAR_INT SEMICOLON vars .)
    STRING          reduce using rule 2 (vars -> INT ID OP_EQUALS VAR_INT SEMICOLON vars .)
    BOOLEAN         reduce using rule 2 (vars -> INT ID OP_EQUALS VAR_INT SEMICOLON vars .)
    FOR             reduce using rule 2 (vars -> INT ID OP_EQUALS VAR_INT SEMICOLON vars .)
    RETURN          reduce using rule 2 (vars -> INT ID OP_EQUALS VAR_INT SEMICOLON vars .)


state 53

    (3) vars -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars .

    FUNCTION        reduce using rule 3 (vars -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars .)
    MAIN            reduce using rule 3 (vars -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars .)
    RCURLY_BRACKET  reduce using rule 3 (vars -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars .)
    ID              reduce using rule 3 (vars -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars .)
    IF              reduce using rule 3 (vars -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars .)
    PRINT           reduce using rule 3 (vars -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars .)
    INT             reduce using rule 3 (vars -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars .)
    FLOAT           reduce using rule 3 (vars -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars .)
    STRING          reduce using rule 3 (vars -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars .)
    BOOLEAN         reduce using rule 3 (vars -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars .)
    FOR             reduce using rule 3 (vars -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars .)
    RETURN          reduce using rule 3 (vars -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars .)


state 54

    (4) vars -> STRING ID OP_EQUALS VAR_STRING SEMICOLON vars .

    FUNCTION        reduce using rule 4 (vars -> STRING ID OP_EQUALS VAR_STRING SEMICOLON vars .)
    MAIN            reduce using rule 4 (vars -> STRING ID OP_EQUALS VAR_STRING SEMICOLON vars .)
    RCURLY_BRACKET  reduce using rule 4 (vars -> STRING ID OP_EQUALS VAR_STRING SEMICOLON vars .)
    ID              reduce using rule 4 (vars -> STRING ID OP_EQUALS VAR_STRING SEMICOLON vars .)
    IF              reduce using rule 4 (vars -> STRING ID OP_EQUALS VAR_STRING SEMICOLON vars .)
    PRINT           reduce using rule 4 (vars -> STRING ID OP_EQUALS VAR_STRING SEMICOLON vars .)
    INT             reduce using rule 4 (vars -> STRING ID OP_EQUALS VAR_STRING SEMICOLON vars .)
    FLOAT           reduce using rule 4 (vars -> STRING ID OP_EQUALS VAR_STRING SEMICOLON vars .)
    STRING          reduce using rule 4 (vars -> STRING ID OP_EQUALS VAR_STRING SEMICOLON vars .)
    BOOLEAN         reduce using rule 4 (vars -> STRING ID OP_EQUALS VAR_STRING SEMICOLON vars .)
    FOR             reduce using rule 4 (vars -> STRING ID OP_EQUALS VAR_STRING SEMICOLON vars .)
    RETURN          reduce using rule 4 (vars -> STRING ID OP_EQUALS VAR_STRING SEMICOLON vars .)


state 55

    (5) vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars .

    FUNCTION        reduce using rule 5 (vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars .)
    MAIN            reduce using rule 5 (vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars .)
    RCURLY_BRACKET  reduce using rule 5 (vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars .)
    ID              reduce using rule 5 (vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars .)
    IF              reduce using rule 5 (vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars .)
    PRINT           reduce using rule 5 (vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars .)
    INT             reduce using rule 5 (vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars .)
    FLOAT           reduce using rule 5 (vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars .)
    STRING          reduce using rule 5 (vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars .)
    BOOLEAN         reduce using rule 5 (vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars .)
    FOR             reduce using rule 5 (vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars .)
    RETURN          reduce using rule 5 (vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars .)


state 56

    (18) bloque -> LCURLY_BRACKET bloque_primo . RCURLY_BRACKET
    (19) bloque_primo -> bloque_primo . statement
    (21) statement -> . assigment
    (22) statement -> . if
    (23) statement -> . printer
    (24) statement -> . increment
    (25) statement -> . vars
    (26) statement -> . for
    (27) statement -> . return
    (28) statement -> . function_call
    (29) assigment -> . ID OP_EQUALS single_expression SEMICOLON
    (30) if -> . IF OP_LPAREN condition_mega_expression OP_RPAREN bloque
    (31) if -> . IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque
    (32) printer -> . PRINT OP_LPAREN impression OP_RPAREN SEMICOLON
    (35) increment -> . ID OP_PLUS_EQUALS single_expression SEMICOLON
    (36) increment -> . ID OP_MINUS_EQUALS single_expression SEMICOLON
    (37) increment -> . ID OP_PLUS OP_PLUS SEMICOLON
    (38) increment -> . ID OP_MINUS OP_MINUS SEMICOLON
    (2) vars -> . INT ID OP_EQUALS VAR_INT SEMICOLON vars
    (3) vars -> . FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars
    (4) vars -> . STRING ID OP_EQUALS VAR_STRING SEMICOLON vars
    (5) vars -> . BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars
    (6) vars -> . epsilon
    (39) for -> . FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque
    (40) return -> . RETURN mega_expression SEMICOLON
    (41) function_call -> . ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON
    (84) epsilon -> .

  ! shift/reduce conflict for RCURLY_BRACKET resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    RCURLY_BRACKET  shift and go to state 62
    ID              shift and go to state 72
    IF              shift and go to state 73
    PRINT           shift and go to state 74
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    BOOLEAN         shift and go to state 9
    FOR             shift and go to state 75
    RETURN          shift and go to state 76

  ! RCURLY_BRACKET  [ reduce using rule 84 (epsilon -> .) ]
  ! ID              [ reduce using rule 84 (epsilon -> .) ]
  ! IF              [ reduce using rule 84 (epsilon -> .) ]
  ! PRINT           [ reduce using rule 84 (epsilon -> .) ]
  ! INT             [ reduce using rule 84 (epsilon -> .) ]
  ! FLOAT           [ reduce using rule 84 (epsilon -> .) ]
  ! STRING          [ reduce using rule 84 (epsilon -> .) ]
  ! BOOLEAN         [ reduce using rule 84 (epsilon -> .) ]
  ! FOR             [ reduce using rule 84 (epsilon -> .) ]
  ! RETURN          [ reduce using rule 84 (epsilon -> .) ]

    statement                      shift and go to state 63
    assigment                      shift and go to state 64
    if                             shift and go to state 65
    printer                        shift and go to state 66
    increment                      shift and go to state 67
    vars                           shift and go to state 68
    for                            shift and go to state 69
    return                         shift and go to state 70
    function_call                  shift and go to state 71
    epsilon                        shift and go to state 10

state 57

    (20) bloque_primo -> epsilon .

    RCURLY_BRACKET  reduce using rule 20 (bloque_primo -> epsilon .)
    ID              reduce using rule 20 (bloque_primo -> epsilon .)
    IF              reduce using rule 20 (bloque_primo -> epsilon .)
    PRINT           reduce using rule 20 (bloque_primo -> epsilon .)
    INT             reduce using rule 20 (bloque_primo -> epsilon .)
    FLOAT           reduce using rule 20 (bloque_primo -> epsilon .)
    STRING          reduce using rule 20 (bloque_primo -> epsilon .)
    BOOLEAN         reduce using rule 20 (bloque_primo -> epsilon .)
    FOR             reduce using rule 20 (bloque_primo -> epsilon .)
    RETURN          reduce using rule 20 (bloque_primo -> epsilon .)


state 58

    (15) parameters -> type ID . parameters
    (15) parameters -> . type ID parameters
    (16) parameters -> . COMA type ID parameters
    (17) parameters -> . epsilon
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . STRING
    (14) type -> . BOOLEAN
    (84) epsilon -> .

    COMA            shift and go to state 49
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 24
    BOOLEAN         shift and go to state 25
    OP_RPAREN       reduce using rule 84 (epsilon -> .)

    type                           shift and go to state 47
    parameters                     shift and go to state 77
    epsilon                        shift and go to state 50

state 59

    (7) function -> FUNCTION type ID OP_LPAREN parameters OP_RPAREN . bloque function
    (18) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 46

    bloque                         shift and go to state 78

state 60

    (16) parameters -> COMA type . ID parameters

    ID              shift and go to state 79


state 61

    (8) function -> FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN . bloque function
    (18) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 46

    bloque                         shift and go to state 80

state 62

    (18) bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .

    RCURLY_BRACKET  reduce using rule 18 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    FUNCTION        reduce using rule 18 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    MAIN            reduce using rule 18 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    ELSE            reduce using rule 18 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    ID              reduce using rule 18 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    IF              reduce using rule 18 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    PRINT           reduce using rule 18 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    INT             reduce using rule 18 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    FLOAT           reduce using rule 18 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    STRING          reduce using rule 18 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    BOOLEAN         reduce using rule 18 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    FOR             reduce using rule 18 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)
    RETURN          reduce using rule 18 (bloque -> LCURLY_BRACKET bloque_primo RCURLY_BRACKET .)


state 63

    (19) bloque_primo -> bloque_primo statement .

    RCURLY_BRACKET  reduce using rule 19 (bloque_primo -> bloque_primo statement .)
    ID              reduce using rule 19 (bloque_primo -> bloque_primo statement .)
    IF              reduce using rule 19 (bloque_primo -> bloque_primo statement .)
    PRINT           reduce using rule 19 (bloque_primo -> bloque_primo statement .)
    INT             reduce using rule 19 (bloque_primo -> bloque_primo statement .)
    FLOAT           reduce using rule 19 (bloque_primo -> bloque_primo statement .)
    STRING          reduce using rule 19 (bloque_primo -> bloque_primo statement .)
    BOOLEAN         reduce using rule 19 (bloque_primo -> bloque_primo statement .)
    FOR             reduce using rule 19 (bloque_primo -> bloque_primo statement .)
    RETURN          reduce using rule 19 (bloque_primo -> bloque_primo statement .)


state 64

    (21) statement -> assigment .

    RCURLY_BRACKET  reduce using rule 21 (statement -> assigment .)
    ID              reduce using rule 21 (statement -> assigment .)
    IF              reduce using rule 21 (statement -> assigment .)
    PRINT           reduce using rule 21 (statement -> assigment .)
    INT             reduce using rule 21 (statement -> assigment .)
    FLOAT           reduce using rule 21 (statement -> assigment .)
    STRING          reduce using rule 21 (statement -> assigment .)
    BOOLEAN         reduce using rule 21 (statement -> assigment .)
    FOR             reduce using rule 21 (statement -> assigment .)
    RETURN          reduce using rule 21 (statement -> assigment .)


state 65

    (22) statement -> if .

    RCURLY_BRACKET  reduce using rule 22 (statement -> if .)
    ID              reduce using rule 22 (statement -> if .)
    IF              reduce using rule 22 (statement -> if .)
    PRINT           reduce using rule 22 (statement -> if .)
    INT             reduce using rule 22 (statement -> if .)
    FLOAT           reduce using rule 22 (statement -> if .)
    STRING          reduce using rule 22 (statement -> if .)
    BOOLEAN         reduce using rule 22 (statement -> if .)
    FOR             reduce using rule 22 (statement -> if .)
    RETURN          reduce using rule 22 (statement -> if .)


state 66

    (23) statement -> printer .

    RCURLY_BRACKET  reduce using rule 23 (statement -> printer .)
    ID              reduce using rule 23 (statement -> printer .)
    IF              reduce using rule 23 (statement -> printer .)
    PRINT           reduce using rule 23 (statement -> printer .)
    INT             reduce using rule 23 (statement -> printer .)
    FLOAT           reduce using rule 23 (statement -> printer .)
    STRING          reduce using rule 23 (statement -> printer .)
    BOOLEAN         reduce using rule 23 (statement -> printer .)
    FOR             reduce using rule 23 (statement -> printer .)
    RETURN          reduce using rule 23 (statement -> printer .)


state 67

    (24) statement -> increment .

    RCURLY_BRACKET  reduce using rule 24 (statement -> increment .)
    ID              reduce using rule 24 (statement -> increment .)
    IF              reduce using rule 24 (statement -> increment .)
    PRINT           reduce using rule 24 (statement -> increment .)
    INT             reduce using rule 24 (statement -> increment .)
    FLOAT           reduce using rule 24 (statement -> increment .)
    STRING          reduce using rule 24 (statement -> increment .)
    BOOLEAN         reduce using rule 24 (statement -> increment .)
    FOR             reduce using rule 24 (statement -> increment .)
    RETURN          reduce using rule 24 (statement -> increment .)


state 68

    (25) statement -> vars .

    RCURLY_BRACKET  reduce using rule 25 (statement -> vars .)
    ID              reduce using rule 25 (statement -> vars .)
    IF              reduce using rule 25 (statement -> vars .)
    PRINT           reduce using rule 25 (statement -> vars .)
    INT             reduce using rule 25 (statement -> vars .)
    FLOAT           reduce using rule 25 (statement -> vars .)
    STRING          reduce using rule 25 (statement -> vars .)
    BOOLEAN         reduce using rule 25 (statement -> vars .)
    FOR             reduce using rule 25 (statement -> vars .)
    RETURN          reduce using rule 25 (statement -> vars .)


state 69

    (26) statement -> for .

    RCURLY_BRACKET  reduce using rule 26 (statement -> for .)
    ID              reduce using rule 26 (statement -> for .)
    IF              reduce using rule 26 (statement -> for .)
    PRINT           reduce using rule 26 (statement -> for .)
    INT             reduce using rule 26 (statement -> for .)
    FLOAT           reduce using rule 26 (statement -> for .)
    STRING          reduce using rule 26 (statement -> for .)
    BOOLEAN         reduce using rule 26 (statement -> for .)
    FOR             reduce using rule 26 (statement -> for .)
    RETURN          reduce using rule 26 (statement -> for .)


state 70

    (27) statement -> return .

    RCURLY_BRACKET  reduce using rule 27 (statement -> return .)
    ID              reduce using rule 27 (statement -> return .)
    IF              reduce using rule 27 (statement -> return .)
    PRINT           reduce using rule 27 (statement -> return .)
    INT             reduce using rule 27 (statement -> return .)
    FLOAT           reduce using rule 27 (statement -> return .)
    STRING          reduce using rule 27 (statement -> return .)
    BOOLEAN         reduce using rule 27 (statement -> return .)
    FOR             reduce using rule 27 (statement -> return .)
    RETURN          reduce using rule 27 (statement -> return .)


state 71

    (28) statement -> function_call .

    RCURLY_BRACKET  reduce using rule 28 (statement -> function_call .)
    ID              reduce using rule 28 (statement -> function_call .)
    IF              reduce using rule 28 (statement -> function_call .)
    PRINT           reduce using rule 28 (statement -> function_call .)
    INT             reduce using rule 28 (statement -> function_call .)
    FLOAT           reduce using rule 28 (statement -> function_call .)
    STRING          reduce using rule 28 (statement -> function_call .)
    BOOLEAN         reduce using rule 28 (statement -> function_call .)
    FOR             reduce using rule 28 (statement -> function_call .)
    RETURN          reduce using rule 28 (statement -> function_call .)


state 72

    (29) assigment -> ID . OP_EQUALS single_expression SEMICOLON
    (35) increment -> ID . OP_PLUS_EQUALS single_expression SEMICOLON
    (36) increment -> ID . OP_MINUS_EQUALS single_expression SEMICOLON
    (37) increment -> ID . OP_PLUS OP_PLUS SEMICOLON
    (38) increment -> ID . OP_MINUS OP_MINUS SEMICOLON
    (41) function_call -> ID . OP_LPAREN function_call_prime OP_RPAREN SEMICOLON

    OP_EQUALS       shift and go to state 81
    OP_PLUS_EQUALS  shift and go to state 82
    OP_MINUS_EQUALS shift and go to state 83
    OP_PLUS         shift and go to state 84
    OP_MINUS        shift and go to state 85
    OP_LPAREN       shift and go to state 86


state 73

    (30) if -> IF . OP_LPAREN condition_mega_expression OP_RPAREN bloque
    (31) if -> IF . OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque

    OP_LPAREN       shift and go to state 87


state 74

    (32) printer -> PRINT . OP_LPAREN impression OP_RPAREN SEMICOLON

    OP_LPAREN       shift and go to state 88


state 75

    (39) for -> FOR . OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque

    OP_LPAREN       shift and go to state 89


state 76

    (40) return -> RETURN . mega_expression SEMICOLON
    (62) mega_expression -> . super_expression
    (63) mega_expression -> . super_expression AND super_expression
    (64) mega_expression -> . super_expression OR super_expression
    (65) super_expression -> . expression
    (66) super_expression -> . expression OP_GREATER_THAN expression
    (67) super_expression -> . expression OP_LESS_THAN expression
    (68) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (69) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (70) super_expression -> . expression OP_EQUALS_TWO expression
    (71) super_expression -> . expression OP_NOT_EQUALS expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    mega_expression                shift and go to state 90
    super_expression               shift and go to state 91
    expression                     shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 77

    (15) parameters -> type ID parameters .

    OP_RPAREN       reduce using rule 15 (parameters -> type ID parameters .)


state 78

    (7) function -> FUNCTION type ID OP_LPAREN parameters OP_RPAREN bloque . function
    (7) function -> . FUNCTION type ID OP_LPAREN parameters OP_RPAREN bloque function
    (8) function -> . FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN bloque function
    (9) function -> . epsilon
    (84) epsilon -> .

    FUNCTION        shift and go to state 12
    MAIN            reduce using rule 84 (epsilon -> .)

    function                       shift and go to state 101
    epsilon                        shift and go to state 13

state 79

    (16) parameters -> COMA type ID . parameters
    (15) parameters -> . type ID parameters
    (16) parameters -> . COMA type ID parameters
    (17) parameters -> . epsilon
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . STRING
    (14) type -> . BOOLEAN
    (84) epsilon -> .

    COMA            shift and go to state 49
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 24
    BOOLEAN         shift and go to state 25
    OP_RPAREN       reduce using rule 84 (epsilon -> .)

    type                           shift and go to state 47
    parameters                     shift and go to state 102
    epsilon                        shift and go to state 50

state 80

    (8) function -> FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN bloque . function
    (7) function -> . FUNCTION type ID OP_LPAREN parameters OP_RPAREN bloque function
    (8) function -> . FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN bloque function
    (9) function -> . epsilon
    (84) epsilon -> .

    FUNCTION        shift and go to state 12
    MAIN            reduce using rule 84 (epsilon -> .)

    function                       shift and go to state 103
    epsilon                        shift and go to state 13

state 81

    (29) assigment -> ID OP_EQUALS . single_expression SEMICOLON
    (54) single_expression -> . single_term
    (55) single_expression -> . single_term OP_PLUS single_expression
    (56) single_expression -> . single_term OP_MINUS single_expression
    (57) single_term -> . single_fact
    (58) single_term -> . single_fact OP_DIVISION single_term
    (59) single_term -> . single_fact OP_TIMES single_term
    (60) single_fact -> . var_cte
    (61) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    single_expression              shift and go to state 104
    single_term                    shift and go to state 105
    single_fact                    shift and go to state 106
    var_cte                        shift and go to state 107

state 82

    (35) increment -> ID OP_PLUS_EQUALS . single_expression SEMICOLON
    (54) single_expression -> . single_term
    (55) single_expression -> . single_term OP_PLUS single_expression
    (56) single_expression -> . single_term OP_MINUS single_expression
    (57) single_term -> . single_fact
    (58) single_term -> . single_fact OP_DIVISION single_term
    (59) single_term -> . single_fact OP_TIMES single_term
    (60) single_fact -> . var_cte
    (61) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    single_expression              shift and go to state 109
    single_term                    shift and go to state 105
    single_fact                    shift and go to state 106
    var_cte                        shift and go to state 107

state 83

    (36) increment -> ID OP_MINUS_EQUALS . single_expression SEMICOLON
    (54) single_expression -> . single_term
    (55) single_expression -> . single_term OP_PLUS single_expression
    (56) single_expression -> . single_term OP_MINUS single_expression
    (57) single_term -> . single_fact
    (58) single_term -> . single_fact OP_DIVISION single_term
    (59) single_term -> . single_fact OP_TIMES single_term
    (60) single_fact -> . var_cte
    (61) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    single_expression              shift and go to state 110
    single_term                    shift and go to state 105
    single_fact                    shift and go to state 106
    var_cte                        shift and go to state 107

state 84

    (37) increment -> ID OP_PLUS . OP_PLUS SEMICOLON

    OP_PLUS         shift and go to state 111


state 85

    (38) increment -> ID OP_MINUS . OP_MINUS SEMICOLON

    OP_MINUS        shift and go to state 112


state 86

    (41) function_call -> ID OP_LPAREN . function_call_prime OP_RPAREN SEMICOLON
    (42) function_call_prime -> . ID function_call_prime
    (43) function_call_prime -> . COMA ID function_call_prime
    (44) function_call_prime -> . epsilon
    (84) epsilon -> .

    ID              shift and go to state 113
    COMA            shift and go to state 115
    OP_RPAREN       reduce using rule 84 (epsilon -> .)

    function_call_prime            shift and go to state 114
    epsilon                        shift and go to state 116

state 87

    (30) if -> IF OP_LPAREN . condition_mega_expression OP_RPAREN bloque
    (31) if -> IF OP_LPAREN . condition_mega_expression OP_RPAREN bloque ELSE bloque
    (45) condition_mega_expression -> . condition_super_expression
    (46) condition_mega_expression -> . condition_super_expression AND condition_super_expression
    (47) condition_mega_expression -> . condition_super_expression OR condition_super_expression
    (48) condition_super_expression -> . expression OP_GREATER_THAN expression
    (49) condition_super_expression -> . expression OP_LESS_THAN expression
    (50) condition_super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (51) condition_super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (52) condition_super_expression -> . expression OP_EQUALS_TWO expression
    (53) condition_super_expression -> . expression OP_NOT_EQUALS expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    condition_mega_expression      shift and go to state 117
    condition_super_expression     shift and go to state 118
    expression                     shift and go to state 119
    term                           shift and go to state 93
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 88

    (32) printer -> PRINT OP_LPAREN . impression OP_RPAREN SEMICOLON
    (33) impression -> . mega_expression
    (34) impression -> . mega_expression OP_PLUS impression
    (62) mega_expression -> . super_expression
    (63) mega_expression -> . super_expression AND super_expression
    (64) mega_expression -> . super_expression OR super_expression
    (65) super_expression -> . expression
    (66) super_expression -> . expression OP_GREATER_THAN expression
    (67) super_expression -> . expression OP_LESS_THAN expression
    (68) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (69) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (70) super_expression -> . expression OP_EQUALS_TWO expression
    (71) super_expression -> . expression OP_NOT_EQUALS expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    impression                     shift and go to state 120
    mega_expression                shift and go to state 121
    super_expression               shift and go to state 91
    expression                     shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 89

    (39) for -> FOR OP_LPAREN . assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque
    (29) assigment -> . ID OP_EQUALS single_expression SEMICOLON

    ID              shift and go to state 123

    assigment                      shift and go to state 122

state 90

    (40) return -> RETURN mega_expression . SEMICOLON

    SEMICOLON       shift and go to state 124


state 91

    (62) mega_expression -> super_expression .
    (63) mega_expression -> super_expression . AND super_expression
    (64) mega_expression -> super_expression . OR super_expression

    SEMICOLON       reduce using rule 62 (mega_expression -> super_expression .)
    OP_PLUS         reduce using rule 62 (mega_expression -> super_expression .)
    OP_RPAREN       reduce using rule 62 (mega_expression -> super_expression .)
    AND             shift and go to state 125
    OR              shift and go to state 126


state 92

    (65) super_expression -> expression .
    (66) super_expression -> expression . OP_GREATER_THAN expression
    (67) super_expression -> expression . OP_LESS_THAN expression
    (68) super_expression -> expression . OP_GREATER_EQUALS_THAN expression
    (69) super_expression -> expression . OP_LESS_EQUALS_THAN expression
    (70) super_expression -> expression . OP_EQUALS_TWO expression
    (71) super_expression -> expression . OP_NOT_EQUALS expression

    AND             reduce using rule 65 (super_expression -> expression .)
    OR              reduce using rule 65 (super_expression -> expression .)
    SEMICOLON       reduce using rule 65 (super_expression -> expression .)
    OP_PLUS         reduce using rule 65 (super_expression -> expression .)
    OP_RPAREN       reduce using rule 65 (super_expression -> expression .)
    OP_GREATER_THAN shift and go to state 127
    OP_LESS_THAN    shift and go to state 128
    OP_GREATER_EQUALS_THAN shift and go to state 129
    OP_LESS_EQUALS_THAN shift and go to state 130
    OP_EQUALS_TWO   shift and go to state 131
    OP_NOT_EQUALS   shift and go to state 132


state 93

    (72) expression -> term .
    (73) expression -> term . OP_PLUS expression
    (74) expression -> term . OP_MINUS expression

  ! shift/reduce conflict for OP_PLUS resolved as shift
    OP_GREATER_THAN reduce using rule 72 (expression -> term .)
    OP_LESS_THAN    reduce using rule 72 (expression -> term .)
    OP_GREATER_EQUALS_THAN reduce using rule 72 (expression -> term .)
    OP_LESS_EQUALS_THAN reduce using rule 72 (expression -> term .)
    OP_EQUALS_TWO   reduce using rule 72 (expression -> term .)
    OP_NOT_EQUALS   reduce using rule 72 (expression -> term .)
    AND             reduce using rule 72 (expression -> term .)
    OR              reduce using rule 72 (expression -> term .)
    SEMICOLON       reduce using rule 72 (expression -> term .)
    OP_RPAREN       reduce using rule 72 (expression -> term .)
    OP_PLUS         shift and go to state 133
    OP_MINUS        shift and go to state 134

  ! OP_PLUS         [ reduce using rule 72 (expression -> term .) ]


state 94

    (75) term -> fact .
    (76) term -> fact . OP_DIVISION term
    (77) term -> fact . OP_TIMES term

    OP_PLUS         reduce using rule 75 (term -> fact .)
    OP_MINUS        reduce using rule 75 (term -> fact .)
    OP_GREATER_THAN reduce using rule 75 (term -> fact .)
    OP_LESS_THAN    reduce using rule 75 (term -> fact .)
    OP_GREATER_EQUALS_THAN reduce using rule 75 (term -> fact .)
    OP_LESS_EQUALS_THAN reduce using rule 75 (term -> fact .)
    OP_EQUALS_TWO   reduce using rule 75 (term -> fact .)
    OP_NOT_EQUALS   reduce using rule 75 (term -> fact .)
    AND             reduce using rule 75 (term -> fact .)
    OR              reduce using rule 75 (term -> fact .)
    SEMICOLON       reduce using rule 75 (term -> fact .)
    OP_RPAREN       reduce using rule 75 (term -> fact .)
    OP_DIVISION     shift and go to state 135
    OP_TIMES        shift and go to state 136


state 95

    (78) fact -> var_cte .

    OP_DIVISION     reduce using rule 78 (fact -> var_cte .)
    OP_TIMES        reduce using rule 78 (fact -> var_cte .)
    OP_PLUS         reduce using rule 78 (fact -> var_cte .)
    OP_MINUS        reduce using rule 78 (fact -> var_cte .)
    OP_GREATER_THAN reduce using rule 78 (fact -> var_cte .)
    OP_LESS_THAN    reduce using rule 78 (fact -> var_cte .)
    OP_GREATER_EQUALS_THAN reduce using rule 78 (fact -> var_cte .)
    OP_LESS_EQUALS_THAN reduce using rule 78 (fact -> var_cte .)
    OP_EQUALS_TWO   reduce using rule 78 (fact -> var_cte .)
    OP_NOT_EQUALS   reduce using rule 78 (fact -> var_cte .)
    AND             reduce using rule 78 (fact -> var_cte .)
    OR              reduce using rule 78 (fact -> var_cte .)
    SEMICOLON       reduce using rule 78 (fact -> var_cte .)
    OP_RPAREN       reduce using rule 78 (fact -> var_cte .)


state 96

    (79) fact -> OP_LPAREN . mega_expression OP_RPAREN
    (62) mega_expression -> . super_expression
    (63) mega_expression -> . super_expression AND super_expression
    (64) mega_expression -> . super_expression OR super_expression
    (65) super_expression -> . expression
    (66) super_expression -> . expression OP_GREATER_THAN expression
    (67) super_expression -> . expression OP_LESS_THAN expression
    (68) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (69) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (70) super_expression -> . expression OP_EQUALS_TWO expression
    (71) super_expression -> . expression OP_NOT_EQUALS expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    mega_expression                shift and go to state 137
    super_expression               shift and go to state 91
    expression                     shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 97

    (80) var_cte -> ID .

    OP_DIVISION     reduce using rule 80 (var_cte -> ID .)
    OP_TIMES        reduce using rule 80 (var_cte -> ID .)
    OP_PLUS         reduce using rule 80 (var_cte -> ID .)
    OP_MINUS        reduce using rule 80 (var_cte -> ID .)
    OP_GREATER_THAN reduce using rule 80 (var_cte -> ID .)
    OP_LESS_THAN    reduce using rule 80 (var_cte -> ID .)
    OP_GREATER_EQUALS_THAN reduce using rule 80 (var_cte -> ID .)
    OP_LESS_EQUALS_THAN reduce using rule 80 (var_cte -> ID .)
    OP_EQUALS_TWO   reduce using rule 80 (var_cte -> ID .)
    OP_NOT_EQUALS   reduce using rule 80 (var_cte -> ID .)
    AND             reduce using rule 80 (var_cte -> ID .)
    OR              reduce using rule 80 (var_cte -> ID .)
    SEMICOLON       reduce using rule 80 (var_cte -> ID .)
    OP_RPAREN       reduce using rule 80 (var_cte -> ID .)


state 98

    (81) var_cte -> VAR_INT .

    OP_DIVISION     reduce using rule 81 (var_cte -> VAR_INT .)
    OP_TIMES        reduce using rule 81 (var_cte -> VAR_INT .)
    OP_PLUS         reduce using rule 81 (var_cte -> VAR_INT .)
    OP_MINUS        reduce using rule 81 (var_cte -> VAR_INT .)
    OP_GREATER_THAN reduce using rule 81 (var_cte -> VAR_INT .)
    OP_LESS_THAN    reduce using rule 81 (var_cte -> VAR_INT .)
    OP_GREATER_EQUALS_THAN reduce using rule 81 (var_cte -> VAR_INT .)
    OP_LESS_EQUALS_THAN reduce using rule 81 (var_cte -> VAR_INT .)
    OP_EQUALS_TWO   reduce using rule 81 (var_cte -> VAR_INT .)
    OP_NOT_EQUALS   reduce using rule 81 (var_cte -> VAR_INT .)
    AND             reduce using rule 81 (var_cte -> VAR_INT .)
    OR              reduce using rule 81 (var_cte -> VAR_INT .)
    SEMICOLON       reduce using rule 81 (var_cte -> VAR_INT .)
    OP_RPAREN       reduce using rule 81 (var_cte -> VAR_INT .)


state 99

    (82) var_cte -> VAR_FLOAT .

    OP_DIVISION     reduce using rule 82 (var_cte -> VAR_FLOAT .)
    OP_TIMES        reduce using rule 82 (var_cte -> VAR_FLOAT .)
    OP_PLUS         reduce using rule 82 (var_cte -> VAR_FLOAT .)
    OP_MINUS        reduce using rule 82 (var_cte -> VAR_FLOAT .)
    OP_GREATER_THAN reduce using rule 82 (var_cte -> VAR_FLOAT .)
    OP_LESS_THAN    reduce using rule 82 (var_cte -> VAR_FLOAT .)
    OP_GREATER_EQUALS_THAN reduce using rule 82 (var_cte -> VAR_FLOAT .)
    OP_LESS_EQUALS_THAN reduce using rule 82 (var_cte -> VAR_FLOAT .)
    OP_EQUALS_TWO   reduce using rule 82 (var_cte -> VAR_FLOAT .)
    OP_NOT_EQUALS   reduce using rule 82 (var_cte -> VAR_FLOAT .)
    AND             reduce using rule 82 (var_cte -> VAR_FLOAT .)
    OR              reduce using rule 82 (var_cte -> VAR_FLOAT .)
    SEMICOLON       reduce using rule 82 (var_cte -> VAR_FLOAT .)
    OP_RPAREN       reduce using rule 82 (var_cte -> VAR_FLOAT .)


state 100

    (83) var_cte -> VAR_STRING .

    OP_DIVISION     reduce using rule 83 (var_cte -> VAR_STRING .)
    OP_TIMES        reduce using rule 83 (var_cte -> VAR_STRING .)
    OP_PLUS         reduce using rule 83 (var_cte -> VAR_STRING .)
    OP_MINUS        reduce using rule 83 (var_cte -> VAR_STRING .)
    OP_GREATER_THAN reduce using rule 83 (var_cte -> VAR_STRING .)
    OP_LESS_THAN    reduce using rule 83 (var_cte -> VAR_STRING .)
    OP_GREATER_EQUALS_THAN reduce using rule 83 (var_cte -> VAR_STRING .)
    OP_LESS_EQUALS_THAN reduce using rule 83 (var_cte -> VAR_STRING .)
    OP_EQUALS_TWO   reduce using rule 83 (var_cte -> VAR_STRING .)
    OP_NOT_EQUALS   reduce using rule 83 (var_cte -> VAR_STRING .)
    AND             reduce using rule 83 (var_cte -> VAR_STRING .)
    OR              reduce using rule 83 (var_cte -> VAR_STRING .)
    SEMICOLON       reduce using rule 83 (var_cte -> VAR_STRING .)
    OP_RPAREN       reduce using rule 83 (var_cte -> VAR_STRING .)


state 101

    (7) function -> FUNCTION type ID OP_LPAREN parameters OP_RPAREN bloque function .

    MAIN            reduce using rule 7 (function -> FUNCTION type ID OP_LPAREN parameters OP_RPAREN bloque function .)


state 102

    (16) parameters -> COMA type ID parameters .

    OP_RPAREN       reduce using rule 16 (parameters -> COMA type ID parameters .)


state 103

    (8) function -> FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN bloque function .

    MAIN            reduce using rule 8 (function -> FUNCTION VOID ID OP_LPAREN parameters OP_RPAREN bloque function .)


state 104

    (29) assigment -> ID OP_EQUALS single_expression . SEMICOLON

    SEMICOLON       shift and go to state 138


state 105

    (54) single_expression -> single_term .
    (55) single_expression -> single_term . OP_PLUS single_expression
    (56) single_expression -> single_term . OP_MINUS single_expression

    SEMICOLON       reduce using rule 54 (single_expression -> single_term .)
    OP_RPAREN       reduce using rule 54 (single_expression -> single_term .)
    OP_PLUS         shift and go to state 139
    OP_MINUS        shift and go to state 140


state 106

    (57) single_term -> single_fact .
    (58) single_term -> single_fact . OP_DIVISION single_term
    (59) single_term -> single_fact . OP_TIMES single_term

    OP_PLUS         reduce using rule 57 (single_term -> single_fact .)
    OP_MINUS        reduce using rule 57 (single_term -> single_fact .)
    SEMICOLON       reduce using rule 57 (single_term -> single_fact .)
    OP_RPAREN       reduce using rule 57 (single_term -> single_fact .)
    OP_DIVISION     shift and go to state 141
    OP_TIMES        shift and go to state 142


state 107

    (60) single_fact -> var_cte .

    OP_DIVISION     reduce using rule 60 (single_fact -> var_cte .)
    OP_TIMES        reduce using rule 60 (single_fact -> var_cte .)
    OP_PLUS         reduce using rule 60 (single_fact -> var_cte .)
    OP_MINUS        reduce using rule 60 (single_fact -> var_cte .)
    SEMICOLON       reduce using rule 60 (single_fact -> var_cte .)
    OP_RPAREN       reduce using rule 60 (single_fact -> var_cte .)


state 108

    (61) single_fact -> OP_LPAREN . single_expression OP_RPAREN
    (54) single_expression -> . single_term
    (55) single_expression -> . single_term OP_PLUS single_expression
    (56) single_expression -> . single_term OP_MINUS single_expression
    (57) single_term -> . single_fact
    (58) single_term -> . single_fact OP_DIVISION single_term
    (59) single_term -> . single_fact OP_TIMES single_term
    (60) single_fact -> . var_cte
    (61) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    single_expression              shift and go to state 143
    single_term                    shift and go to state 105
    single_fact                    shift and go to state 106
    var_cte                        shift and go to state 107

state 109

    (35) increment -> ID OP_PLUS_EQUALS single_expression . SEMICOLON

    SEMICOLON       shift and go to state 144


state 110

    (36) increment -> ID OP_MINUS_EQUALS single_expression . SEMICOLON

    SEMICOLON       shift and go to state 145


state 111

    (37) increment -> ID OP_PLUS OP_PLUS . SEMICOLON

    SEMICOLON       shift and go to state 146


state 112

    (38) increment -> ID OP_MINUS OP_MINUS . SEMICOLON

    SEMICOLON       shift and go to state 147


state 113

    (42) function_call_prime -> ID . function_call_prime
    (42) function_call_prime -> . ID function_call_prime
    (43) function_call_prime -> . COMA ID function_call_prime
    (44) function_call_prime -> . epsilon
    (84) epsilon -> .

    ID              shift and go to state 113
    COMA            shift and go to state 115
    OP_RPAREN       reduce using rule 84 (epsilon -> .)

    function_call_prime            shift and go to state 148
    epsilon                        shift and go to state 116

state 114

    (41) function_call -> ID OP_LPAREN function_call_prime . OP_RPAREN SEMICOLON

    OP_RPAREN       shift and go to state 149


state 115

    (43) function_call_prime -> COMA . ID function_call_prime

    ID              shift and go to state 150


state 116

    (44) function_call_prime -> epsilon .

    OP_RPAREN       reduce using rule 44 (function_call_prime -> epsilon .)


state 117

    (30) if -> IF OP_LPAREN condition_mega_expression . OP_RPAREN bloque
    (31) if -> IF OP_LPAREN condition_mega_expression . OP_RPAREN bloque ELSE bloque

    OP_RPAREN       shift and go to state 151


state 118

    (45) condition_mega_expression -> condition_super_expression .
    (46) condition_mega_expression -> condition_super_expression . AND condition_super_expression
    (47) condition_mega_expression -> condition_super_expression . OR condition_super_expression

    OP_RPAREN       reduce using rule 45 (condition_mega_expression -> condition_super_expression .)
    AND             shift and go to state 152
    OR              shift and go to state 153


state 119

    (48) condition_super_expression -> expression . OP_GREATER_THAN expression
    (49) condition_super_expression -> expression . OP_LESS_THAN expression
    (50) condition_super_expression -> expression . OP_GREATER_EQUALS_THAN expression
    (51) condition_super_expression -> expression . OP_LESS_EQUALS_THAN expression
    (52) condition_super_expression -> expression . OP_EQUALS_TWO expression
    (53) condition_super_expression -> expression . OP_NOT_EQUALS expression

    OP_GREATER_THAN shift and go to state 154
    OP_LESS_THAN    shift and go to state 155
    OP_GREATER_EQUALS_THAN shift and go to state 156
    OP_LESS_EQUALS_THAN shift and go to state 157
    OP_EQUALS_TWO   shift and go to state 158
    OP_NOT_EQUALS   shift and go to state 159


state 120

    (32) printer -> PRINT OP_LPAREN impression . OP_RPAREN SEMICOLON

    OP_RPAREN       shift and go to state 160


state 121

    (33) impression -> mega_expression .
    (34) impression -> mega_expression . OP_PLUS impression

    OP_RPAREN       reduce using rule 33 (impression -> mega_expression .)
    OP_PLUS         shift and go to state 161


state 122

    (39) for -> FOR OP_LPAREN assigment . condition_super_expression SEMICOLON increment OP_RPAREN bloque
    (48) condition_super_expression -> . expression OP_GREATER_THAN expression
    (49) condition_super_expression -> . expression OP_LESS_THAN expression
    (50) condition_super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (51) condition_super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (52) condition_super_expression -> . expression OP_EQUALS_TWO expression
    (53) condition_super_expression -> . expression OP_NOT_EQUALS expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    condition_super_expression     shift and go to state 162
    expression                     shift and go to state 119
    term                           shift and go to state 93
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 123

    (29) assigment -> ID . OP_EQUALS single_expression SEMICOLON

    OP_EQUALS       shift and go to state 81


state 124

    (40) return -> RETURN mega_expression SEMICOLON .

    RCURLY_BRACKET  reduce using rule 40 (return -> RETURN mega_expression SEMICOLON .)
    ID              reduce using rule 40 (return -> RETURN mega_expression SEMICOLON .)
    IF              reduce using rule 40 (return -> RETURN mega_expression SEMICOLON .)
    PRINT           reduce using rule 40 (return -> RETURN mega_expression SEMICOLON .)
    INT             reduce using rule 40 (return -> RETURN mega_expression SEMICOLON .)
    FLOAT           reduce using rule 40 (return -> RETURN mega_expression SEMICOLON .)
    STRING          reduce using rule 40 (return -> RETURN mega_expression SEMICOLON .)
    BOOLEAN         reduce using rule 40 (return -> RETURN mega_expression SEMICOLON .)
    FOR             reduce using rule 40 (return -> RETURN mega_expression SEMICOLON .)
    RETURN          reduce using rule 40 (return -> RETURN mega_expression SEMICOLON .)


state 125

    (63) mega_expression -> super_expression AND . super_expression
    (65) super_expression -> . expression
    (66) super_expression -> . expression OP_GREATER_THAN expression
    (67) super_expression -> . expression OP_LESS_THAN expression
    (68) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (69) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (70) super_expression -> . expression OP_EQUALS_TWO expression
    (71) super_expression -> . expression OP_NOT_EQUALS expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    super_expression               shift and go to state 163
    expression                     shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 126

    (64) mega_expression -> super_expression OR . super_expression
    (65) super_expression -> . expression
    (66) super_expression -> . expression OP_GREATER_THAN expression
    (67) super_expression -> . expression OP_LESS_THAN expression
    (68) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (69) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (70) super_expression -> . expression OP_EQUALS_TWO expression
    (71) super_expression -> . expression OP_NOT_EQUALS expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    super_expression               shift and go to state 164
    expression                     shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 127

    (66) super_expression -> expression OP_GREATER_THAN . expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    expression                     shift and go to state 165
    term                           shift and go to state 93
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 128

    (67) super_expression -> expression OP_LESS_THAN . expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    expression                     shift and go to state 166
    term                           shift and go to state 93
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 129

    (68) super_expression -> expression OP_GREATER_EQUALS_THAN . expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    expression                     shift and go to state 167
    term                           shift and go to state 93
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 130

    (69) super_expression -> expression OP_LESS_EQUALS_THAN . expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    expression                     shift and go to state 168
    term                           shift and go to state 93
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 131

    (70) super_expression -> expression OP_EQUALS_TWO . expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    expression                     shift and go to state 169
    term                           shift and go to state 93
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 132

    (71) super_expression -> expression OP_NOT_EQUALS . expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    expression                     shift and go to state 170
    term                           shift and go to state 93
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 133

    (73) expression -> term OP_PLUS . expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    term                           shift and go to state 93
    expression                     shift and go to state 171
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 134

    (74) expression -> term OP_MINUS . expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    term                           shift and go to state 93
    expression                     shift and go to state 172
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 135

    (76) term -> fact OP_DIVISION . term
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    fact                           shift and go to state 94
    term                           shift and go to state 173
    var_cte                        shift and go to state 95

state 136

    (77) term -> fact OP_TIMES . term
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    fact                           shift and go to state 94
    term                           shift and go to state 174
    var_cte                        shift and go to state 95

state 137

    (79) fact -> OP_LPAREN mega_expression . OP_RPAREN

    OP_RPAREN       shift and go to state 175


state 138

    (29) assigment -> ID OP_EQUALS single_expression SEMICOLON .

    RCURLY_BRACKET  reduce using rule 29 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    ID              reduce using rule 29 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    IF              reduce using rule 29 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    PRINT           reduce using rule 29 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    INT             reduce using rule 29 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    FLOAT           reduce using rule 29 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    STRING          reduce using rule 29 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    BOOLEAN         reduce using rule 29 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    FOR             reduce using rule 29 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    RETURN          reduce using rule 29 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    OP_LPAREN       reduce using rule 29 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    VAR_INT         reduce using rule 29 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    VAR_FLOAT       reduce using rule 29 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)
    VAR_STRING      reduce using rule 29 (assigment -> ID OP_EQUALS single_expression SEMICOLON .)


state 139

    (55) single_expression -> single_term OP_PLUS . single_expression
    (54) single_expression -> . single_term
    (55) single_expression -> . single_term OP_PLUS single_expression
    (56) single_expression -> . single_term OP_MINUS single_expression
    (57) single_term -> . single_fact
    (58) single_term -> . single_fact OP_DIVISION single_term
    (59) single_term -> . single_fact OP_TIMES single_term
    (60) single_fact -> . var_cte
    (61) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    single_term                    shift and go to state 105
    single_expression              shift and go to state 176
    single_fact                    shift and go to state 106
    var_cte                        shift and go to state 107

state 140

    (56) single_expression -> single_term OP_MINUS . single_expression
    (54) single_expression -> . single_term
    (55) single_expression -> . single_term OP_PLUS single_expression
    (56) single_expression -> . single_term OP_MINUS single_expression
    (57) single_term -> . single_fact
    (58) single_term -> . single_fact OP_DIVISION single_term
    (59) single_term -> . single_fact OP_TIMES single_term
    (60) single_fact -> . var_cte
    (61) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    single_term                    shift and go to state 105
    single_expression              shift and go to state 177
    single_fact                    shift and go to state 106
    var_cte                        shift and go to state 107

state 141

    (58) single_term -> single_fact OP_DIVISION . single_term
    (57) single_term -> . single_fact
    (58) single_term -> . single_fact OP_DIVISION single_term
    (59) single_term -> . single_fact OP_TIMES single_term
    (60) single_fact -> . var_cte
    (61) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    single_fact                    shift and go to state 106
    single_term                    shift and go to state 178
    var_cte                        shift and go to state 107

state 142

    (59) single_term -> single_fact OP_TIMES . single_term
    (57) single_term -> . single_fact
    (58) single_term -> . single_fact OP_DIVISION single_term
    (59) single_term -> . single_fact OP_TIMES single_term
    (60) single_fact -> . var_cte
    (61) single_fact -> . OP_LPAREN single_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 108
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    single_fact                    shift and go to state 106
    single_term                    shift and go to state 179
    var_cte                        shift and go to state 107

state 143

    (61) single_fact -> OP_LPAREN single_expression . OP_RPAREN

    OP_RPAREN       shift and go to state 180


state 144

    (35) increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .

    RCURLY_BRACKET  reduce using rule 35 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    ID              reduce using rule 35 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    IF              reduce using rule 35 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    PRINT           reduce using rule 35 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    INT             reduce using rule 35 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    FLOAT           reduce using rule 35 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    STRING          reduce using rule 35 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    BOOLEAN         reduce using rule 35 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    FOR             reduce using rule 35 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    RETURN          reduce using rule 35 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)
    OP_RPAREN       reduce using rule 35 (increment -> ID OP_PLUS_EQUALS single_expression SEMICOLON .)


state 145

    (36) increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .

    RCURLY_BRACKET  reduce using rule 36 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    ID              reduce using rule 36 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    IF              reduce using rule 36 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    PRINT           reduce using rule 36 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    INT             reduce using rule 36 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    FLOAT           reduce using rule 36 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    STRING          reduce using rule 36 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    BOOLEAN         reduce using rule 36 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    FOR             reduce using rule 36 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    RETURN          reduce using rule 36 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)
    OP_RPAREN       reduce using rule 36 (increment -> ID OP_MINUS_EQUALS single_expression SEMICOLON .)


state 146

    (37) increment -> ID OP_PLUS OP_PLUS SEMICOLON .

    RCURLY_BRACKET  reduce using rule 37 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    ID              reduce using rule 37 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    IF              reduce using rule 37 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    PRINT           reduce using rule 37 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    INT             reduce using rule 37 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    FLOAT           reduce using rule 37 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    STRING          reduce using rule 37 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    BOOLEAN         reduce using rule 37 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    FOR             reduce using rule 37 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    RETURN          reduce using rule 37 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)
    OP_RPAREN       reduce using rule 37 (increment -> ID OP_PLUS OP_PLUS SEMICOLON .)


state 147

    (38) increment -> ID OP_MINUS OP_MINUS SEMICOLON .

    RCURLY_BRACKET  reduce using rule 38 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    ID              reduce using rule 38 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    IF              reduce using rule 38 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    PRINT           reduce using rule 38 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    INT             reduce using rule 38 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    FLOAT           reduce using rule 38 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    STRING          reduce using rule 38 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    BOOLEAN         reduce using rule 38 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    FOR             reduce using rule 38 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    RETURN          reduce using rule 38 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)
    OP_RPAREN       reduce using rule 38 (increment -> ID OP_MINUS OP_MINUS SEMICOLON .)


state 148

    (42) function_call_prime -> ID function_call_prime .

    OP_RPAREN       reduce using rule 42 (function_call_prime -> ID function_call_prime .)


state 149

    (41) function_call -> ID OP_LPAREN function_call_prime OP_RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 181


state 150

    (43) function_call_prime -> COMA ID . function_call_prime
    (42) function_call_prime -> . ID function_call_prime
    (43) function_call_prime -> . COMA ID function_call_prime
    (44) function_call_prime -> . epsilon
    (84) epsilon -> .

    ID              shift and go to state 113
    COMA            shift and go to state 115
    OP_RPAREN       reduce using rule 84 (epsilon -> .)

    function_call_prime            shift and go to state 182
    epsilon                        shift and go to state 116

state 151

    (30) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN . bloque
    (31) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN . bloque ELSE bloque
    (18) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 46

    bloque                         shift and go to state 183

state 152

    (46) condition_mega_expression -> condition_super_expression AND . condition_super_expression
    (48) condition_super_expression -> . expression OP_GREATER_THAN expression
    (49) condition_super_expression -> . expression OP_LESS_THAN expression
    (50) condition_super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (51) condition_super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (52) condition_super_expression -> . expression OP_EQUALS_TWO expression
    (53) condition_super_expression -> . expression OP_NOT_EQUALS expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    condition_super_expression     shift and go to state 184
    expression                     shift and go to state 119
    term                           shift and go to state 93
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 153

    (47) condition_mega_expression -> condition_super_expression OR . condition_super_expression
    (48) condition_super_expression -> . expression OP_GREATER_THAN expression
    (49) condition_super_expression -> . expression OP_LESS_THAN expression
    (50) condition_super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (51) condition_super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (52) condition_super_expression -> . expression OP_EQUALS_TWO expression
    (53) condition_super_expression -> . expression OP_NOT_EQUALS expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    condition_super_expression     shift and go to state 185
    expression                     shift and go to state 119
    term                           shift and go to state 93
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 154

    (48) condition_super_expression -> expression OP_GREATER_THAN . expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    expression                     shift and go to state 186
    term                           shift and go to state 93
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 155

    (49) condition_super_expression -> expression OP_LESS_THAN . expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    expression                     shift and go to state 187
    term                           shift and go to state 93
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 156

    (50) condition_super_expression -> expression OP_GREATER_EQUALS_THAN . expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    expression                     shift and go to state 188
    term                           shift and go to state 93
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 157

    (51) condition_super_expression -> expression OP_LESS_EQUALS_THAN . expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    expression                     shift and go to state 189
    term                           shift and go to state 93
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 158

    (52) condition_super_expression -> expression OP_EQUALS_TWO . expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    expression                     shift and go to state 190
    term                           shift and go to state 93
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 159

    (53) condition_super_expression -> expression OP_NOT_EQUALS . expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    expression                     shift and go to state 191
    term                           shift and go to state 93
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 160

    (32) printer -> PRINT OP_LPAREN impression OP_RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 192


state 161

    (34) impression -> mega_expression OP_PLUS . impression
    (33) impression -> . mega_expression
    (34) impression -> . mega_expression OP_PLUS impression
    (62) mega_expression -> . super_expression
    (63) mega_expression -> . super_expression AND super_expression
    (64) mega_expression -> . super_expression OR super_expression
    (65) super_expression -> . expression
    (66) super_expression -> . expression OP_GREATER_THAN expression
    (67) super_expression -> . expression OP_LESS_THAN expression
    (68) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (69) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (70) super_expression -> . expression OP_EQUALS_TWO expression
    (71) super_expression -> . expression OP_NOT_EQUALS expression
    (72) expression -> . term
    (73) expression -> . term OP_PLUS expression
    (74) expression -> . term OP_MINUS expression
    (75) term -> . fact
    (76) term -> . fact OP_DIVISION term
    (77) term -> . fact OP_TIMES term
    (78) fact -> . var_cte
    (79) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (80) var_cte -> . ID
    (81) var_cte -> . VAR_INT
    (82) var_cte -> . VAR_FLOAT
    (83) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 96
    ID              shift and go to state 97
    VAR_INT         shift and go to state 98
    VAR_FLOAT       shift and go to state 99
    VAR_STRING      shift and go to state 100

    mega_expression                shift and go to state 121
    impression                     shift and go to state 193
    super_expression               shift and go to state 91
    expression                     shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    var_cte                        shift and go to state 95

state 162

    (39) for -> FOR OP_LPAREN assigment condition_super_expression . SEMICOLON increment OP_RPAREN bloque

    SEMICOLON       shift and go to state 194


state 163

    (63) mega_expression -> super_expression AND super_expression .

    SEMICOLON       reduce using rule 63 (mega_expression -> super_expression AND super_expression .)
    OP_PLUS         reduce using rule 63 (mega_expression -> super_expression AND super_expression .)
    OP_RPAREN       reduce using rule 63 (mega_expression -> super_expression AND super_expression .)


state 164

    (64) mega_expression -> super_expression OR super_expression .

    SEMICOLON       reduce using rule 64 (mega_expression -> super_expression OR super_expression .)
    OP_PLUS         reduce using rule 64 (mega_expression -> super_expression OR super_expression .)
    OP_RPAREN       reduce using rule 64 (mega_expression -> super_expression OR super_expression .)


state 165

    (66) super_expression -> expression OP_GREATER_THAN expression .

    AND             reduce using rule 66 (super_expression -> expression OP_GREATER_THAN expression .)
    OR              reduce using rule 66 (super_expression -> expression OP_GREATER_THAN expression .)
    SEMICOLON       reduce using rule 66 (super_expression -> expression OP_GREATER_THAN expression .)
    OP_PLUS         reduce using rule 66 (super_expression -> expression OP_GREATER_THAN expression .)
    OP_RPAREN       reduce using rule 66 (super_expression -> expression OP_GREATER_THAN expression .)


state 166

    (67) super_expression -> expression OP_LESS_THAN expression .

    AND             reduce using rule 67 (super_expression -> expression OP_LESS_THAN expression .)
    OR              reduce using rule 67 (super_expression -> expression OP_LESS_THAN expression .)
    SEMICOLON       reduce using rule 67 (super_expression -> expression OP_LESS_THAN expression .)
    OP_PLUS         reduce using rule 67 (super_expression -> expression OP_LESS_THAN expression .)
    OP_RPAREN       reduce using rule 67 (super_expression -> expression OP_LESS_THAN expression .)


state 167

    (68) super_expression -> expression OP_GREATER_EQUALS_THAN expression .

    AND             reduce using rule 68 (super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    OR              reduce using rule 68 (super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    SEMICOLON       reduce using rule 68 (super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    OP_PLUS         reduce using rule 68 (super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    OP_RPAREN       reduce using rule 68 (super_expression -> expression OP_GREATER_EQUALS_THAN expression .)


state 168

    (69) super_expression -> expression OP_LESS_EQUALS_THAN expression .

    AND             reduce using rule 69 (super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    OR              reduce using rule 69 (super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    SEMICOLON       reduce using rule 69 (super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    OP_PLUS         reduce using rule 69 (super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    OP_RPAREN       reduce using rule 69 (super_expression -> expression OP_LESS_EQUALS_THAN expression .)


state 169

    (70) super_expression -> expression OP_EQUALS_TWO expression .

    AND             reduce using rule 70 (super_expression -> expression OP_EQUALS_TWO expression .)
    OR              reduce using rule 70 (super_expression -> expression OP_EQUALS_TWO expression .)
    SEMICOLON       reduce using rule 70 (super_expression -> expression OP_EQUALS_TWO expression .)
    OP_PLUS         reduce using rule 70 (super_expression -> expression OP_EQUALS_TWO expression .)
    OP_RPAREN       reduce using rule 70 (super_expression -> expression OP_EQUALS_TWO expression .)


state 170

    (71) super_expression -> expression OP_NOT_EQUALS expression .

    AND             reduce using rule 71 (super_expression -> expression OP_NOT_EQUALS expression .)
    OR              reduce using rule 71 (super_expression -> expression OP_NOT_EQUALS expression .)
    SEMICOLON       reduce using rule 71 (super_expression -> expression OP_NOT_EQUALS expression .)
    OP_PLUS         reduce using rule 71 (super_expression -> expression OP_NOT_EQUALS expression .)
    OP_RPAREN       reduce using rule 71 (super_expression -> expression OP_NOT_EQUALS expression .)


state 171

    (73) expression -> term OP_PLUS expression .

    OP_GREATER_THAN reduce using rule 73 (expression -> term OP_PLUS expression .)
    OP_LESS_THAN    reduce using rule 73 (expression -> term OP_PLUS expression .)
    OP_GREATER_EQUALS_THAN reduce using rule 73 (expression -> term OP_PLUS expression .)
    OP_LESS_EQUALS_THAN reduce using rule 73 (expression -> term OP_PLUS expression .)
    OP_EQUALS_TWO   reduce using rule 73 (expression -> term OP_PLUS expression .)
    OP_NOT_EQUALS   reduce using rule 73 (expression -> term OP_PLUS expression .)
    AND             reduce using rule 73 (expression -> term OP_PLUS expression .)
    OR              reduce using rule 73 (expression -> term OP_PLUS expression .)
    SEMICOLON       reduce using rule 73 (expression -> term OP_PLUS expression .)
    OP_PLUS         reduce using rule 73 (expression -> term OP_PLUS expression .)
    OP_RPAREN       reduce using rule 73 (expression -> term OP_PLUS expression .)


state 172

    (74) expression -> term OP_MINUS expression .

    OP_GREATER_THAN reduce using rule 74 (expression -> term OP_MINUS expression .)
    OP_LESS_THAN    reduce using rule 74 (expression -> term OP_MINUS expression .)
    OP_GREATER_EQUALS_THAN reduce using rule 74 (expression -> term OP_MINUS expression .)
    OP_LESS_EQUALS_THAN reduce using rule 74 (expression -> term OP_MINUS expression .)
    OP_EQUALS_TWO   reduce using rule 74 (expression -> term OP_MINUS expression .)
    OP_NOT_EQUALS   reduce using rule 74 (expression -> term OP_MINUS expression .)
    AND             reduce using rule 74 (expression -> term OP_MINUS expression .)
    OR              reduce using rule 74 (expression -> term OP_MINUS expression .)
    SEMICOLON       reduce using rule 74 (expression -> term OP_MINUS expression .)
    OP_PLUS         reduce using rule 74 (expression -> term OP_MINUS expression .)
    OP_RPAREN       reduce using rule 74 (expression -> term OP_MINUS expression .)


state 173

    (76) term -> fact OP_DIVISION term .

    OP_PLUS         reduce using rule 76 (term -> fact OP_DIVISION term .)
    OP_MINUS        reduce using rule 76 (term -> fact OP_DIVISION term .)
    OP_GREATER_THAN reduce using rule 76 (term -> fact OP_DIVISION term .)
    OP_LESS_THAN    reduce using rule 76 (term -> fact OP_DIVISION term .)
    OP_GREATER_EQUALS_THAN reduce using rule 76 (term -> fact OP_DIVISION term .)
    OP_LESS_EQUALS_THAN reduce using rule 76 (term -> fact OP_DIVISION term .)
    OP_EQUALS_TWO   reduce using rule 76 (term -> fact OP_DIVISION term .)
    OP_NOT_EQUALS   reduce using rule 76 (term -> fact OP_DIVISION term .)
    AND             reduce using rule 76 (term -> fact OP_DIVISION term .)
    OR              reduce using rule 76 (term -> fact OP_DIVISION term .)
    SEMICOLON       reduce using rule 76 (term -> fact OP_DIVISION term .)
    OP_RPAREN       reduce using rule 76 (term -> fact OP_DIVISION term .)


state 174

    (77) term -> fact OP_TIMES term .

    OP_PLUS         reduce using rule 77 (term -> fact OP_TIMES term .)
    OP_MINUS        reduce using rule 77 (term -> fact OP_TIMES term .)
    OP_GREATER_THAN reduce using rule 77 (term -> fact OP_TIMES term .)
    OP_LESS_THAN    reduce using rule 77 (term -> fact OP_TIMES term .)
    OP_GREATER_EQUALS_THAN reduce using rule 77 (term -> fact OP_TIMES term .)
    OP_LESS_EQUALS_THAN reduce using rule 77 (term -> fact OP_TIMES term .)
    OP_EQUALS_TWO   reduce using rule 77 (term -> fact OP_TIMES term .)
    OP_NOT_EQUALS   reduce using rule 77 (term -> fact OP_TIMES term .)
    AND             reduce using rule 77 (term -> fact OP_TIMES term .)
    OR              reduce using rule 77 (term -> fact OP_TIMES term .)
    SEMICOLON       reduce using rule 77 (term -> fact OP_TIMES term .)
    OP_RPAREN       reduce using rule 77 (term -> fact OP_TIMES term .)


state 175

    (79) fact -> OP_LPAREN mega_expression OP_RPAREN .

    OP_DIVISION     reduce using rule 79 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_TIMES        reduce using rule 79 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_PLUS         reduce using rule 79 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_MINUS        reduce using rule 79 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_GREATER_THAN reduce using rule 79 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_LESS_THAN    reduce using rule 79 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_GREATER_EQUALS_THAN reduce using rule 79 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_LESS_EQUALS_THAN reduce using rule 79 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_EQUALS_TWO   reduce using rule 79 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_NOT_EQUALS   reduce using rule 79 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    AND             reduce using rule 79 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OR              reduce using rule 79 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    SEMICOLON       reduce using rule 79 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_RPAREN       reduce using rule 79 (fact -> OP_LPAREN mega_expression OP_RPAREN .)


state 176

    (55) single_expression -> single_term OP_PLUS single_expression .

    SEMICOLON       reduce using rule 55 (single_expression -> single_term OP_PLUS single_expression .)
    OP_RPAREN       reduce using rule 55 (single_expression -> single_term OP_PLUS single_expression .)


state 177

    (56) single_expression -> single_term OP_MINUS single_expression .

    SEMICOLON       reduce using rule 56 (single_expression -> single_term OP_MINUS single_expression .)
    OP_RPAREN       reduce using rule 56 (single_expression -> single_term OP_MINUS single_expression .)


state 178

    (58) single_term -> single_fact OP_DIVISION single_term .

    OP_PLUS         reduce using rule 58 (single_term -> single_fact OP_DIVISION single_term .)
    OP_MINUS        reduce using rule 58 (single_term -> single_fact OP_DIVISION single_term .)
    SEMICOLON       reduce using rule 58 (single_term -> single_fact OP_DIVISION single_term .)
    OP_RPAREN       reduce using rule 58 (single_term -> single_fact OP_DIVISION single_term .)


state 179

    (59) single_term -> single_fact OP_TIMES single_term .

    OP_PLUS         reduce using rule 59 (single_term -> single_fact OP_TIMES single_term .)
    OP_MINUS        reduce using rule 59 (single_term -> single_fact OP_TIMES single_term .)
    SEMICOLON       reduce using rule 59 (single_term -> single_fact OP_TIMES single_term .)
    OP_RPAREN       reduce using rule 59 (single_term -> single_fact OP_TIMES single_term .)


state 180

    (61) single_fact -> OP_LPAREN single_expression OP_RPAREN .

    OP_DIVISION     reduce using rule 61 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)
    OP_TIMES        reduce using rule 61 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)
    OP_PLUS         reduce using rule 61 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)
    OP_MINUS        reduce using rule 61 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)
    SEMICOLON       reduce using rule 61 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)
    OP_RPAREN       reduce using rule 61 (single_fact -> OP_LPAREN single_expression OP_RPAREN .)


state 181

    (41) function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .

    RCURLY_BRACKET  reduce using rule 41 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    ID              reduce using rule 41 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    IF              reduce using rule 41 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    PRINT           reduce using rule 41 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    INT             reduce using rule 41 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    FLOAT           reduce using rule 41 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    STRING          reduce using rule 41 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 41 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    FOR             reduce using rule 41 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)
    RETURN          reduce using rule 41 (function_call -> ID OP_LPAREN function_call_prime OP_RPAREN SEMICOLON .)


state 182

    (43) function_call_prime -> COMA ID function_call_prime .

    OP_RPAREN       reduce using rule 43 (function_call_prime -> COMA ID function_call_prime .)


state 183

    (30) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .
    (31) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque . ELSE bloque

    RCURLY_BRACKET  reduce using rule 30 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    ID              reduce using rule 30 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    IF              reduce using rule 30 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    PRINT           reduce using rule 30 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    INT             reduce using rule 30 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    FLOAT           reduce using rule 30 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    STRING          reduce using rule 30 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    BOOLEAN         reduce using rule 30 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    FOR             reduce using rule 30 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    RETURN          reduce using rule 30 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque .)
    ELSE            shift and go to state 195


state 184

    (46) condition_mega_expression -> condition_super_expression AND condition_super_expression .

    OP_RPAREN       reduce using rule 46 (condition_mega_expression -> condition_super_expression AND condition_super_expression .)


state 185

    (47) condition_mega_expression -> condition_super_expression OR condition_super_expression .

    OP_RPAREN       reduce using rule 47 (condition_mega_expression -> condition_super_expression OR condition_super_expression .)


state 186

    (48) condition_super_expression -> expression OP_GREATER_THAN expression .

    AND             reduce using rule 48 (condition_super_expression -> expression OP_GREATER_THAN expression .)
    OR              reduce using rule 48 (condition_super_expression -> expression OP_GREATER_THAN expression .)
    OP_RPAREN       reduce using rule 48 (condition_super_expression -> expression OP_GREATER_THAN expression .)
    SEMICOLON       reduce using rule 48 (condition_super_expression -> expression OP_GREATER_THAN expression .)


state 187

    (49) condition_super_expression -> expression OP_LESS_THAN expression .

    AND             reduce using rule 49 (condition_super_expression -> expression OP_LESS_THAN expression .)
    OR              reduce using rule 49 (condition_super_expression -> expression OP_LESS_THAN expression .)
    OP_RPAREN       reduce using rule 49 (condition_super_expression -> expression OP_LESS_THAN expression .)
    SEMICOLON       reduce using rule 49 (condition_super_expression -> expression OP_LESS_THAN expression .)


state 188

    (50) condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression .

    AND             reduce using rule 50 (condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    OR              reduce using rule 50 (condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    OP_RPAREN       reduce using rule 50 (condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    SEMICOLON       reduce using rule 50 (condition_super_expression -> expression OP_GREATER_EQUALS_THAN expression .)


state 189

    (51) condition_super_expression -> expression OP_LESS_EQUALS_THAN expression .

    AND             reduce using rule 51 (condition_super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    OR              reduce using rule 51 (condition_super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    OP_RPAREN       reduce using rule 51 (condition_super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    SEMICOLON       reduce using rule 51 (condition_super_expression -> expression OP_LESS_EQUALS_THAN expression .)


state 190

    (52) condition_super_expression -> expression OP_EQUALS_TWO expression .

    AND             reduce using rule 52 (condition_super_expression -> expression OP_EQUALS_TWO expression .)
    OR              reduce using rule 52 (condition_super_expression -> expression OP_EQUALS_TWO expression .)
    OP_RPAREN       reduce using rule 52 (condition_super_expression -> expression OP_EQUALS_TWO expression .)
    SEMICOLON       reduce using rule 52 (condition_super_expression -> expression OP_EQUALS_TWO expression .)


state 191

    (53) condition_super_expression -> expression OP_NOT_EQUALS expression .

    AND             reduce using rule 53 (condition_super_expression -> expression OP_NOT_EQUALS expression .)
    OR              reduce using rule 53 (condition_super_expression -> expression OP_NOT_EQUALS expression .)
    OP_RPAREN       reduce using rule 53 (condition_super_expression -> expression OP_NOT_EQUALS expression .)
    SEMICOLON       reduce using rule 53 (condition_super_expression -> expression OP_NOT_EQUALS expression .)


state 192

    (32) printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .

    RCURLY_BRACKET  reduce using rule 32 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    ID              reduce using rule 32 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    IF              reduce using rule 32 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    PRINT           reduce using rule 32 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    INT             reduce using rule 32 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    FLOAT           reduce using rule 32 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    STRING          reduce using rule 32 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 32 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    FOR             reduce using rule 32 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)
    RETURN          reduce using rule 32 (printer -> PRINT OP_LPAREN impression OP_RPAREN SEMICOLON .)


state 193

    (34) impression -> mega_expression OP_PLUS impression .

    OP_RPAREN       reduce using rule 34 (impression -> mega_expression OP_PLUS impression .)


state 194

    (39) for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON . increment OP_RPAREN bloque
    (35) increment -> . ID OP_PLUS_EQUALS single_expression SEMICOLON
    (36) increment -> . ID OP_MINUS_EQUALS single_expression SEMICOLON
    (37) increment -> . ID OP_PLUS OP_PLUS SEMICOLON
    (38) increment -> . ID OP_MINUS OP_MINUS SEMICOLON

    ID              shift and go to state 197

    increment                      shift and go to state 196

state 195

    (31) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE . bloque
    (18) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 46

    bloque                         shift and go to state 198

state 196

    (39) for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment . OP_RPAREN bloque

    OP_RPAREN       shift and go to state 199


state 197

    (35) increment -> ID . OP_PLUS_EQUALS single_expression SEMICOLON
    (36) increment -> ID . OP_MINUS_EQUALS single_expression SEMICOLON
    (37) increment -> ID . OP_PLUS OP_PLUS SEMICOLON
    (38) increment -> ID . OP_MINUS OP_MINUS SEMICOLON

    OP_PLUS_EQUALS  shift and go to state 82
    OP_MINUS_EQUALS shift and go to state 83
    OP_PLUS         shift and go to state 84
    OP_MINUS        shift and go to state 85


state 198

    (31) if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .

    RCURLY_BRACKET  reduce using rule 31 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    ID              reduce using rule 31 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    IF              reduce using rule 31 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    PRINT           reduce using rule 31 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    INT             reduce using rule 31 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    FLOAT           reduce using rule 31 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    STRING          reduce using rule 31 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    BOOLEAN         reduce using rule 31 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    FOR             reduce using rule 31 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)
    RETURN          reduce using rule 31 (if -> IF OP_LPAREN condition_mega_expression OP_RPAREN bloque ELSE bloque .)


state 199

    (39) for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN . bloque
    (18) bloque -> . LCURLY_BRACKET bloque_primo RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 46

    bloque                         shift and go to state 200

state 200

    (39) for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .

    RCURLY_BRACKET  reduce using rule 39 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    ID              reduce using rule 39 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    IF              reduce using rule 39 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    PRINT           reduce using rule 39 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    INT             reduce using rule 39 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    FLOAT           reduce using rule 39 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    STRING          reduce using rule 39 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    BOOLEAN         reduce using rule 39 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    FOR             reduce using rule 39 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)
    RETURN          reduce using rule 39 (for -> FOR OP_LPAREN assigment condition_super_expression SEMICOLON increment OP_RPAREN bloque .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 41 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 41 resolved as shift
WARNING: shift/reduce conflict for STRING in state 41 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 41 resolved as shift
WARNING: shift/reduce conflict for INT in state 42 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 42 resolved as shift
WARNING: shift/reduce conflict for STRING in state 42 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 42 resolved as shift
WARNING: shift/reduce conflict for INT in state 43 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 43 resolved as shift
WARNING: shift/reduce conflict for STRING in state 43 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 43 resolved as shift
WARNING: shift/reduce conflict for INT in state 44 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 44 resolved as shift
WARNING: shift/reduce conflict for STRING in state 44 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 44 resolved as shift
WARNING: shift/reduce conflict for RCURLY_BRACKET in state 56 resolved as shift
WARNING: shift/reduce conflict for ID in state 56 resolved as shift
WARNING: shift/reduce conflict for IF in state 56 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 56 resolved as shift
WARNING: shift/reduce conflict for INT in state 56 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 56 resolved as shift
WARNING: shift/reduce conflict for STRING in state 56 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 56 resolved as shift
WARNING: shift/reduce conflict for FOR in state 56 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 56 resolved as shift
WARNING: shift/reduce conflict for OP_PLUS in state 93 resolved as shift
