Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    CARET
    POINT
    QUOT_MARK

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID LCURLY_BRACKET VAR vars bloque RCURLY_BRACKET
Rule 2     vars -> INT ID OP_EQUALS VAR_INT SEMICOLON vars
Rule 3     vars -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars
Rule 4     vars -> STRING ID OP_EQUALS VAR_STRING SEMICOLON vars
Rule 5     vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars
Rule 6     vars -> epsilon
Rule 7     bloque -> LCURLY_BRACKET bloque RCURLY_BRACKET
Rule 8     bloque -> bloque statement
Rule 9     bloque -> epsilon
Rule 10    statement -> assigment
Rule 11    statement -> if
Rule 12    statement -> printer
Rule 13    assigment -> ID OP_EQUALS mega_expression SEMICOLON
Rule 14    if -> IF OP_LPAREN mega_expression OP_RPAREN bloque
Rule 15    condition -> super_expression AND super_expression
Rule 16    condition -> super_expression OR super_expression
Rule 17    printer -> PRINT OP_LPAREN impresion OP_RPAREN SEMICOLON
Rule 18    impresion -> var_cte
Rule 19    impresion -> var_cte OP_PLUS impresion
Rule 20    mega_expression -> super_expression
Rule 21    mega_expression -> super_expression AND super_expression
Rule 22    mega_expression -> super_expression OR super_expression
Rule 23    super_expression -> expression
Rule 24    super_expression -> expression OP_GREATER_THAN expression
Rule 25    super_expression -> expression OP_LESS_THAN expression
Rule 26    super_expression -> expression OP_GREATER_EQUALS_THAN expression
Rule 27    super_expression -> expression OP_LESS_EQUALS_THAN expression
Rule 28    super_expression -> expression OP_EQUALS_TWO expression
Rule 29    super_expression -> expression OP_NOT_EQUALS expression
Rule 30    expression -> term
Rule 31    expression -> term OP_PLUS expression
Rule 32    expression -> term OP_MINUS expression
Rule 33    term -> fact
Rule 34    term -> fact OP_DIVISION term
Rule 35    term -> fact OP_TIMES term
Rule 36    fact -> var_cte
Rule 37    fact -> OP_LPAREN mega_expression OP_RPAREN
Rule 38    var_cte -> ID
Rule 39    var_cte -> VAR_INT
Rule 40    var_cte -> VAR_FLOAT
Rule 41    var_cte -> VAR_STRING
Rule 42    epsilon -> <empty>

Terminals, with rules where they appear

AND                  : 15 21
BOOLEAN              : 5
CARET                : 
FLOAT                : 3
ID                   : 1 2 3 4 5 13 38
IF                   : 14
INT                  : 2
LCURLY_BRACKET       : 1 7
OP_DIVISION          : 34
OP_EQUALS            : 2 3 4 5 13
OP_EQUALS_TWO        : 28
OP_GREATER_EQUALS_THAN : 26
OP_GREATER_THAN      : 24
OP_LESS_EQUALS_THAN  : 27
OP_LESS_THAN         : 25
OP_LPAREN            : 14 17 37
OP_MINUS             : 32
OP_NOT_EQUALS        : 29
OP_PLUS              : 19 31
OP_RPAREN            : 14 17 37
OP_TIMES             : 35
OR                   : 16 22
POINT                : 
PRINT                : 17
PROGRAM              : 1
QUOT_MARK            : 
RCURLY_BRACKET       : 1 7
SEMICOLON            : 2 3 4 5 13 17
STRING               : 4
VAR                  : 1
VAR_BOOLEAN          : 5
VAR_FLOAT            : 3 40
VAR_INT              : 2 39
VAR_STRING           : 4 41
error                : 

Nonterminals, with rules where they appear

assigment            : 10
bloque               : 1 7 8 14
condition            : 
epsilon              : 6 9
expression           : 23 24 24 25 25 26 26 27 27 28 28 29 29 31 32
fact                 : 33 34 35
if                   : 11
impresion            : 17 19
mega_expression      : 13 14 37
printer              : 12
program              : 0
statement            : 8
super_expression     : 15 15 16 16 20 21 21 22 22
term                 : 30 31 32 34 35
var_cte              : 18 19 36
vars                 : 1 2 3 4 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID LCURLY_BRACKET VAR vars bloque RCURLY_BRACKET

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID LCURLY_BRACKET VAR vars bloque RCURLY_BRACKET

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . LCURLY_BRACKET VAR vars bloque RCURLY_BRACKET

    LCURLY_BRACKET  shift and go to state 4


state 4

    (1) program -> PROGRAM ID LCURLY_BRACKET . VAR vars bloque RCURLY_BRACKET

    VAR             shift and go to state 5


state 5

    (1) program -> PROGRAM ID LCURLY_BRACKET VAR . vars bloque RCURLY_BRACKET
    (2) vars -> . INT ID OP_EQUALS VAR_INT SEMICOLON vars
    (3) vars -> . FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars
    (4) vars -> . STRING ID OP_EQUALS VAR_STRING SEMICOLON vars
    (5) vars -> . BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars
    (6) vars -> . epsilon
    (42) epsilon -> .

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    BOOLEAN         shift and go to state 10
    LCURLY_BRACKET  reduce using rule 42 (epsilon -> .)
    RCURLY_BRACKET  reduce using rule 42 (epsilon -> .)
    ID              reduce using rule 42 (epsilon -> .)
    IF              reduce using rule 42 (epsilon -> .)
    PRINT           reduce using rule 42 (epsilon -> .)

    vars                           shift and go to state 6
    epsilon                        shift and go to state 11

state 6

    (1) program -> PROGRAM ID LCURLY_BRACKET VAR vars . bloque RCURLY_BRACKET
    (7) bloque -> . LCURLY_BRACKET bloque RCURLY_BRACKET
    (8) bloque -> . bloque statement
    (9) bloque -> . epsilon
    (42) epsilon -> .

    LCURLY_BRACKET  shift and go to state 12
    RCURLY_BRACKET  reduce using rule 42 (epsilon -> .)
    ID              reduce using rule 42 (epsilon -> .)
    IF              reduce using rule 42 (epsilon -> .)
    PRINT           reduce using rule 42 (epsilon -> .)

    bloque                         shift and go to state 13
    epsilon                        shift and go to state 14

state 7

    (2) vars -> INT . ID OP_EQUALS VAR_INT SEMICOLON vars

    ID              shift and go to state 15


state 8

    (3) vars -> FLOAT . ID OP_EQUALS VAR_FLOAT SEMICOLON vars

    ID              shift and go to state 16


state 9

    (4) vars -> STRING . ID OP_EQUALS VAR_STRING SEMICOLON vars

    ID              shift and go to state 17


state 10

    (5) vars -> BOOLEAN . ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars

    ID              shift and go to state 18


state 11

    (6) vars -> epsilon .

    LCURLY_BRACKET  reduce using rule 6 (vars -> epsilon .)
    RCURLY_BRACKET  reduce using rule 6 (vars -> epsilon .)
    ID              reduce using rule 6 (vars -> epsilon .)
    IF              reduce using rule 6 (vars -> epsilon .)
    PRINT           reduce using rule 6 (vars -> epsilon .)


state 12

    (7) bloque -> LCURLY_BRACKET . bloque RCURLY_BRACKET
    (7) bloque -> . LCURLY_BRACKET bloque RCURLY_BRACKET
    (8) bloque -> . bloque statement
    (9) bloque -> . epsilon
    (42) epsilon -> .

    LCURLY_BRACKET  shift and go to state 12
    RCURLY_BRACKET  reduce using rule 42 (epsilon -> .)
    ID              reduce using rule 42 (epsilon -> .)
    IF              reduce using rule 42 (epsilon -> .)
    PRINT           reduce using rule 42 (epsilon -> .)

    bloque                         shift and go to state 19
    epsilon                        shift and go to state 14

state 13

    (1) program -> PROGRAM ID LCURLY_BRACKET VAR vars bloque . RCURLY_BRACKET
    (8) bloque -> bloque . statement
    (10) statement -> . assigment
    (11) statement -> . if
    (12) statement -> . printer
    (13) assigment -> . ID OP_EQUALS mega_expression SEMICOLON
    (14) if -> . IF OP_LPAREN mega_expression OP_RPAREN bloque
    (17) printer -> . PRINT OP_LPAREN impresion OP_RPAREN SEMICOLON

    RCURLY_BRACKET  shift and go to state 21
    ID              shift and go to state 20
    IF              shift and go to state 26
    PRINT           shift and go to state 27

    statement                      shift and go to state 22
    assigment                      shift and go to state 23
    if                             shift and go to state 24
    printer                        shift and go to state 25

state 14

    (9) bloque -> epsilon .

    RCURLY_BRACKET  reduce using rule 9 (bloque -> epsilon .)
    ID              reduce using rule 9 (bloque -> epsilon .)
    IF              reduce using rule 9 (bloque -> epsilon .)
    PRINT           reduce using rule 9 (bloque -> epsilon .)


state 15

    (2) vars -> INT ID . OP_EQUALS VAR_INT SEMICOLON vars

    OP_EQUALS       shift and go to state 28


state 16

    (3) vars -> FLOAT ID . OP_EQUALS VAR_FLOAT SEMICOLON vars

    OP_EQUALS       shift and go to state 29


state 17

    (4) vars -> STRING ID . OP_EQUALS VAR_STRING SEMICOLON vars

    OP_EQUALS       shift and go to state 30


state 18

    (5) vars -> BOOLEAN ID . OP_EQUALS VAR_BOOLEAN SEMICOLON vars

    OP_EQUALS       shift and go to state 31


state 19

    (7) bloque -> LCURLY_BRACKET bloque . RCURLY_BRACKET
    (8) bloque -> bloque . statement
    (10) statement -> . assigment
    (11) statement -> . if
    (12) statement -> . printer
    (13) assigment -> . ID OP_EQUALS mega_expression SEMICOLON
    (14) if -> . IF OP_LPAREN mega_expression OP_RPAREN bloque
    (17) printer -> . PRINT OP_LPAREN impresion OP_RPAREN SEMICOLON

    RCURLY_BRACKET  shift and go to state 32
    ID              shift and go to state 20
    IF              shift and go to state 26
    PRINT           shift and go to state 27

    statement                      shift and go to state 22
    assigment                      shift and go to state 23
    if                             shift and go to state 24
    printer                        shift and go to state 25

state 20

    (13) assigment -> ID . OP_EQUALS mega_expression SEMICOLON

    OP_EQUALS       shift and go to state 33


state 21

    (1) program -> PROGRAM ID LCURLY_BRACKET VAR vars bloque RCURLY_BRACKET .

    $end            reduce using rule 1 (program -> PROGRAM ID LCURLY_BRACKET VAR vars bloque RCURLY_BRACKET .)


state 22

    (8) bloque -> bloque statement .

    RCURLY_BRACKET  reduce using rule 8 (bloque -> bloque statement .)
    ID              reduce using rule 8 (bloque -> bloque statement .)
    IF              reduce using rule 8 (bloque -> bloque statement .)
    PRINT           reduce using rule 8 (bloque -> bloque statement .)


state 23

    (10) statement -> assigment .

    RCURLY_BRACKET  reduce using rule 10 (statement -> assigment .)
    ID              reduce using rule 10 (statement -> assigment .)
    IF              reduce using rule 10 (statement -> assigment .)
    PRINT           reduce using rule 10 (statement -> assigment .)


state 24

    (11) statement -> if .

    RCURLY_BRACKET  reduce using rule 11 (statement -> if .)
    ID              reduce using rule 11 (statement -> if .)
    IF              reduce using rule 11 (statement -> if .)
    PRINT           reduce using rule 11 (statement -> if .)


state 25

    (12) statement -> printer .

    RCURLY_BRACKET  reduce using rule 12 (statement -> printer .)
    ID              reduce using rule 12 (statement -> printer .)
    IF              reduce using rule 12 (statement -> printer .)
    PRINT           reduce using rule 12 (statement -> printer .)


state 26

    (14) if -> IF . OP_LPAREN mega_expression OP_RPAREN bloque

    OP_LPAREN       shift and go to state 34


state 27

    (17) printer -> PRINT . OP_LPAREN impresion OP_RPAREN SEMICOLON

    OP_LPAREN       shift and go to state 35


state 28

    (2) vars -> INT ID OP_EQUALS . VAR_INT SEMICOLON vars

    VAR_INT         shift and go to state 36


state 29

    (3) vars -> FLOAT ID OP_EQUALS . VAR_FLOAT SEMICOLON vars

    VAR_FLOAT       shift and go to state 37


state 30

    (4) vars -> STRING ID OP_EQUALS . VAR_STRING SEMICOLON vars

    VAR_STRING      shift and go to state 38


state 31

    (5) vars -> BOOLEAN ID OP_EQUALS . VAR_BOOLEAN SEMICOLON vars

    VAR_BOOLEAN     shift and go to state 39


state 32

    (7) bloque -> LCURLY_BRACKET bloque RCURLY_BRACKET .

    RCURLY_BRACKET  reduce using rule 7 (bloque -> LCURLY_BRACKET bloque RCURLY_BRACKET .)
    ID              reduce using rule 7 (bloque -> LCURLY_BRACKET bloque RCURLY_BRACKET .)
    IF              reduce using rule 7 (bloque -> LCURLY_BRACKET bloque RCURLY_BRACKET .)
    PRINT           reduce using rule 7 (bloque -> LCURLY_BRACKET bloque RCURLY_BRACKET .)


state 33

    (13) assigment -> ID OP_EQUALS . mega_expression SEMICOLON
    (20) mega_expression -> . super_expression
    (21) mega_expression -> . super_expression AND super_expression
    (22) mega_expression -> . super_expression OR super_expression
    (23) super_expression -> . expression
    (24) super_expression -> . expression OP_GREATER_THAN expression
    (25) super_expression -> . expression OP_LESS_THAN expression
    (26) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (27) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (28) super_expression -> . expression OP_EQUALS_TWO expression
    (29) super_expression -> . expression OP_NOT_EQUALS expression
    (30) expression -> . term
    (31) expression -> . term OP_PLUS expression
    (32) expression -> . term OP_MINUS expression
    (33) term -> . fact
    (34) term -> . fact OP_DIVISION term
    (35) term -> . fact OP_TIMES term
    (36) fact -> . var_cte
    (37) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (38) var_cte -> . ID
    (39) var_cte -> . VAR_INT
    (40) var_cte -> . VAR_FLOAT
    (41) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 47
    ID              shift and go to state 40
    VAR_INT         shift and go to state 48
    VAR_FLOAT       shift and go to state 49
    VAR_STRING      shift and go to state 50

    mega_expression                shift and go to state 41
    super_expression               shift and go to state 42
    expression                     shift and go to state 43
    term                           shift and go to state 44
    fact                           shift and go to state 45
    var_cte                        shift and go to state 46

state 34

    (14) if -> IF OP_LPAREN . mega_expression OP_RPAREN bloque
    (20) mega_expression -> . super_expression
    (21) mega_expression -> . super_expression AND super_expression
    (22) mega_expression -> . super_expression OR super_expression
    (23) super_expression -> . expression
    (24) super_expression -> . expression OP_GREATER_THAN expression
    (25) super_expression -> . expression OP_LESS_THAN expression
    (26) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (27) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (28) super_expression -> . expression OP_EQUALS_TWO expression
    (29) super_expression -> . expression OP_NOT_EQUALS expression
    (30) expression -> . term
    (31) expression -> . term OP_PLUS expression
    (32) expression -> . term OP_MINUS expression
    (33) term -> . fact
    (34) term -> . fact OP_DIVISION term
    (35) term -> . fact OP_TIMES term
    (36) fact -> . var_cte
    (37) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (38) var_cte -> . ID
    (39) var_cte -> . VAR_INT
    (40) var_cte -> . VAR_FLOAT
    (41) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 47
    ID              shift and go to state 40
    VAR_INT         shift and go to state 48
    VAR_FLOAT       shift and go to state 49
    VAR_STRING      shift and go to state 50

    mega_expression                shift and go to state 51
    super_expression               shift and go to state 42
    expression                     shift and go to state 43
    term                           shift and go to state 44
    fact                           shift and go to state 45
    var_cte                        shift and go to state 46

state 35

    (17) printer -> PRINT OP_LPAREN . impresion OP_RPAREN SEMICOLON
    (18) impresion -> . var_cte
    (19) impresion -> . var_cte OP_PLUS impresion
    (38) var_cte -> . ID
    (39) var_cte -> . VAR_INT
    (40) var_cte -> . VAR_FLOAT
    (41) var_cte -> . VAR_STRING

    ID              shift and go to state 40
    VAR_INT         shift and go to state 48
    VAR_FLOAT       shift and go to state 49
    VAR_STRING      shift and go to state 50

    impresion                      shift and go to state 52
    var_cte                        shift and go to state 53

state 36

    (2) vars -> INT ID OP_EQUALS VAR_INT . SEMICOLON vars

    SEMICOLON       shift and go to state 54


state 37

    (3) vars -> FLOAT ID OP_EQUALS VAR_FLOAT . SEMICOLON vars

    SEMICOLON       shift and go to state 55


state 38

    (4) vars -> STRING ID OP_EQUALS VAR_STRING . SEMICOLON vars

    SEMICOLON       shift and go to state 56


state 39

    (5) vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN . SEMICOLON vars

    SEMICOLON       shift and go to state 57


state 40

    (38) var_cte -> ID .

    OP_DIVISION     reduce using rule 38 (var_cte -> ID .)
    OP_TIMES        reduce using rule 38 (var_cte -> ID .)
    OP_PLUS         reduce using rule 38 (var_cte -> ID .)
    OP_MINUS        reduce using rule 38 (var_cte -> ID .)
    OP_GREATER_THAN reduce using rule 38 (var_cte -> ID .)
    OP_LESS_THAN    reduce using rule 38 (var_cte -> ID .)
    OP_GREATER_EQUALS_THAN reduce using rule 38 (var_cte -> ID .)
    OP_LESS_EQUALS_THAN reduce using rule 38 (var_cte -> ID .)
    OP_EQUALS_TWO   reduce using rule 38 (var_cte -> ID .)
    OP_NOT_EQUALS   reduce using rule 38 (var_cte -> ID .)
    AND             reduce using rule 38 (var_cte -> ID .)
    OR              reduce using rule 38 (var_cte -> ID .)
    SEMICOLON       reduce using rule 38 (var_cte -> ID .)
    OP_RPAREN       reduce using rule 38 (var_cte -> ID .)


state 41

    (13) assigment -> ID OP_EQUALS mega_expression . SEMICOLON

    SEMICOLON       shift and go to state 58


state 42

    (20) mega_expression -> super_expression .
    (21) mega_expression -> super_expression . AND super_expression
    (22) mega_expression -> super_expression . OR super_expression

    SEMICOLON       reduce using rule 20 (mega_expression -> super_expression .)
    OP_RPAREN       reduce using rule 20 (mega_expression -> super_expression .)
    AND             shift and go to state 59
    OR              shift and go to state 60


state 43

    (23) super_expression -> expression .
    (24) super_expression -> expression . OP_GREATER_THAN expression
    (25) super_expression -> expression . OP_LESS_THAN expression
    (26) super_expression -> expression . OP_GREATER_EQUALS_THAN expression
    (27) super_expression -> expression . OP_LESS_EQUALS_THAN expression
    (28) super_expression -> expression . OP_EQUALS_TWO expression
    (29) super_expression -> expression . OP_NOT_EQUALS expression

    AND             reduce using rule 23 (super_expression -> expression .)
    OR              reduce using rule 23 (super_expression -> expression .)
    SEMICOLON       reduce using rule 23 (super_expression -> expression .)
    OP_RPAREN       reduce using rule 23 (super_expression -> expression .)
    OP_GREATER_THAN shift and go to state 61
    OP_LESS_THAN    shift and go to state 62
    OP_GREATER_EQUALS_THAN shift and go to state 63
    OP_LESS_EQUALS_THAN shift and go to state 64
    OP_EQUALS_TWO   shift and go to state 65
    OP_NOT_EQUALS   shift and go to state 66


state 44

    (30) expression -> term .
    (31) expression -> term . OP_PLUS expression
    (32) expression -> term . OP_MINUS expression

    OP_GREATER_THAN reduce using rule 30 (expression -> term .)
    OP_LESS_THAN    reduce using rule 30 (expression -> term .)
    OP_GREATER_EQUALS_THAN reduce using rule 30 (expression -> term .)
    OP_LESS_EQUALS_THAN reduce using rule 30 (expression -> term .)
    OP_EQUALS_TWO   reduce using rule 30 (expression -> term .)
    OP_NOT_EQUALS   reduce using rule 30 (expression -> term .)
    AND             reduce using rule 30 (expression -> term .)
    OR              reduce using rule 30 (expression -> term .)
    SEMICOLON       reduce using rule 30 (expression -> term .)
    OP_RPAREN       reduce using rule 30 (expression -> term .)
    OP_PLUS         shift and go to state 67
    OP_MINUS        shift and go to state 68


state 45

    (33) term -> fact .
    (34) term -> fact . OP_DIVISION term
    (35) term -> fact . OP_TIMES term

    OP_PLUS         reduce using rule 33 (term -> fact .)
    OP_MINUS        reduce using rule 33 (term -> fact .)
    OP_GREATER_THAN reduce using rule 33 (term -> fact .)
    OP_LESS_THAN    reduce using rule 33 (term -> fact .)
    OP_GREATER_EQUALS_THAN reduce using rule 33 (term -> fact .)
    OP_LESS_EQUALS_THAN reduce using rule 33 (term -> fact .)
    OP_EQUALS_TWO   reduce using rule 33 (term -> fact .)
    OP_NOT_EQUALS   reduce using rule 33 (term -> fact .)
    AND             reduce using rule 33 (term -> fact .)
    OR              reduce using rule 33 (term -> fact .)
    SEMICOLON       reduce using rule 33 (term -> fact .)
    OP_RPAREN       reduce using rule 33 (term -> fact .)
    OP_DIVISION     shift and go to state 69
    OP_TIMES        shift and go to state 70


state 46

    (36) fact -> var_cte .

    OP_DIVISION     reduce using rule 36 (fact -> var_cte .)
    OP_TIMES        reduce using rule 36 (fact -> var_cte .)
    OP_PLUS         reduce using rule 36 (fact -> var_cte .)
    OP_MINUS        reduce using rule 36 (fact -> var_cte .)
    OP_GREATER_THAN reduce using rule 36 (fact -> var_cte .)
    OP_LESS_THAN    reduce using rule 36 (fact -> var_cte .)
    OP_GREATER_EQUALS_THAN reduce using rule 36 (fact -> var_cte .)
    OP_LESS_EQUALS_THAN reduce using rule 36 (fact -> var_cte .)
    OP_EQUALS_TWO   reduce using rule 36 (fact -> var_cte .)
    OP_NOT_EQUALS   reduce using rule 36 (fact -> var_cte .)
    AND             reduce using rule 36 (fact -> var_cte .)
    OR              reduce using rule 36 (fact -> var_cte .)
    SEMICOLON       reduce using rule 36 (fact -> var_cte .)
    OP_RPAREN       reduce using rule 36 (fact -> var_cte .)


state 47

    (37) fact -> OP_LPAREN . mega_expression OP_RPAREN
    (20) mega_expression -> . super_expression
    (21) mega_expression -> . super_expression AND super_expression
    (22) mega_expression -> . super_expression OR super_expression
    (23) super_expression -> . expression
    (24) super_expression -> . expression OP_GREATER_THAN expression
    (25) super_expression -> . expression OP_LESS_THAN expression
    (26) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (27) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (28) super_expression -> . expression OP_EQUALS_TWO expression
    (29) super_expression -> . expression OP_NOT_EQUALS expression
    (30) expression -> . term
    (31) expression -> . term OP_PLUS expression
    (32) expression -> . term OP_MINUS expression
    (33) term -> . fact
    (34) term -> . fact OP_DIVISION term
    (35) term -> . fact OP_TIMES term
    (36) fact -> . var_cte
    (37) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (38) var_cte -> . ID
    (39) var_cte -> . VAR_INT
    (40) var_cte -> . VAR_FLOAT
    (41) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 47
    ID              shift and go to state 40
    VAR_INT         shift and go to state 48
    VAR_FLOAT       shift and go to state 49
    VAR_STRING      shift and go to state 50

    mega_expression                shift and go to state 71
    super_expression               shift and go to state 42
    expression                     shift and go to state 43
    term                           shift and go to state 44
    fact                           shift and go to state 45
    var_cte                        shift and go to state 46

state 48

    (39) var_cte -> VAR_INT .

    OP_DIVISION     reduce using rule 39 (var_cte -> VAR_INT .)
    OP_TIMES        reduce using rule 39 (var_cte -> VAR_INT .)
    OP_PLUS         reduce using rule 39 (var_cte -> VAR_INT .)
    OP_MINUS        reduce using rule 39 (var_cte -> VAR_INT .)
    OP_GREATER_THAN reduce using rule 39 (var_cte -> VAR_INT .)
    OP_LESS_THAN    reduce using rule 39 (var_cte -> VAR_INT .)
    OP_GREATER_EQUALS_THAN reduce using rule 39 (var_cte -> VAR_INT .)
    OP_LESS_EQUALS_THAN reduce using rule 39 (var_cte -> VAR_INT .)
    OP_EQUALS_TWO   reduce using rule 39 (var_cte -> VAR_INT .)
    OP_NOT_EQUALS   reduce using rule 39 (var_cte -> VAR_INT .)
    AND             reduce using rule 39 (var_cte -> VAR_INT .)
    OR              reduce using rule 39 (var_cte -> VAR_INT .)
    SEMICOLON       reduce using rule 39 (var_cte -> VAR_INT .)
    OP_RPAREN       reduce using rule 39 (var_cte -> VAR_INT .)


state 49

    (40) var_cte -> VAR_FLOAT .

    OP_DIVISION     reduce using rule 40 (var_cte -> VAR_FLOAT .)
    OP_TIMES        reduce using rule 40 (var_cte -> VAR_FLOAT .)
    OP_PLUS         reduce using rule 40 (var_cte -> VAR_FLOAT .)
    OP_MINUS        reduce using rule 40 (var_cte -> VAR_FLOAT .)
    OP_GREATER_THAN reduce using rule 40 (var_cte -> VAR_FLOAT .)
    OP_LESS_THAN    reduce using rule 40 (var_cte -> VAR_FLOAT .)
    OP_GREATER_EQUALS_THAN reduce using rule 40 (var_cte -> VAR_FLOAT .)
    OP_LESS_EQUALS_THAN reduce using rule 40 (var_cte -> VAR_FLOAT .)
    OP_EQUALS_TWO   reduce using rule 40 (var_cte -> VAR_FLOAT .)
    OP_NOT_EQUALS   reduce using rule 40 (var_cte -> VAR_FLOAT .)
    AND             reduce using rule 40 (var_cte -> VAR_FLOAT .)
    OR              reduce using rule 40 (var_cte -> VAR_FLOAT .)
    SEMICOLON       reduce using rule 40 (var_cte -> VAR_FLOAT .)
    OP_RPAREN       reduce using rule 40 (var_cte -> VAR_FLOAT .)


state 50

    (41) var_cte -> VAR_STRING .

    OP_DIVISION     reduce using rule 41 (var_cte -> VAR_STRING .)
    OP_TIMES        reduce using rule 41 (var_cte -> VAR_STRING .)
    OP_PLUS         reduce using rule 41 (var_cte -> VAR_STRING .)
    OP_MINUS        reduce using rule 41 (var_cte -> VAR_STRING .)
    OP_GREATER_THAN reduce using rule 41 (var_cte -> VAR_STRING .)
    OP_LESS_THAN    reduce using rule 41 (var_cte -> VAR_STRING .)
    OP_GREATER_EQUALS_THAN reduce using rule 41 (var_cte -> VAR_STRING .)
    OP_LESS_EQUALS_THAN reduce using rule 41 (var_cte -> VAR_STRING .)
    OP_EQUALS_TWO   reduce using rule 41 (var_cte -> VAR_STRING .)
    OP_NOT_EQUALS   reduce using rule 41 (var_cte -> VAR_STRING .)
    AND             reduce using rule 41 (var_cte -> VAR_STRING .)
    OR              reduce using rule 41 (var_cte -> VAR_STRING .)
    SEMICOLON       reduce using rule 41 (var_cte -> VAR_STRING .)
    OP_RPAREN       reduce using rule 41 (var_cte -> VAR_STRING .)


state 51

    (14) if -> IF OP_LPAREN mega_expression . OP_RPAREN bloque

    OP_RPAREN       shift and go to state 72


state 52

    (17) printer -> PRINT OP_LPAREN impresion . OP_RPAREN SEMICOLON

    OP_RPAREN       shift and go to state 73


state 53

    (18) impresion -> var_cte .
    (19) impresion -> var_cte . OP_PLUS impresion

    OP_RPAREN       reduce using rule 18 (impresion -> var_cte .)
    OP_PLUS         shift and go to state 74


state 54

    (2) vars -> INT ID OP_EQUALS VAR_INT SEMICOLON . vars
    (2) vars -> . INT ID OP_EQUALS VAR_INT SEMICOLON vars
    (3) vars -> . FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars
    (4) vars -> . STRING ID OP_EQUALS VAR_STRING SEMICOLON vars
    (5) vars -> . BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars
    (6) vars -> . epsilon
    (42) epsilon -> .

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    BOOLEAN         shift and go to state 10
    LCURLY_BRACKET  reduce using rule 42 (epsilon -> .)
    RCURLY_BRACKET  reduce using rule 42 (epsilon -> .)
    ID              reduce using rule 42 (epsilon -> .)
    IF              reduce using rule 42 (epsilon -> .)
    PRINT           reduce using rule 42 (epsilon -> .)

    vars                           shift and go to state 75
    epsilon                        shift and go to state 11

state 55

    (3) vars -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON . vars
    (2) vars -> . INT ID OP_EQUALS VAR_INT SEMICOLON vars
    (3) vars -> . FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars
    (4) vars -> . STRING ID OP_EQUALS VAR_STRING SEMICOLON vars
    (5) vars -> . BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars
    (6) vars -> . epsilon
    (42) epsilon -> .

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    BOOLEAN         shift and go to state 10
    LCURLY_BRACKET  reduce using rule 42 (epsilon -> .)
    RCURLY_BRACKET  reduce using rule 42 (epsilon -> .)
    ID              reduce using rule 42 (epsilon -> .)
    IF              reduce using rule 42 (epsilon -> .)
    PRINT           reduce using rule 42 (epsilon -> .)

    vars                           shift and go to state 76
    epsilon                        shift and go to state 11

state 56

    (4) vars -> STRING ID OP_EQUALS VAR_STRING SEMICOLON . vars
    (2) vars -> . INT ID OP_EQUALS VAR_INT SEMICOLON vars
    (3) vars -> . FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars
    (4) vars -> . STRING ID OP_EQUALS VAR_STRING SEMICOLON vars
    (5) vars -> . BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars
    (6) vars -> . epsilon
    (42) epsilon -> .

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    BOOLEAN         shift and go to state 10
    LCURLY_BRACKET  reduce using rule 42 (epsilon -> .)
    RCURLY_BRACKET  reduce using rule 42 (epsilon -> .)
    ID              reduce using rule 42 (epsilon -> .)
    IF              reduce using rule 42 (epsilon -> .)
    PRINT           reduce using rule 42 (epsilon -> .)

    vars                           shift and go to state 77
    epsilon                        shift and go to state 11

state 57

    (5) vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON . vars
    (2) vars -> . INT ID OP_EQUALS VAR_INT SEMICOLON vars
    (3) vars -> . FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars
    (4) vars -> . STRING ID OP_EQUALS VAR_STRING SEMICOLON vars
    (5) vars -> . BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars
    (6) vars -> . epsilon
    (42) epsilon -> .

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    BOOLEAN         shift and go to state 10
    LCURLY_BRACKET  reduce using rule 42 (epsilon -> .)
    RCURLY_BRACKET  reduce using rule 42 (epsilon -> .)
    ID              reduce using rule 42 (epsilon -> .)
    IF              reduce using rule 42 (epsilon -> .)
    PRINT           reduce using rule 42 (epsilon -> .)

    vars                           shift and go to state 78
    epsilon                        shift and go to state 11

state 58

    (13) assigment -> ID OP_EQUALS mega_expression SEMICOLON .

    RCURLY_BRACKET  reduce using rule 13 (assigment -> ID OP_EQUALS mega_expression SEMICOLON .)
    ID              reduce using rule 13 (assigment -> ID OP_EQUALS mega_expression SEMICOLON .)
    IF              reduce using rule 13 (assigment -> ID OP_EQUALS mega_expression SEMICOLON .)
    PRINT           reduce using rule 13 (assigment -> ID OP_EQUALS mega_expression SEMICOLON .)


state 59

    (21) mega_expression -> super_expression AND . super_expression
    (23) super_expression -> . expression
    (24) super_expression -> . expression OP_GREATER_THAN expression
    (25) super_expression -> . expression OP_LESS_THAN expression
    (26) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (27) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (28) super_expression -> . expression OP_EQUALS_TWO expression
    (29) super_expression -> . expression OP_NOT_EQUALS expression
    (30) expression -> . term
    (31) expression -> . term OP_PLUS expression
    (32) expression -> . term OP_MINUS expression
    (33) term -> . fact
    (34) term -> . fact OP_DIVISION term
    (35) term -> . fact OP_TIMES term
    (36) fact -> . var_cte
    (37) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (38) var_cte -> . ID
    (39) var_cte -> . VAR_INT
    (40) var_cte -> . VAR_FLOAT
    (41) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 47
    ID              shift and go to state 40
    VAR_INT         shift and go to state 48
    VAR_FLOAT       shift and go to state 49
    VAR_STRING      shift and go to state 50

    super_expression               shift and go to state 79
    expression                     shift and go to state 43
    term                           shift and go to state 44
    fact                           shift and go to state 45
    var_cte                        shift and go to state 46

state 60

    (22) mega_expression -> super_expression OR . super_expression
    (23) super_expression -> . expression
    (24) super_expression -> . expression OP_GREATER_THAN expression
    (25) super_expression -> . expression OP_LESS_THAN expression
    (26) super_expression -> . expression OP_GREATER_EQUALS_THAN expression
    (27) super_expression -> . expression OP_LESS_EQUALS_THAN expression
    (28) super_expression -> . expression OP_EQUALS_TWO expression
    (29) super_expression -> . expression OP_NOT_EQUALS expression
    (30) expression -> . term
    (31) expression -> . term OP_PLUS expression
    (32) expression -> . term OP_MINUS expression
    (33) term -> . fact
    (34) term -> . fact OP_DIVISION term
    (35) term -> . fact OP_TIMES term
    (36) fact -> . var_cte
    (37) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (38) var_cte -> . ID
    (39) var_cte -> . VAR_INT
    (40) var_cte -> . VAR_FLOAT
    (41) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 47
    ID              shift and go to state 40
    VAR_INT         shift and go to state 48
    VAR_FLOAT       shift and go to state 49
    VAR_STRING      shift and go to state 50

    super_expression               shift and go to state 80
    expression                     shift and go to state 43
    term                           shift and go to state 44
    fact                           shift and go to state 45
    var_cte                        shift and go to state 46

state 61

    (24) super_expression -> expression OP_GREATER_THAN . expression
    (30) expression -> . term
    (31) expression -> . term OP_PLUS expression
    (32) expression -> . term OP_MINUS expression
    (33) term -> . fact
    (34) term -> . fact OP_DIVISION term
    (35) term -> . fact OP_TIMES term
    (36) fact -> . var_cte
    (37) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (38) var_cte -> . ID
    (39) var_cte -> . VAR_INT
    (40) var_cte -> . VAR_FLOAT
    (41) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 47
    ID              shift and go to state 40
    VAR_INT         shift and go to state 48
    VAR_FLOAT       shift and go to state 49
    VAR_STRING      shift and go to state 50

    expression                     shift and go to state 81
    term                           shift and go to state 44
    fact                           shift and go to state 45
    var_cte                        shift and go to state 46

state 62

    (25) super_expression -> expression OP_LESS_THAN . expression
    (30) expression -> . term
    (31) expression -> . term OP_PLUS expression
    (32) expression -> . term OP_MINUS expression
    (33) term -> . fact
    (34) term -> . fact OP_DIVISION term
    (35) term -> . fact OP_TIMES term
    (36) fact -> . var_cte
    (37) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (38) var_cte -> . ID
    (39) var_cte -> . VAR_INT
    (40) var_cte -> . VAR_FLOAT
    (41) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 47
    ID              shift and go to state 40
    VAR_INT         shift and go to state 48
    VAR_FLOAT       shift and go to state 49
    VAR_STRING      shift and go to state 50

    expression                     shift and go to state 82
    term                           shift and go to state 44
    fact                           shift and go to state 45
    var_cte                        shift and go to state 46

state 63

    (26) super_expression -> expression OP_GREATER_EQUALS_THAN . expression
    (30) expression -> . term
    (31) expression -> . term OP_PLUS expression
    (32) expression -> . term OP_MINUS expression
    (33) term -> . fact
    (34) term -> . fact OP_DIVISION term
    (35) term -> . fact OP_TIMES term
    (36) fact -> . var_cte
    (37) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (38) var_cte -> . ID
    (39) var_cte -> . VAR_INT
    (40) var_cte -> . VAR_FLOAT
    (41) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 47
    ID              shift and go to state 40
    VAR_INT         shift and go to state 48
    VAR_FLOAT       shift and go to state 49
    VAR_STRING      shift and go to state 50

    expression                     shift and go to state 83
    term                           shift and go to state 44
    fact                           shift and go to state 45
    var_cte                        shift and go to state 46

state 64

    (27) super_expression -> expression OP_LESS_EQUALS_THAN . expression
    (30) expression -> . term
    (31) expression -> . term OP_PLUS expression
    (32) expression -> . term OP_MINUS expression
    (33) term -> . fact
    (34) term -> . fact OP_DIVISION term
    (35) term -> . fact OP_TIMES term
    (36) fact -> . var_cte
    (37) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (38) var_cte -> . ID
    (39) var_cte -> . VAR_INT
    (40) var_cte -> . VAR_FLOAT
    (41) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 47
    ID              shift and go to state 40
    VAR_INT         shift and go to state 48
    VAR_FLOAT       shift and go to state 49
    VAR_STRING      shift and go to state 50

    expression                     shift and go to state 84
    term                           shift and go to state 44
    fact                           shift and go to state 45
    var_cte                        shift and go to state 46

state 65

    (28) super_expression -> expression OP_EQUALS_TWO . expression
    (30) expression -> . term
    (31) expression -> . term OP_PLUS expression
    (32) expression -> . term OP_MINUS expression
    (33) term -> . fact
    (34) term -> . fact OP_DIVISION term
    (35) term -> . fact OP_TIMES term
    (36) fact -> . var_cte
    (37) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (38) var_cte -> . ID
    (39) var_cte -> . VAR_INT
    (40) var_cte -> . VAR_FLOAT
    (41) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 47
    ID              shift and go to state 40
    VAR_INT         shift and go to state 48
    VAR_FLOAT       shift and go to state 49
    VAR_STRING      shift and go to state 50

    expression                     shift and go to state 85
    term                           shift and go to state 44
    fact                           shift and go to state 45
    var_cte                        shift and go to state 46

state 66

    (29) super_expression -> expression OP_NOT_EQUALS . expression
    (30) expression -> . term
    (31) expression -> . term OP_PLUS expression
    (32) expression -> . term OP_MINUS expression
    (33) term -> . fact
    (34) term -> . fact OP_DIVISION term
    (35) term -> . fact OP_TIMES term
    (36) fact -> . var_cte
    (37) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (38) var_cte -> . ID
    (39) var_cte -> . VAR_INT
    (40) var_cte -> . VAR_FLOAT
    (41) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 47
    ID              shift and go to state 40
    VAR_INT         shift and go to state 48
    VAR_FLOAT       shift and go to state 49
    VAR_STRING      shift and go to state 50

    expression                     shift and go to state 86
    term                           shift and go to state 44
    fact                           shift and go to state 45
    var_cte                        shift and go to state 46

state 67

    (31) expression -> term OP_PLUS . expression
    (30) expression -> . term
    (31) expression -> . term OP_PLUS expression
    (32) expression -> . term OP_MINUS expression
    (33) term -> . fact
    (34) term -> . fact OP_DIVISION term
    (35) term -> . fact OP_TIMES term
    (36) fact -> . var_cte
    (37) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (38) var_cte -> . ID
    (39) var_cte -> . VAR_INT
    (40) var_cte -> . VAR_FLOAT
    (41) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 47
    ID              shift and go to state 40
    VAR_INT         shift and go to state 48
    VAR_FLOAT       shift and go to state 49
    VAR_STRING      shift and go to state 50

    term                           shift and go to state 44
    expression                     shift and go to state 87
    fact                           shift and go to state 45
    var_cte                        shift and go to state 46

state 68

    (32) expression -> term OP_MINUS . expression
    (30) expression -> . term
    (31) expression -> . term OP_PLUS expression
    (32) expression -> . term OP_MINUS expression
    (33) term -> . fact
    (34) term -> . fact OP_DIVISION term
    (35) term -> . fact OP_TIMES term
    (36) fact -> . var_cte
    (37) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (38) var_cte -> . ID
    (39) var_cte -> . VAR_INT
    (40) var_cte -> . VAR_FLOAT
    (41) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 47
    ID              shift and go to state 40
    VAR_INT         shift and go to state 48
    VAR_FLOAT       shift and go to state 49
    VAR_STRING      shift and go to state 50

    term                           shift and go to state 44
    expression                     shift and go to state 88
    fact                           shift and go to state 45
    var_cte                        shift and go to state 46

state 69

    (34) term -> fact OP_DIVISION . term
    (33) term -> . fact
    (34) term -> . fact OP_DIVISION term
    (35) term -> . fact OP_TIMES term
    (36) fact -> . var_cte
    (37) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (38) var_cte -> . ID
    (39) var_cte -> . VAR_INT
    (40) var_cte -> . VAR_FLOAT
    (41) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 47
    ID              shift and go to state 40
    VAR_INT         shift and go to state 48
    VAR_FLOAT       shift and go to state 49
    VAR_STRING      shift and go to state 50

    fact                           shift and go to state 45
    term                           shift and go to state 89
    var_cte                        shift and go to state 46

state 70

    (35) term -> fact OP_TIMES . term
    (33) term -> . fact
    (34) term -> . fact OP_DIVISION term
    (35) term -> . fact OP_TIMES term
    (36) fact -> . var_cte
    (37) fact -> . OP_LPAREN mega_expression OP_RPAREN
    (38) var_cte -> . ID
    (39) var_cte -> . VAR_INT
    (40) var_cte -> . VAR_FLOAT
    (41) var_cte -> . VAR_STRING

    OP_LPAREN       shift and go to state 47
    ID              shift and go to state 40
    VAR_INT         shift and go to state 48
    VAR_FLOAT       shift and go to state 49
    VAR_STRING      shift and go to state 50

    fact                           shift and go to state 45
    term                           shift and go to state 90
    var_cte                        shift and go to state 46

state 71

    (37) fact -> OP_LPAREN mega_expression . OP_RPAREN

    OP_RPAREN       shift and go to state 91


state 72

    (14) if -> IF OP_LPAREN mega_expression OP_RPAREN . bloque
    (7) bloque -> . LCURLY_BRACKET bloque RCURLY_BRACKET
    (8) bloque -> . bloque statement
    (9) bloque -> . epsilon
    (42) epsilon -> .

    LCURLY_BRACKET  shift and go to state 12
    ID              reduce using rule 42 (epsilon -> .)
    IF              reduce using rule 42 (epsilon -> .)
    PRINT           reduce using rule 42 (epsilon -> .)
    RCURLY_BRACKET  reduce using rule 42 (epsilon -> .)

    bloque                         shift and go to state 92
    epsilon                        shift and go to state 14

state 73

    (17) printer -> PRINT OP_LPAREN impresion OP_RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 93


state 74

    (19) impresion -> var_cte OP_PLUS . impresion
    (18) impresion -> . var_cte
    (19) impresion -> . var_cte OP_PLUS impresion
    (38) var_cte -> . ID
    (39) var_cte -> . VAR_INT
    (40) var_cte -> . VAR_FLOAT
    (41) var_cte -> . VAR_STRING

    ID              shift and go to state 40
    VAR_INT         shift and go to state 48
    VAR_FLOAT       shift and go to state 49
    VAR_STRING      shift and go to state 50

    var_cte                        shift and go to state 53
    impresion                      shift and go to state 94

state 75

    (2) vars -> INT ID OP_EQUALS VAR_INT SEMICOLON vars .

    LCURLY_BRACKET  reduce using rule 2 (vars -> INT ID OP_EQUALS VAR_INT SEMICOLON vars .)
    RCURLY_BRACKET  reduce using rule 2 (vars -> INT ID OP_EQUALS VAR_INT SEMICOLON vars .)
    ID              reduce using rule 2 (vars -> INT ID OP_EQUALS VAR_INT SEMICOLON vars .)
    IF              reduce using rule 2 (vars -> INT ID OP_EQUALS VAR_INT SEMICOLON vars .)
    PRINT           reduce using rule 2 (vars -> INT ID OP_EQUALS VAR_INT SEMICOLON vars .)


state 76

    (3) vars -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars .

    LCURLY_BRACKET  reduce using rule 3 (vars -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars .)
    RCURLY_BRACKET  reduce using rule 3 (vars -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars .)
    ID              reduce using rule 3 (vars -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars .)
    IF              reduce using rule 3 (vars -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars .)
    PRINT           reduce using rule 3 (vars -> FLOAT ID OP_EQUALS VAR_FLOAT SEMICOLON vars .)


state 77

    (4) vars -> STRING ID OP_EQUALS VAR_STRING SEMICOLON vars .

    LCURLY_BRACKET  reduce using rule 4 (vars -> STRING ID OP_EQUALS VAR_STRING SEMICOLON vars .)
    RCURLY_BRACKET  reduce using rule 4 (vars -> STRING ID OP_EQUALS VAR_STRING SEMICOLON vars .)
    ID              reduce using rule 4 (vars -> STRING ID OP_EQUALS VAR_STRING SEMICOLON vars .)
    IF              reduce using rule 4 (vars -> STRING ID OP_EQUALS VAR_STRING SEMICOLON vars .)
    PRINT           reduce using rule 4 (vars -> STRING ID OP_EQUALS VAR_STRING SEMICOLON vars .)


state 78

    (5) vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars .

    LCURLY_BRACKET  reduce using rule 5 (vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars .)
    RCURLY_BRACKET  reduce using rule 5 (vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars .)
    ID              reduce using rule 5 (vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars .)
    IF              reduce using rule 5 (vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars .)
    PRINT           reduce using rule 5 (vars -> BOOLEAN ID OP_EQUALS VAR_BOOLEAN SEMICOLON vars .)


state 79

    (21) mega_expression -> super_expression AND super_expression .

    SEMICOLON       reduce using rule 21 (mega_expression -> super_expression AND super_expression .)
    OP_RPAREN       reduce using rule 21 (mega_expression -> super_expression AND super_expression .)


state 80

    (22) mega_expression -> super_expression OR super_expression .

    SEMICOLON       reduce using rule 22 (mega_expression -> super_expression OR super_expression .)
    OP_RPAREN       reduce using rule 22 (mega_expression -> super_expression OR super_expression .)


state 81

    (24) super_expression -> expression OP_GREATER_THAN expression .

    AND             reduce using rule 24 (super_expression -> expression OP_GREATER_THAN expression .)
    OR              reduce using rule 24 (super_expression -> expression OP_GREATER_THAN expression .)
    SEMICOLON       reduce using rule 24 (super_expression -> expression OP_GREATER_THAN expression .)
    OP_RPAREN       reduce using rule 24 (super_expression -> expression OP_GREATER_THAN expression .)


state 82

    (25) super_expression -> expression OP_LESS_THAN expression .

    AND             reduce using rule 25 (super_expression -> expression OP_LESS_THAN expression .)
    OR              reduce using rule 25 (super_expression -> expression OP_LESS_THAN expression .)
    SEMICOLON       reduce using rule 25 (super_expression -> expression OP_LESS_THAN expression .)
    OP_RPAREN       reduce using rule 25 (super_expression -> expression OP_LESS_THAN expression .)


state 83

    (26) super_expression -> expression OP_GREATER_EQUALS_THAN expression .

    AND             reduce using rule 26 (super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    OR              reduce using rule 26 (super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    SEMICOLON       reduce using rule 26 (super_expression -> expression OP_GREATER_EQUALS_THAN expression .)
    OP_RPAREN       reduce using rule 26 (super_expression -> expression OP_GREATER_EQUALS_THAN expression .)


state 84

    (27) super_expression -> expression OP_LESS_EQUALS_THAN expression .

    AND             reduce using rule 27 (super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    OR              reduce using rule 27 (super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    SEMICOLON       reduce using rule 27 (super_expression -> expression OP_LESS_EQUALS_THAN expression .)
    OP_RPAREN       reduce using rule 27 (super_expression -> expression OP_LESS_EQUALS_THAN expression .)


state 85

    (28) super_expression -> expression OP_EQUALS_TWO expression .

    AND             reduce using rule 28 (super_expression -> expression OP_EQUALS_TWO expression .)
    OR              reduce using rule 28 (super_expression -> expression OP_EQUALS_TWO expression .)
    SEMICOLON       reduce using rule 28 (super_expression -> expression OP_EQUALS_TWO expression .)
    OP_RPAREN       reduce using rule 28 (super_expression -> expression OP_EQUALS_TWO expression .)


state 86

    (29) super_expression -> expression OP_NOT_EQUALS expression .

    AND             reduce using rule 29 (super_expression -> expression OP_NOT_EQUALS expression .)
    OR              reduce using rule 29 (super_expression -> expression OP_NOT_EQUALS expression .)
    SEMICOLON       reduce using rule 29 (super_expression -> expression OP_NOT_EQUALS expression .)
    OP_RPAREN       reduce using rule 29 (super_expression -> expression OP_NOT_EQUALS expression .)


state 87

    (31) expression -> term OP_PLUS expression .

    OP_GREATER_THAN reduce using rule 31 (expression -> term OP_PLUS expression .)
    OP_LESS_THAN    reduce using rule 31 (expression -> term OP_PLUS expression .)
    OP_GREATER_EQUALS_THAN reduce using rule 31 (expression -> term OP_PLUS expression .)
    OP_LESS_EQUALS_THAN reduce using rule 31 (expression -> term OP_PLUS expression .)
    OP_EQUALS_TWO   reduce using rule 31 (expression -> term OP_PLUS expression .)
    OP_NOT_EQUALS   reduce using rule 31 (expression -> term OP_PLUS expression .)
    AND             reduce using rule 31 (expression -> term OP_PLUS expression .)
    OR              reduce using rule 31 (expression -> term OP_PLUS expression .)
    SEMICOLON       reduce using rule 31 (expression -> term OP_PLUS expression .)
    OP_RPAREN       reduce using rule 31 (expression -> term OP_PLUS expression .)


state 88

    (32) expression -> term OP_MINUS expression .

    OP_GREATER_THAN reduce using rule 32 (expression -> term OP_MINUS expression .)
    OP_LESS_THAN    reduce using rule 32 (expression -> term OP_MINUS expression .)
    OP_GREATER_EQUALS_THAN reduce using rule 32 (expression -> term OP_MINUS expression .)
    OP_LESS_EQUALS_THAN reduce using rule 32 (expression -> term OP_MINUS expression .)
    OP_EQUALS_TWO   reduce using rule 32 (expression -> term OP_MINUS expression .)
    OP_NOT_EQUALS   reduce using rule 32 (expression -> term OP_MINUS expression .)
    AND             reduce using rule 32 (expression -> term OP_MINUS expression .)
    OR              reduce using rule 32 (expression -> term OP_MINUS expression .)
    SEMICOLON       reduce using rule 32 (expression -> term OP_MINUS expression .)
    OP_RPAREN       reduce using rule 32 (expression -> term OP_MINUS expression .)


state 89

    (34) term -> fact OP_DIVISION term .

    OP_PLUS         reduce using rule 34 (term -> fact OP_DIVISION term .)
    OP_MINUS        reduce using rule 34 (term -> fact OP_DIVISION term .)
    OP_GREATER_THAN reduce using rule 34 (term -> fact OP_DIVISION term .)
    OP_LESS_THAN    reduce using rule 34 (term -> fact OP_DIVISION term .)
    OP_GREATER_EQUALS_THAN reduce using rule 34 (term -> fact OP_DIVISION term .)
    OP_LESS_EQUALS_THAN reduce using rule 34 (term -> fact OP_DIVISION term .)
    OP_EQUALS_TWO   reduce using rule 34 (term -> fact OP_DIVISION term .)
    OP_NOT_EQUALS   reduce using rule 34 (term -> fact OP_DIVISION term .)
    AND             reduce using rule 34 (term -> fact OP_DIVISION term .)
    OR              reduce using rule 34 (term -> fact OP_DIVISION term .)
    SEMICOLON       reduce using rule 34 (term -> fact OP_DIVISION term .)
    OP_RPAREN       reduce using rule 34 (term -> fact OP_DIVISION term .)


state 90

    (35) term -> fact OP_TIMES term .

    OP_PLUS         reduce using rule 35 (term -> fact OP_TIMES term .)
    OP_MINUS        reduce using rule 35 (term -> fact OP_TIMES term .)
    OP_GREATER_THAN reduce using rule 35 (term -> fact OP_TIMES term .)
    OP_LESS_THAN    reduce using rule 35 (term -> fact OP_TIMES term .)
    OP_GREATER_EQUALS_THAN reduce using rule 35 (term -> fact OP_TIMES term .)
    OP_LESS_EQUALS_THAN reduce using rule 35 (term -> fact OP_TIMES term .)
    OP_EQUALS_TWO   reduce using rule 35 (term -> fact OP_TIMES term .)
    OP_NOT_EQUALS   reduce using rule 35 (term -> fact OP_TIMES term .)
    AND             reduce using rule 35 (term -> fact OP_TIMES term .)
    OR              reduce using rule 35 (term -> fact OP_TIMES term .)
    SEMICOLON       reduce using rule 35 (term -> fact OP_TIMES term .)
    OP_RPAREN       reduce using rule 35 (term -> fact OP_TIMES term .)


state 91

    (37) fact -> OP_LPAREN mega_expression OP_RPAREN .

    OP_DIVISION     reduce using rule 37 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_TIMES        reduce using rule 37 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_PLUS         reduce using rule 37 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_MINUS        reduce using rule 37 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_GREATER_THAN reduce using rule 37 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_LESS_THAN    reduce using rule 37 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_GREATER_EQUALS_THAN reduce using rule 37 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_LESS_EQUALS_THAN reduce using rule 37 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_EQUALS_TWO   reduce using rule 37 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_NOT_EQUALS   reduce using rule 37 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    AND             reduce using rule 37 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OR              reduce using rule 37 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    SEMICOLON       reduce using rule 37 (fact -> OP_LPAREN mega_expression OP_RPAREN .)
    OP_RPAREN       reduce using rule 37 (fact -> OP_LPAREN mega_expression OP_RPAREN .)


state 92

    (14) if -> IF OP_LPAREN mega_expression OP_RPAREN bloque .
    (8) bloque -> bloque . statement
    (10) statement -> . assigment
    (11) statement -> . if
    (12) statement -> . printer
    (13) assigment -> . ID OP_EQUALS mega_expression SEMICOLON
    (14) if -> . IF OP_LPAREN mega_expression OP_RPAREN bloque
    (17) printer -> . PRINT OP_LPAREN impresion OP_RPAREN SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RCURLY_BRACKET  reduce using rule 14 (if -> IF OP_LPAREN mega_expression OP_RPAREN bloque .)
    ID              shift and go to state 20
    IF              shift and go to state 26
    PRINT           shift and go to state 27

  ! ID              [ reduce using rule 14 (if -> IF OP_LPAREN mega_expression OP_RPAREN bloque .) ]
  ! IF              [ reduce using rule 14 (if -> IF OP_LPAREN mega_expression OP_RPAREN bloque .) ]
  ! PRINT           [ reduce using rule 14 (if -> IF OP_LPAREN mega_expression OP_RPAREN bloque .) ]

    statement                      shift and go to state 22
    assigment                      shift and go to state 23
    if                             shift and go to state 24
    printer                        shift and go to state 25

state 93

    (17) printer -> PRINT OP_LPAREN impresion OP_RPAREN SEMICOLON .

    RCURLY_BRACKET  reduce using rule 17 (printer -> PRINT OP_LPAREN impresion OP_RPAREN SEMICOLON .)
    ID              reduce using rule 17 (printer -> PRINT OP_LPAREN impresion OP_RPAREN SEMICOLON .)
    IF              reduce using rule 17 (printer -> PRINT OP_LPAREN impresion OP_RPAREN SEMICOLON .)
    PRINT           reduce using rule 17 (printer -> PRINT OP_LPAREN impresion OP_RPAREN SEMICOLON .)


state 94

    (19) impresion -> var_cte OP_PLUS impresion .

    OP_RPAREN       reduce using rule 19 (impresion -> var_cte OP_PLUS impresion .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 92 resolved as shift
WARNING: shift/reduce conflict for IF in state 92 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 92 resolved as shift
